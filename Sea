Read both file line by line merge both file in one file .
add file 2 in file 1 do changes and give me updated excelService.js

file-1 


excelService.js


const fs = require("fs");
const xlsx = require("xlsx");
const path = require("path");
const ping = require("ping");
const pLimit = require("p-limit");
const { DateTime } = require('luxon'); // Import Luxon for timezone handling

// Paths for Excel files
const archiverPath = path.join(__dirname, "../data/ArchiverData.xlsx");
const controllerPath = path.join(__dirname, "../data/ControllerData.xlsx");
const cameraPath = path.join(__dirname, "../data/CameraData.xlsx");
const serverPath = path.join(__dirname, "../data/ServerData.xlsx");

// Cache to store preloaded data
let allData = {};

// Function to normalize column headers
const normalizeHeaders = (data) => {
    return data.map((row) => {
        const normalizedRow = {};
        for (const key in row) {
            const normalizedKey = key.trim().toLowerCase().replace(/\s+/g, '_');
            normalizedRow[normalizedKey] = row[key];
        }
        return normalizedRow;
    });
};

// Function to load Excel data into cache
const loadExcelData = () => {
    if (Object.keys(allData).length === 0) { // Load only if not already loaded
        const loadSheet = (filePath) => {
            const workbook = xlsx.readFile(filePath);
            return normalizeHeaders(xlsx.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[0]]));
        };

        allData = {
            archivers: loadSheet(archiverPath),
            controllers: loadSheet(controllerPath),
            cameras: loadSheet(cameraPath),
            servers: loadSheet(serverPath),
        };

        // Initialize history for all devices
        for (const deviceList of Object.values(allData)) {
            deviceList.forEach(device => {
                if (!device.history) {
                    device.history = [];  // Initialize empty history array if not already present
                }
            });
        }

        console.log("Excel Data Loaded:", Object.keys(allData));
    }
};

// Fetch all IP addresses from loaded devices
const fetchAllIpAddress = () => {
    if (!allData || Object.keys(allData).length === 0) {
        console.error("Error: Device data is not loaded.");
        return [];
    }

    return Object.values(allData).flatMap(devices => devices.map(device => device.ip_address).filter(Boolean));
};

// Fetch Global Data with device summary
const fetchGlobalData = async () => {
    if (!allData || Object.keys(allData).length === 0) {
        console.error("Error: Device data is not loaded.");
        return null;
    }

    const allDevices = [...allData.cameras, ...allData.archivers, ...allData.controllers, ...allData.servers];

    await pingDevices(allDevices);
    const summary = calculateSummary(allData);

    return { summary, details: allData };
};

// Fetch Region Data with summary
const fetchRegionData = async (regionName) => {
    if (!allData || Object.keys(allData).length === 0) {
        console.error("Error: Device data is not loaded.");
        return null;
    }

    const filterByRegion = (devices) => 
        devices.filter(device => device.location?.toLowerCase() === regionName.toLowerCase());

    const regionDevices = {
        cameras: filterByRegion(allData.cameras),
        archivers: filterByRegion(allData.archivers),
        controllers: filterByRegion(allData.controllers),
        servers: filterByRegion(allData.servers),
    };

    await pingDevices([...regionDevices.cameras, ...regionDevices.archivers, ...regionDevices.controllers, ...regionDevices.servers]);

    const summary = calculateSummary(regionDevices);
    return { summary, details: regionDevices };
};

// Calculate Summary of Devices
const calculateSummary = (devices) => {
    const summary = {};

    for (const [key, deviceList] of Object.entries(devices)) {
        const total = deviceList.length;
        const online = deviceList.filter(device => device.status === "Online").length;
        const offline = total - online;

        summary[key] = { total, online, offline };
    }

    return {
        totalDevices: Object.values(summary).reduce((sum, { total }) => sum + total, 0),
        totalOnlineDevices: Object.values(summary).reduce((sum, { online }) => sum + online, 0),
        totalOfflineDevices: Object.values(summary).reduce((sum, { offline }) => sum + offline, 0),
        ...summary,
    };
};



// Function to Ping Devices and Cache Results
const cache = new Map();
const pingDevices = async (devices) => {
    const limit = pLimit(10); // Ping max 10 devices concurrently

    const pingPromises = devices.map((device) =>
        limit(async () => {
            if (!device.ip_address) {
                device.status = "IP Address Missing";
                return;
            }

            if (cache.has(device.ip_address)) {
                device.status = cache.get(device.ip_address);
            } else {
                device.status = await pingDevice(device.ip_address);
                cache.set(device.ip_address, device.status);
            }
        })
    );

    await Promise.all(pingPromises);
};


// Function to Ping a Single Device
const pingDevice = (ip) => {
    return new Promise((resolve) => {
        ping.sys.probe(ip, (isAlive) => {
            resolve(isAlive ? "Online" : "Offline");
        });
    });
};





// Example usage when fetching history for a device
const fetchDeviceHistory = async (device) => {
    const logFile = "./deviceLogs.json";
    let devicesLogs = fs.existsSync(logFile) ? JSON.parse(fs.readFileSync(logFile, "utf8")) : {};
  

    // Now fetch the logs from the device (for simplicity, assuming logs are in UTC format)
    const deviceLogs = devicesLogs[device.ip]

 deviceLogs.forEach(log => {
        const convertedTimestamp = DateTime.fromISO(log.timestamp, { zone: 'utc' }).setZone('Asia/Kolkata').toISO(); // Convert from UTC to IST
        device.history.push({
            status: log.status,
            timestamp: convertedTimestamp
        });
    });

    console.log(`Device ${device.device_name || device.ip_address} history after fetch:`, device.history);
};



// Function to add device history with IST timestamp and keep only the last 30 days of history
const addDeviceHistory = (device, status) => {
    const istTime = DateTime.now().setZone('Asia/Kolkata').toISO(); // Current IST time

    // Log device status and timestamp before adding history
    console.log(`Adding history for device ${device.device_name || device.ip_address}: Status - ${status}, Timestamp - ${istTime}`);

    // Add a new status change entry to the device's history
    device.history.push({
        status: status,
        timestamp: istTime
    });

    // Keep history entries only for the past 30 days or 7 days
    device.history = device.history.filter(entry => {
        const entryTime = DateTime.fromISO(entry.timestamp);
        return entryTime > DateTime.now().minus({ days: 7 });
    });
    //months: 1 

    // Log after adding the status
    console.log(`History for device ${device.device_name || device.ip_address}:`, device.history);
};



// Function to compute Uptime & Downtime from Device History
const computeDeviceStats = (history) => {
    let uptime = 0, downtime = 0, downtimeDuration = 0;
    let lastStatus = history[0].status;
    let lastTimestamp = DateTime.fromISO(history[0].timestamp, { zone: 'Asia/Kolkata' }).toMillis(); // Convert from ISO string to milliseconds

    for (let i = 1; i < history.length; i++) {
        let currentStatus = history[i].status;
        let currentTime = DateTime.fromISO(history[i].timestamp, { zone: 'Asia/Kolkata' }).toMillis(); // Convert from ISO string to milliseconds
        let timeDiff = (currentTime - lastTimestamp) / 60000; // Convert to minutes

        if (timeDiff > 0) {
            if (lastStatus === "Online" && currentStatus === "Online") uptime += timeDiff;
            if (lastStatus === "Offline" && currentStatus === "Offline") downtime += timeDiff;
            if (lastStatus === "Offline" && currentStatus === "Online") downtimeDuration += timeDiff;
        }

        lastStatus = currentStatus;
        lastTimestamp = currentTime;
    }

    // Return uptime, downtime, and downtime duration in minutes
    return { uptime: Math.round(uptime), downtime: Math.round(downtime), downtimeDuration: Math.round(downtimeDuration) };
};


const fetchRegionTrendData = async (region) => {
    if (!allData || Object.keys(allData).length === 0) {
        console.error("Error: Device data is not loaded.");
        return null;
    }

    const filterByRegion = (devices) => 
        devices.filter(device => device.location?.toLowerCase() === region.toLowerCase());

    const regionDevices = {
        cameras: filterByRegion(allData.cameras),
        archivers: filterByRegion(allData.archivers),
        controllers: filterByRegion(allData.controllers),
        servers: filterByRegion(allData.servers)
    };

    if (!regionDevices.cameras.length && !regionDevices.archivers.length && !regionDevices.controllers.length && !regionDevices.servers.length) {
        console.log(`No devices found for region: ${region}`);
        return null;
    }


    // Fetch and update the history for each device in the region
    await Promise.all([
        ...regionDevices.cameras.map(device => fetchDeviceHistory(device)),
        ...regionDevices.archivers.map(device => fetchDeviceHistory(device)),
        ...regionDevices.controllers.map(device => fetchDeviceHistory(device)),
        ...regionDevices.servers.map(device => fetchDeviceHistory(device))
    ]);

    // Now calculate trends after updating histories
    const trends = calculateDeviceTrends(regionDevices);

    // Return the trend analysis data
    return { trends };
};


// Calculate Trends for Devices
const calculateDeviceTrends = (devices) => {
    return {
        daily: calculateTrend(devices, "daily"),
      // monthly: calculateTrend(devices, "monthly")
    };
};



// Compute Uptime and Downtime for the given trend period
const calculateTrend = (devices, period) => {
    const allDevices = [...devices.cameras, ...devices.archivers, ...devices.controllers, ...devices.servers];

    return allDevices.map(device => {
        if (!device.history || device.history.length === 0) {
            return { device_name: device.device_name || "Unknown", ip_address: device.ip_address, uptime: 0, downtime: 0, downtimeDuration: 0 };
        }

        return { ...computeDeviceStats(device.history), device_name: device.device_name || "Unknown", ip_address: device.ip_address };
    });
};


// Preload Data
loadExcelData();

module.exports = { fetchGlobalData, fetchRegionData, fetchAllIpAddress, fetchRegionTrendData };



file 2-


deviceMonitor.js

const fs = require("fs");
const { DateTime } = require("luxon");

const logFile = "./deviceLogs.json";

// Load logs from the file
const loadLogs = () => fs.existsSync(logFile) ? JSON.parse(fs.readFileSync(logFile, "utf8")) : {};

// Save logs back to the file
const saveLogs = (logs) => fs.writeFileSync(logFile, JSON.stringify(logs, null, 2), "utf8");

// Track active monitoring sessions
const activeDevices = {};

// Function to monitor device status in real-time
const monitorDevice = (device) => {
    const logs = loadLogs();
    const currentTime = DateTime.now().setZone("Asia/Kolkata").toISO();

    // Get last status entry
    let lastEntry = logs[device.ip]?.slice(-1)[0]; 
    let lastStatus = lastEntry ? lastEntry.status : null;

    // If status changed, log it and start monitoring
    if (lastStatus !== device.status) {
        console.log(`Status changed: ${device.device_name || device.ip} is now ${device.status}`);

        // Save new status change
        logs[device.ip] = logs[device.ip] || [];
        logs[device.ip].push({ status: device.status, timestamp: currentTime });
        saveLogs(logs);

        // If status changed, start uptime/downtime tracking
        if (device.status === "Online") {
            startUptime(device);
        } else {
            startDowntime(device);
        }
    }
};

// Function to start uptime tracking
const startUptime = (device) => {
    if (activeDevices[device.ip]) {
        clearInterval(activeDevices[device.ip]);
    }

    activeDevices[device.ip] = setInterval(() => {
        console.log(`Device ${device.device_name || device.ip} is Online. Increasing Uptime...`);
        updateUptime(device);
    }, 60000); // Updates every minute
};

// Function to start downtime tracking
const startDowntime = (device) => {
    if (activeDevices[device.ip]) {
        clearInterval(activeDevices[device.ip]);
    }

    activeDevices[device.ip] = setInterval(() => {
        console.log(`Device ${device.device_name || device.ip} is Offline. Increasing Downtime...`);
        updateDowntime(device);
    }, 60000); // Updates every minute
};

// Function to update uptime in real-time
const updateUptime = (device) => {
    const logs = loadLogs();
    const currentTime = DateTime.now().setZone("Asia/Kolkata").toISO();

    logs[device.ip] = logs[device.ip] || [];
    logs[device.ip].push({ status: "Online", timestamp: currentTime });

    saveLogs(logs);
};

// Function to update downtime in real-time
const updateDowntime = (device) => {
    const logs = loadLogs();
    const currentTime = DateTime.now().setZone("Asia/Kolkata").toISO();

    logs[device.ip] = logs[device.ip] || [];
    logs[device.ip].push({ status: "Offline", timestamp: currentTime });

    saveLogs(logs);
};

// Function to stop tracking when a device status changes
const stopTracking = (device) => {
    if (activeDevices[device.ip]) {
        clearInterval(activeDevices[device.ip]);
        delete activeDevices[device.ip];
    }
};

// Example function to check device status periodically (simulate real-time status checking)
const checkDeviceStatus = (device) => {
    setInterval(() => {
        // Fetch current status (This should come from actual device monitoring logic)
        const isOnline = Math.random() > 0.5; // Simulated device status change
        device.status = isOnline ? "Online" : "Offline";

        monitorDevice(device);
    }, 30000); // Check status every 30 seconds
};





