<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trend Analysis</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar">
        <h3>Device Trend Analysis</h3>

        <!-- Region Selector -->
        <div class="region-selector">
            <button onclick="fetchTrendData('apac', getDeviceType())">APAC</button>
            <button onclick="fetchTrendData('emea', getDeviceType())">EMEA</button>
            <button onclick="fetchTrendData('laca', getDeviceType())">LACA</button>
            <button onclick="fetchTrendData('namer', getDeviceType())">NAMER</button>
        </div>

        <!-- Device Type Dropdown -->
        <div class="device-type">
            <label for="deviceType">Select Device Type:</label>
            <select id="deviceType" onchange="fetchTrendData(getRegion(), this.value)">
                <option value="cameras">Cameras</option>
                <option value="archivers">Archivers</option>
                <option value="servers">Servers</option>
                <option value="controllers">Controllers</option>
                <option value="Unknown">Unknown</option>
            </select>
        </div>

        <!-- Search Device -->
        <input type="text" id="searchBox" placeholder="Search Device" oninput="searchDevice()">

        <!-- Back to Dashboard Button -->
        <button onclick="window.location.href='index.html'">Back to Dashboard</button>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <div class="chart-container">
            <canvas id="trendChart"></canvas>
        </div>
    </div>

    <div class="container">
        <h1>Device Trend Report</h1>
        
        <div class="region-select">
            <label for="region">Select Region:</label>
            <select id="region" onchange="fetchDeviceData()">
                <option value="apac">APAC</option>
                <option value="emea">EMEA</option>
                <option value="laca">LACA</option>
                <option value="namer">NAMER</option>
            </select>
        </div>

        <table id="device-table">
            <thead>
                <tr>
                    <th>Device IP</th>
                    <th>Device Name</th>
                    <th>Device Type</th>
                    <th>Uptime Duration</th>
                    <th>Downtime Duration</th>
                    <th>Details</th>
                    <th>Remark</th>
                </tr>
            </thead>
            <tbody>
                <!-- Device data rows will be populated here -->
            </tbody>
        </table>
    </div>

    <div id="device-history-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeHistoryModal()">&times;</span>
            <h2>Device History</h2>
            <div id="device-history">
                <!-- History data will be displayed here -->
            </div>
        </div>
    </div>

    <script src="script.js"></script>
</body>
</html>









// Wait for the DOM to load before executing any scripts
document.addEventListener('DOMContentLoaded', function() {
    // Fetch data for devices based on region and device type
    function fetchDeviceData() {
        const region = document.getElementById('region').value;
        fetch(`/api/region/${region}/devices`)  // Example API endpoint
            .then(response => response.json())
            .then(data => {
                populateDeviceTable(data);
            })
            .catch(error => {
                console.error('Error fetching device data:', error);
            });
    }

    // Populate the device table with the fetched data
    function populateDeviceTable(devices) {
        const tableBody = document.getElementById('device-table').getElementsByTagName('tbody')[0];
        tableBody.innerHTML = ''; // Clear existing rows
        if (Array.isArray(devices)) {
            devices.forEach(device => {
                const row = tableBody.insertRow();
                row.innerHTML = `
                    <td>${device.ip}</td>
                    <td>${device.name}</td>
                    <td>${device.type}</td>
                    <td>${device.uptime}</td>
                    <td>${device.downtime}</td>
                    <td><button onclick="openDeviceHistory(${device.id})">View History</button></td>
                    <td>${device.remark}</td>
                `;
            });
        } else {
            console.error('Devices data is not an array:', devices);
        }
    }

    // Open the device history modal
    function openDeviceHistory(deviceId) {
        fetch(`/api/device/${deviceId}/history`)  // Example API endpoint
            .then(response => response.json())
            .then(data => {
                const historyElement = document.getElementById('device-history');
                historyElement.innerHTML = JSON.stringify(data, null, 2);  // Display device history
                document.getElementById('device-history-modal').style.display = 'block';
            })
            .catch(error => {
                console.error('Error fetching device history:', error);
            });
    }

    // Close the device history modal
    function closeHistoryModal() {
        document.getElementById('device-history-modal').style.display = 'none';
    }

    // Fetch data when the page loads
    fetchDeviceData();

    // Add event listeners for other functionalities
    const searchBox = document.getElementById('searchBox');
    if (searchBox) {
        searchBox.addEventListener('input', searchDevice);
    }

    // Function to handle searching devices
    function searchDevice() {
        const query = searchBox.value.toLowerCase();
        const rows = document.querySelectorAll('#device-table tbody tr');
        rows.forEach(row => {
            const cells = row.querySelectorAll('td');
            const matchesQuery = Array.from(cells).some(cell => cell.textContent.toLowerCase().includes(query));
            row.style.display = matchesQuery ? '' : 'none';
        });
    }

    // Export data as Excel (Example, modify based on data format)
    function exportToExcel() {
        const table = document.getElementById('device-table');
        const tableHTML = table.outerHTML;
        const blob = new Blob([tableHTML], { type: 'application/vnd.ms-excel' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = 'device_trend_report.xls';
        link.click();
    }

    // Example of trend data fetch (may need modification based on actual data)
    function fetchTrendData(region, deviceType) {
        fetch(`/api/region/${region}/devices/${deviceType}/trend`)  // Example API endpoint
            .then(response => response.json())
            .then(data => {
                updateTrendChart(data);
            })
            .catch(error => {
                console.error('Error fetching trend data:', error);
            });
    }

    // Example of chart update (modify based on your chart library)
    function updateTrendChart(data) {
        const ctx = document.getElementById('trendChart').getContext('2d');
        new Chart(ctx, {
            type: 'line',  // Example chart type
            data: {
                labels: data.labels,
                datasets: [{
                    label: 'Device Trend',
                    data: data.values,
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1,
                    fill: false
                }]
            }
        });
    }
});
