const pingDevices = async (devices) => {
    const limit = pLimit(10); // Ping max 10 devices concurrently

    const pingPromises = devices.map((device) =>
        limit(async () => {
            if (!device.ip_address) {
                device.status = "IP Address Missing";
                return;
            }

            const prevStatus = cache.get(device.ip_address) || "Unknown";
            const newStatus = await pingDevice(device.ip_address);

            if (prevStatus !== newStatus) {
                addDeviceHistory(device, newStatus);
            }

            cache.set(device.ip_address, newStatus);
            device.status = newStatus;
        })
    );

    await Promise.all(pingPromises);
};





const fetchRegionTrendData = async (region) => {
    if (!allData || Object.keys(allData).length === 0) {
        console.error("Error: Device data is not loaded.");
        return null;
    }

    const filterByRegion = (devices) => 
        devices.filter(device => device.location?.toLowerCase() === region.toLowerCase());

    const regionDevices = {
        cameras: filterByRegion(allData.cameras),
        archivers: filterByRegion(allData.archivers),
        controllers: filterByRegion(allData.controllers),
        servers: filterByRegion(allData.servers)
    };

    if (!regionDevices.cameras.length && !regionDevices.archivers.length && !regionDevices.controllers.length && !regionDevices.servers.length) {
        console.log(`No devices found for region: ${region}`);
        return null;
    }

    // Ping devices to fetch their live status
    await pingDevices([...regionDevices.cameras, ...regionDevices.archivers, ...regionDevices.controllers, ...regionDevices.servers]);

    const dailyTrends = [];
    for (const deviceType of Object.values(regionDevices)) {
        for (const device of deviceType) {
            const { uptime, downtime, downtimeDuration } = computeDeviceStats(device.history);

            dailyTrends.push({
                device_name: device.device_name || "Unknown",
                ip_address: device.ip_address,
                uptime,
                downtime,
                downtimeDuration
            });
        }
    }

    return {
        daily: dailyTrends
    };
};

