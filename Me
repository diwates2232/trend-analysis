<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <h1 style="display: flex; margin-bottom: 5%; align-self: center; margin-top: 0%; margin-bottom: 0%;">Device Trend Report</h1>

    <div class="container">
        <!-- Sidebar -->
        <div class="sidebar">
            <button onclick="window.location.href='index.html'">Back to Dashboard</button>

            <label for="region">Select Region:</label>
            <select id="region" onchange="fetchDeviceData()">
                <option value="apac">APAC</option>
                <option value="emea">EMEA</option>
                <option value="laca">LACA</option>
                <option value="namer">NAMER</option>
            </select>

            <label for="deviceType">Filter by Device Type:</label>
            <select id="deviceType" onchange="filterData()">
                <option value="all">All</option>
                <option value="Controller">Controller</option>
                <option value="Archiver">Archiver</option>
                <option value="Camera">Camera</option>
                <option value="Server">Server</option>
            </select>

            <label for="remarkFilter">Filter by Remark:</label>
            <select id="remarkFilter" onchange="filterData()">
                <option value="all">All</option>
                <option value="Device needs repair">Device needs repair</option>
                <option value="Device working properly">Device working properly</option>
            </select>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <table id="device-table">
                <thead>
                    <tr>
                        <th>Device IP</th>
                        <th>Device Name</th>
                        <th>Device Type</th>
                        <th>Uptime Duration</th>
                        <th>Downtime Count</th>
                        <th>Downtime Duration</th>
                        <th>Details</th>
                        <th>Remark</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Device data rows will be populated here -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- Device History Modal -->
    <div id="device-history-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeHistoryModal()">&times;</span>
            <h2>Device History</h2>
            <div id="device-history">
                <!-- History data will be displayed here -->
            </div>
        </div>
    </div>

    <script src="trend.js"></script>
</body>
</html>






document.addEventListener('DOMContentLoaded', function () {
    function fetchDeviceData() {
        const selectedRegion = document.getElementById('region').value;
        fetch(`http://localhost/api/regions/details/${selectedRegion}`)
            .then(response => response.json())
            .then(data => {
                populateDeviceTable(data.details);
                fetchTrendData(selectedRegion);
            })
            .catch(error => console.error('Error fetching device data:', error));
    }

    function populateDeviceTable(details) {
        const tableBody = document.getElementById('device-table').getElementsByTagName('tbody')[0];
        tableBody.innerHTML = ''; // Clear existing rows

        if (details) {
            ['cameras', 'archivers', 'controllers', 'servers'].forEach(deviceType => {
                details[deviceType]?.forEach(device => {
                    const downtimeCount = device.history.filter(entry => entry.status === "Offline").length;
                    const downtimeDuration = formatDuration(calculateDowntimeDuration(device.history));
                    const uptimeDuration = formatDuration(calculateUptimeDuration(device.history));
                    const remark = (downtimeCount > 5 || calculateDowntimeDuration(device.history) >= 5) 
                        ? "Device needs repair" 
                        : "Device working properly";

                    const row = tableBody.insertRow();
                    row.innerHTML = `
                        <td>${device.ip_address}</td>
                        <td>${device[deviceType.slice(0, -1) + 'name']}</td>
                        <td>${deviceType.slice(0, -1).toUpperCase()}</td>
                        <td>${uptimeDuration}</td>
                        <td>${downtimeCount}</td>
                        <td>${downtimeDuration}</td>
                        <td><button onclick="openDeviceHistory('${device.ip_address}')">View History</button></td>
                        <td>${remark}</td>
                    `;
                });
            });
        } else {
            console.error('No details found in the response');
        }
    }

    function calculateUptimeDuration(history) {
        let uptimeDuration = 0;
        if (history) {
            history.forEach(entry => {
                if (entry.status === "Online") {
                    uptimeDuration += 60; // Assume each online entry represents 1 hour
                }
            });
        }
        return uptimeDuration;
    }

    function calculateDowntimeDuration(history) {
        let downtimeDuration = 0;
        if (history) {
            for (let i = 1; i < history.length; i++) {
                if (history[i].status === "Offline" && history[i - 1].status === "Online") {
                    let diff = new Date(history[i].timestamp) - new Date(history[i - 1].timestamp);
                    downtimeDuration += diff / (1000 * 60); // Convert to minutes
                }
            }
        }
        return downtimeDuration;
    }

    function formatDuration(minutes) {
        const hours = Math.floor(minutes / 60);
        const mins = Math.floor(minutes % 60);
        return `${hours}h ${mins}m`;
    }

    function openDeviceHistory(ipAddress) {
        fetch(`http://localhost/api/device/history/${ipAddress}`)
            .then(response => response.json())
            .then(data => {
                displayDeviceHistory(data.history);
            })
            .catch(error => console.error('Error fetching device history:', error));

        document.getElementById('device-history-modal').style.display = 'block';
    }

    function displayDeviceHistory(history) {
        const historyContainer = document.getElementById('device-history');
        historyContainer.innerHTML = '';

        if (history && history.length > 0) {
            history.forEach(entry => {
                const entryDiv = document.createElement('div');
                const date = new Date(entry.timestamp);
                const formattedDate = date.toDateString();
                const day = date.toLocaleDateString(undefined, { weekday: 'long' });
                entryDiv.innerHTML = `<p><strong>${day}, ${formattedDate}</strong> - ${entry.status}</p>`;
                historyContainer.appendChild(entryDiv);
            });
        } else {
            historyContainer.innerHTML = '<p>No history available</p>';
        }
    }

    function closeHistoryModal() {
        document.getElementById('device-history-modal').style.display = 'none';
    }

    function filterData() {
        const selectedType = document.getElementById('deviceType').value;
        const selectedRemark = document.getElementById('remarkFilter').value;
        const table = document.getElementById('device-table');
        const rows = table.getElementsByTagName('tbody')[0].getElementsByTagName('tr');

        for (let row of rows) {
            const type = row.cells[2].textContent;
            const remark = row.cells[7].textContent;

            if ((selectedType === "all" || type === selectedType) &&
                (selectedRemark === "all" || remark === selectedRemark)) {
                row.style.display = "";
            } else {
                row.style.display = "none";
            }
        }
    }

    document.getElementById('region').addEventListener('change', fetchDeviceData);
    fetchDeviceData(); // Initial load
});

