document.addEventListener("DOMContentLoaded", function () {
    document.getElementById('region').addEventListener('change', fetchDeviceData);
    document.getElementById('device-type').addEventListener('change', filterData);
    document.getElementById('remark-filter').addEventListener('change', filterData);
    
    fetchDeviceData(); // Initial data load
});

function fetchDeviceData() {
    const selectedRegion = document.getElementById('region').value;
    showLoading(); // Show loading animation

    fetch(`http://localhost/api/regions/details/${selectedRegion}`)
        .then(response => response.json())
        .then(regionData => {
            fetchDeviceHistory(regionData.details);
        })
        .catch(error => console.error('Error fetching device data:', error));
}

function fetchDeviceHistory(regionDetails) {
    fetch(`http://localhost/api/devices/history`)
        .then(response => response.json())
        .then(historyData => {
            populateDeviceTable(regionDetails, historyData);
            hideLoading(); // Hide loading animation after data is loaded
        })
        .catch(error => {
            console.error('Error fetching device history:', error);
            hideLoading(); // Ensure loading is hidden even if there's an error
        });
}

function populateDeviceTable(details, historyData) {
    const tableBody = document.getElementById('device-table').getElementsByTagName('tbody')[0];
    tableBody.innerHTML = ''; // Clear existing rows

    if (details) {
        ['cameras', 'archivers', 'controllers', 'servers'].forEach(deviceType => {
            details[deviceType]?.forEach(device => {
                const deviceIp = device.ip_address;
                const deviceName = device[deviceType.slice(0, -1) + 'name'];
                const deviceCategory = deviceType.slice(0, -1).toUpperCase();
                
                const deviceHistory = historyData[deviceIp] || [];
                const lastStatusEntry = deviceHistory.length > 0 ? deviceHistory[deviceHistory.length - 1] : null;
                const currentStatus = lastStatusEntry ? lastStatusEntry.status : "Unknown";

                const row = document.createElement("tr");
                row.innerHTML = `
                    <td>${deviceIp}</td>
                    <td>${deviceName}</td>
                    <td>${deviceCategory}</td>
                    <td id="uptime-${deviceIp}">0h/0m/0s</td>
                    <td id="downtime-count-${deviceIp}">0</td>
                    <td id="downtime-${deviceIp}">0h/0m/0s</td>
                    <td><button onclick="openDeviceHistory('${deviceIp}')">View History</button></td>
                    <td id="remark-${deviceIp}">Device working properly</td>
                `;

                row.style.color = currentStatus === "Online" ? "green" : "red"; // Set text color

                tableBody.appendChild(row);

                if (currentStatus === "Online") {
                    startUptime(deviceIp, deviceHistory);
                } else {
                    startDowntime(deviceIp, deviceHistory);
                }

                updateRemarks(deviceIp, deviceHistory);
            });
        });
    } else {
        console.error('No details found in the response');
    }
}

function filterData() {
    const selectedType = document.getElementById('device-type').value;
    const selectedRemark = document.getElementById('remark-filter').value;
    const rows = document.getElementById('device-table').getElementsByTagName('tbody')[0].getElementsByTagName('tr');

    for (let row of rows) {
        const type = row.cells[2].textContent;
        const remark = row.cells[7].textContent;

        if ((selectedType === "all" || type === selectedType) &&
            (selectedRemark === "all" || remark.includes(selectedRemark))) {
            row.style.display = "";
        } else {
            row.style.display = "none";
        }
    }
}

function showLoading() {
    const loadingDiv = document.getElementById("loading");
    if (loadingDiv) {
        loadingDiv.style.display = "block"; // Show loading
    }
}

function hideLoading() {
    const loadingDiv = document.getElementById("loading");
    if (loadingDiv) {
        loadingDiv.style.display = "none"; // Hide loading
    }
}
