this is API-http://localhost/api/regions/details/apac
We can replace region name apac /emea laca/ namer 
API responce is -
{
  "details": {
    "cameras": [
      {
        "cameraname": "PUNE Green Zone to yellow zone passage - 10.199.10.20 (FLIR CM-3102-11-I T71552107) - 350",
        "ip_address": "10.199.10.20",
        "location": "APAC",
        "history": [
          {
            "status": "Online",
            "timestamp": "2025-03-05T16:23:16.323+05:30"
          }
        ],
        "status": "Online"
      },
  ],
    "archivers": [
      {
        "archivername": "Archiver Manila",
        "ip_address": "10.193.132.8",
        "location": "APAC",
        "history": [
          {
            "status": "Online",
            "timestamp": "2025-03-19T00:52:30.526+05:30"
          }
        ],
        "status": "Online"
      },



same for Controller and Server 
& 
My Second API-


http://localhost/api/devices/history

{
  "10.199.10.20": [
    {
      "status": "Online",
      "timestamp": "2025-03-19T00:53:16.323Z"
    }
  ],
"10.65.32.99": [
    {
      "status": "Online",
      "timestamp": "2025-03-19T01:11:38.031Z"
    },
    {
      "status": "Offline",
      "timestamp": "2025-03-19T18:00:05.008Z"
    },
    {
      "status": "Online",
      "timestamp": "2025-03-19T18:01:00.691Z"
    }
  ],

this 2nd API Store device history.When device goes offline when it back online.

Now check my prevous trend.js file and at the last i share you what i want to change in my file 

read trend.js file 


document.addEventListener('DOMContentLoaded', function () {
    function fetchDeviceData() {
        const selectedRegion = document.getElementById('region').value;
        fetch(`http://localhost/api/regions/details/${selectedRegion}`)
            .then(response => response.json())
            .then(data => {
                populateDeviceTable(data.details);
                fetchTrendData(selectedRegion);
            })
            .catch(error => console.error('Error fetching device data:', error));
    }

    function populateDeviceTable(details) {
        const tableBody = document.getElementById('device-table').getElementsByTagName('tbody')[0];
        tableBody.innerHTML = ''; // Clear existing rows

        if (details) {
            ['cameras', 'archivers', 'controllers', 'servers'].forEach(deviceType => {
                details[deviceType]?.forEach(device => {
                    const downtimeCount = device.history.filter(entry => entry.status === "Offline").length;
                    const downtimeDuration = formatDuration(calculateDowntimeDuration(device.history));
                    const uptimeDuration = formatDuration(calculateUptimeDuration(device.history));
                    const remark = (downtimeCount > 5 || calculateDowntimeDuration(device.history) >= 5) 
                        ? "Device needs repair" 
                        : "Device working properly";

                    const row = tableBody.insertRow();
                    row.innerHTML = `
                        <td>${device.ip_address}</td>
                        <td>${device[deviceType.slice(0, -1) + 'name']}</td>
                        <td>${deviceType.slice(0, -1).toUpperCase()}</td>
                        <td>${uptimeDuration}</td>
                        <td>${downtimeCount}</td>
                        <td>${downtimeDuration}</td>
                        <td><button onclick="openDeviceHistory('${device.ip_address}')">View History</button></td>
                        <td>${remark}</td>
                    `;
                });
            });
        } else {
            console.error('No details found in the response');
        }
    }

    function calculateUptimeDuration(history) {
        let uptimeDuration = 0;
        if (history) {
            history.forEach(entry => {
                if (entry.status === "Online") {
                    uptimeDuration += 60; // Assume each online entry represents 1 hour
                }
            });
        }
        return uptimeDuration;
    }

    function calculateDowntimeDuration(history) {
        let downtimeDuration = 0;
        if (history) {
            for (let i = 1; i < history.length; i++) {
                if (history[i].status === "Offline" && history[i - 1].status === "Online") {
                    let diff = new Date(history[i].timestamp) - new Date(history[i - 1].timestamp);
                    downtimeDuration += diff / (1000 * 60); // Convert to minutes
                }
            }
        }
        return downtimeDuration;
    }

    function formatDuration(minutes) {
        const hours = Math.floor(minutes / 60);
        const mins = Math.floor(minutes % 60);
        return `${hours}h ${mins}m`;
    }



    function openDeviceHistory(ipAddress) {
        fetch(`http://localhost/api/device/history/${ipAddress}`)
        
            .then(response => response.json())
            .then(data => {
                displayDeviceHistory(data.history);
            })
            .catch(error => console.error('Error fetching device history:', error));

        document.getElementById('device-history-modal').style.display = 'block';
    }

    function displayDeviceHistory(history) {
        const historyContainer = document.getElementById('device-history');
        historyContainer.innerHTML = '';

        if (history && history.length > 0) {
            history.forEach(entry => {
                const entryDiv = document.createElement('div');
                const date = new Date(entry.timestamp);
                const formattedDate = date.toDateString();
                const day = date.toLocaleDateString(undefined, { weekday: 'long' });
                entryDiv.innerHTML = `<p><strong>${day}, ${formattedDate}</strong> - ${entry.status}</p>`;
                historyContainer.appendChild(entryDiv);
            });
        } else {
            historyContainer.innerHTML = '<p>No history available</p>';
        }
    }

    function closeHistoryModal() {
        document.getElementById('device-history-modal').style.display = 'none';
    }

    function filterData() {
        const selectedType = document.getElementById('deviceType').value;
        const selectedRemark = document.getElementById('remarkFilter').value;
        const table = document.getElementById('device-table');
        const rows = table.getElementsByTagName('tbody')[0].getElementsByTagName('tr');

        for (let row of rows) {
            const type = row.cells[2].textContent;
            const remark = row.cells[7].textContent;

            if ((selectedType === "all" || type === selectedType) &&
                (selectedRemark === "all" || remark === selectedRemark)) {
                row.style.display = "";
            } else {
                row.style.display = "none";
            }
        }
    }

    document.getElementById('region').addEventListener('change', fetchDeviceData);
    fetchDeviceData(); // Initial load
});





now i want to improve my trend.js as follows

http://localhost/api/regions/details/apac
using this API update 
Device IP , Device Name , Device type , 

Now For Uptime Duration 

http://localhost/api/devices/history

use this API - match Ip Address .
Uptime calculation "If in History Device Status is Online Check timestamp Check  date & time' Convert it into Indian time zone and display on UI realtime " realtime mean for ex- in history device status is online 19-3-2025 time 2:00 Am and there is other
device histoty and current time is 2:23 am for same day then i want display On Ui Uptime like 0h/23m/10sec this format and i want increase time in realtime

When device goes offline then start monitor its downtime duration on same Format and Update On UI realtime.

Monitor Uptime & downtime count and Update On UI 


As per my request Update my trend.js file and give full updated file.



