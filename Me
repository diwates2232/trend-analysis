this is API-http://localhost/api/regions/details/apac
We can replace region name apac /emea laca/ namer 
API responce is -
{
  "details": {
    "cameras": [
      {
        "cameraname": "PUNE Green Zone to yellow zone passage - 10.199.10.20 (FLIR CM-3102-11-I T71552107) - 350",
        "ip_address": "10.199.10.20",
        "location": "APAC",
        "history": [
          {
            "status": "Online",
            "timestamp": "2025-03-05T16:23:16.323+05:30"
          }
        ],
        "status": "Online"
      },
  ],
    "archivers": [
      {
        "archivername": "Archiver Manila",
        "ip_address": "10.193.132.8",
        "location": "APAC",
        "history": [
          {
            "status": "Online",
            "timestamp": "2025-03-19T00:52:30.526+05:30"
          }
        ],
        "status": "Online"
      },

same for Controller and Server 

In below code downtime count are not added you .
and for History use above API dont use diffrent API.
and When i refresh Ui time is automatically restart and start again from zero .so kindly update below code and give me correct code.




document.addEventListener('DOMContentLoaded', function () {
    let deviceUptimeMap = {}; // Stores uptime for each device
    let deviceDowntimeMap = {}; // Stores downtime for each device
    let deviceTypeMap = {}; // Stores device type for filtering

    function fetchDeviceData() {
        const selectedRegion = document.getElementById('region').value;
        fetch(`http://localhost/api/regions/details/${selectedRegion}`)
            .then(response => response.json())
            .then(data => {
                processDeviceData(data.details);
            })
            .catch(error => console.error('Error fetching device data:', error));
    }

    function processDeviceData(details) {
        if (!details) {
            console.error('No device details found');
            return;
        }

        const tableBody = document.getElementById('device-table').getElementsByTagName('tbody')[0];
        tableBody.innerHTML = ''; // Clear existing rows

        ['cameras', 'archivers', 'controllers', 'servers'].forEach(deviceType => {
            details[deviceType]?.forEach(device => {
                trackDeviceStatus(device, deviceType);
            });
        });

        updateDeviceTable();
    }

    function trackDeviceStatus(device, deviceType) {
        const ip = device.ip_address;
        const history = device.history || [];

        if (!deviceUptimeMap[ip]) deviceUptimeMap[ip] = 0; // Initialize uptime
        if (!deviceDowntimeMap[ip]) deviceDowntimeMap[ip] = 0; // Initialize downtime
        deviceTypeMap[ip] = deviceType; // Store device type for filtering

        if (history.length > 0) {
            let lastEntry = history[history.length - 1];

            if (lastEntry.status === "Online") {
                deviceUptimeMap[ip] += 1; // Increase uptime every second
                deviceDowntimeMap[ip] = 0; // Reset downtime if online
            } else if (lastEntry.status === "Offline") {
                deviceDowntimeMap[ip] += 1; // Increase downtime every second
            }
        }
    }

    function updateDeviceTable() {
        const tableBody = document.getElementById('device-table').getElementsByTagName('tbody')[0];
        tableBody.innerHTML = ''; // Clear existing rows

        Object.keys(deviceUptimeMap).forEach(ip => {
            const uptimeFormatted = formatDuration(deviceUptimeMap[ip]);
            const downtimeFormatted = formatDuration(deviceDowntimeMap[ip]);
            const remark = deviceDowntimeMap[ip] >= 300 ? "Device needs repair" : "Device working properly"; // If downtime > 5 minutes, mark for repair
            const deviceType = deviceTypeMap[ip].toUpperCase();

            const row = tableBody.insertRow();
            row.innerHTML = `
                <td>${ip}</td>
                <td>Device ${ip}</td>
                <td>${deviceType}</td>
                <td>${uptimeFormatted}</td>
                <td>${downtimeFormatted}</td>
                <td><button onclick="openDeviceHistory('${ip}')">View History</button></td>
                <td>${remark}</td>
            `;
        });

        filterData(); // Apply filters after updating the table
    }

    function formatDuration(seconds) {
        let days = Math.floor(seconds / (24 * 3600));
        seconds %= 24 * 3600;
        let hours = Math.floor(seconds / 3600);
        seconds %= 3600;
        let minutes = Math.floor(seconds / 60);
        let secs = seconds % 60;
        return `${days}d ${hours}h ${minutes}m ${secs}s`;
    }

    // Refresh uptime and downtime every second
    setInterval(() => {
        Object.keys(deviceUptimeMap).forEach(ip => {
            trackDeviceStatus({ ip_address: ip, history: [{ status: "Online" }] }, deviceTypeMap[ip]);
        });
        updateDeviceTable();
    }, 1000);

    fetchDeviceData();

    // Function to fetch and display device history
    function openDeviceHistory(ipAddress) {
        fetch(`http://localhost/api/device/history/${ipAddress}`)
            .then(response => response.json())
            .then(data => {
                displayDeviceHistory(data.history);
            })
            .catch(error => console.error('Error fetching device history:', error));

        document.getElementById('device-history-modal').style.display = 'block';
    }

    function displayDeviceHistory(history) {
        const historyContainer = document.getElementById('device-history');
        historyContainer.innerHTML = '';

        if (history && history.length > 0) {
            history.forEach(entry => {
                const entryDiv = document.createElement('div');
                const date = new Date(entry.timestamp);
                const formattedDate = date.toDateString();
                const day = date.toLocaleDateString(undefined, { weekday: 'long' });
                entryDiv.innerHTML = `<p><strong>${day}, ${formattedDate}</strong> - ${entry.status}</p>`;
                historyContainer.appendChild(entryDiv);
            });
        } else {
            historyContainer.innerHTML = '<p>No history available</p>';
        }
    }

    function closeHistoryModal() {
        document.getElementById('device-history-modal').style.display = 'none';
    }

    function filterData() {
        const selectedType = document.getElementById('deviceType').value;
        const selectedRemark = document.getElementById('remarkFilter').value;
        const table = document.getElementById('device-table');
        const rows = table.getElementsByTagName('tbody')[0].getElementsByTagName('tr');

        for (let row of rows) {
            const type = row.cells[2].textContent.trim();
            const remark = row.cells[6].textContent.trim(); // Fix: Correct column index for remark

            if ((selectedType === "all" || type === selectedType.toUpperCase()) &&
                (selectedRemark === "all" || remark === selectedRemark)) {
                row.style.display = "";
            } else {
                row.style.display = "none";
            }
        }
    }

    // Attach event listeners
    document.getElementById('region').addEventListener('change', fetchDeviceData);
    document.getElementById('deviceType').addEventListener('change', filterData);
    document.getElementById('remarkFilter').addEventListener('change', filterData);
});



