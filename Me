let statusUpdateNeeded = false; // Corrected variable name

function pingAllDevices(details) {
    let updatedSummary = {
        totalDevices: 0,
        totalOnlineDevices: 0,
        totalOfflineDevices: 0,
        cameras: { total: 0, online: 0, offline: 0 },
        archivers: { total: 0, online: 0, offline: 0 },
        controllers: { total: 0, online: 0, offline: 0 },
        servers: { total: 0, online: 0, offline: 0 }
    };

    let promises = []; // Store promises to wait for all pings

    for (const [key, devices] of Object.entries(details.details)) {
        if (!Array.isArray(devices) || devices.length === 0) continue;

        updatedSummary[key].total = devices.length;
        updatedSummary.totalDevices += devices.length;

        devices.forEach((device) => {
            const ip = device.ip_address || "N/A";
            const card = document.querySelector(`[data-ip="${ip}"]`);
            if (!card) return;

            let pingPromise = fetch(`${baseUrl}/ping/${ip}`)
                .then(response => response.json())
                .then(statusData => {
                    const newStatus = statusData.status.toLowerCase();
                    const statusDot = card.querySelector(".status-dot");
                    const statusText = card.querySelector(".device-status");

                    if (newStatus === "online") {
                        statusDot.style.backgroundColor = "green";
                        statusText.textContent = "Online";
                        card.dataset.status = "online";
                        updatedSummary[key].online++;
                        updatedSummary.totalOnlineDevices++;
                    } else {
                        statusDot.style.backgroundColor = "red";
                        statusText.textContent = "Offline";
                        card.dataset.status = "offline";
                        updatedSummary[key].offline++;
                        updatedSummary.totalOfflineDevices++;
                    }

                    statusUpdateNeeded = true; // Ensure summary updates
                })
                .catch(error => console.error(`Ping failed for ${ip}:`, error));

            promises.push(pingPromise);
        });
    }

    // Wait for all devices to be checked before updating summary
    Promise.all(promises).then(() => {
        if (statusUpdateNeeded) {
            updateSummary(updatedSummary);
        }
    });
}



let pingInterval; // Store interval reference

function fetchDetails(regionName) {
    const detailsUrl = `${baseUrl}/details/${regionName}`;

    fetch(detailsUrl)
        .then((response) => {
            if (!response.ok) {
                throw new Error("Error fetching details data from API.");
            }
            return response.json();
        })
        .then((details) => {
            console.log("Details Data:", details);
            updateDetails(details);

            // Clear previous interval before setting a new one
            if (pingInterval) clearInterval(pingInterval);

            // Start live pinging every 5 minutes
            pingInterval = setInterval(() => pingAllDevices(details), 300000);
        })
        .catch((error) => {
            console.error("Error fetching details:", error);
            document.getElementById("device-details").innerHTML = "<p>Failed to load device details.</p>";
        });
}





function updateSummary(data) {
    document.getElementById("total-devices").textContent = data.totalDevices || "N/A";
    document.getElementById("online-devices").textContent = data.totalOnlineDevices || "N/A";
    document.getElementById("offline-devices").textContent = data.totalOfflineDevices || "N/A";

    // Update Cameras summary
    document.getElementById("camera-total").textContent = data.cameras.total || "N/A";
    document.getElementById("camera-online").textContent = data.cameras.online || "N/A";
    document.getElementById("camera-offline").textContent = data.cameras.offline || "N/A";

    // Update Archivers summary
    document.getElementById("archiver-total").textContent = data.archivers.total || "N/A";
    document.getElementById("archiver-online").textContent = data.archivers.online || "N/A";
    document.getElementById("archiver-offline").textContent = data.archivers.offline || "N/A";

    // Update Controllers summary
    document.getElementById("controller-total").textContent = data.controllers.total || "N/A";
    document.getElementById("controller-online").textContent = data.controllers.online || "N/A";
    document.getElementById("controller-offline").textContent = data.controllers.offline || "N/A";

    // Update Servers summary
    document.getElementById("server-total").textContent = data.servers.total || "N/A";
    document.getElementById("server-online").textContent = data.servers.online || "N/A";
    document.getElementById("server-offline").textContent = data.servers.offline || "N/A";
}








document.addEventListener("DOMContentLoaded", () => {
    let regionName = "global"; // Default region
    fetchSummary(regionName);
    fetchDetails(regionName);
    startAutoRefresh(regionName); // Ensure only one refresh loop runs

    // Add event listeners to region buttons
    document.querySelectorAll(".region-button").forEach((button) => {
        button.addEventListener("click", () => {
            const region = button.getAttribute("data-region");
            document.getElementById("region-title").textContent = `${region.toUpperCase()} Summary`;
            fetchSummary(region);
            fetchDetails(region);
        });
    });

    // Close modal on button click
    document.getElementById("close-modal").addEventListener("click", () => {
        document.getElementById("modal").style.display = "none";
    });
});

