The above error is not resolve 
for more information check each function.
Once check My File And solve above error.



let deviceUptimeTimers = {};
let deviceDowntimeTimers = {};

function fetchDeviceData() {
    const selectedRegion = document.getElementById('region').value;
    fetch(`http://localhost/api/regions/details/${selectedRegion}`)
        .then(response => response.json())
        .then(regionData => {
            fetchDeviceHistory(regionData.details);
        })
        .catch(error => console.error('Error fetching device data:', error));
}



function fetchDeviceHistory(regionDetails) {
    fetch(`http://localhost/api/devices/history`)
        .then(response => response.json())
        .then(historyData => {
            populateDeviceTable(regionDetails, historyData);
            window.deviceHistoryData = historyData; // Store history for reuse
        })
        .catch(error => console.error('Error fetching device history:', error));
}





function populateDeviceTable(details, historyData) {
    const tableBody = document.getElementById('device-table').getElementsByTagName('tbody')[0];
    tableBody.innerHTML = ''; // Clear existing rows

    if (details) {
        ['cameras', 'archivers', 'controllers', 'servers'].forEach(deviceType => {
            details[deviceType]?.forEach(device => {
                const deviceIp = device.ip_address;
                const deviceName = device[deviceType.slice(0, -1) + 'name'];
                const deviceCategory = deviceType.slice(0, -1).toUpperCase();
                
                const deviceHistory = historyData[deviceIp] || [];
                const lastStatusEntry = deviceHistory.length > 0 ? deviceHistory[deviceHistory.length - 1] : null;
                const currentStatus = lastStatusEntry ? lastStatusEntry.status : "Unknown";

                // Create table row with borders for all cells
                const row = tableBody.insertRow();
                row.style.border = "1px solid black"; // Add border to row

                row.innerHTML = `
                    <td>${deviceIp}</td>
                    <td>${deviceName}</td>
                    <td>${deviceCategory}</td>
                    <td id="uptime-${deviceIp}">0h/0m/0s</td>
                    <td id="downtime-count-${deviceIp}">0</td>
                    <td id="downtime-${deviceIp}">0h/0m/0s</td>
                    <td><button onclick="openDeviceHistory('${deviceIp}')">View History</button></td>
                    <td id="remark-${deviceIp}">Device working properly</td>
                `;

                // Set text color based on status (Online = Green, Offline = Red)
                const color = currentStatus === "Online" ? "green" : "red";
                row.style.color = color; // Change text color to green (online) or red (offline)

                if (currentStatus === "Online") {
                    startUptime(deviceIp, deviceHistory);
                } else {
                    startDowntime(deviceIp, deviceHistory);
                }

                // Update remarks based on device status and conditions
                updateRemarks(deviceIp, deviceHistory);
            });
        });
    } else {
        console.error('No details found in the response');
    }
}

function startUptime(deviceIp, history) {
    clearInterval(deviceDowntimeTimers[deviceIp]);
    let lastOnlineEntry = history.filter(entry => entry.status === "Online").pop();
    
    if (!lastOnlineEntry) return;
    
    let startTime = new Date(lastOnlineEntry.timestamp).getTime();
    deviceUptimeTimers[deviceIp] = setInterval(() => {
        let elapsedTime = Math.floor((Date.now() - startTime) / 1000);
        document.getElementById(`uptime-${deviceIp}`).innerText = formatDuration(elapsedTime);
    }, 1000);
}

function startDowntime(deviceIp, history) {
    clearInterval(deviceUptimeTimers[deviceIp]);
    let lastOfflineEntry = history.filter(entry => entry.status === "Offline").pop();

    if (!lastOfflineEntry) return;
    
    let startTime = new Date(lastOfflineEntry.timestamp).getTime();
    deviceDowntimeTimers[deviceIp] = setInterval(() => {
        let elapsedTime = Math.floor((Date.now() - startTime) / 1000);
        document.getElementById(`downtime-${deviceIp}`).innerText = formatDuration(elapsedTime);
        updateDowntimeCount(deviceIp, history);
    }, 1000);
}

function updateDowntimeCount(deviceIp, history) {
    let downtimeEntries = history.filter(entry => entry.status === "Offline");
    let downtimeCount = downtimeEntries.length; // Count all offline occurrences

    // Update UI with correct downtime count
    let downtimeElement = document.getElementById(`downtime-count-${deviceIp}`);
    if (downtimeElement) {
        downtimeElement.innerText = downtimeCount;
    }

    // Fix: Ensure remarks also reflect downtime count properly
    let remarkElement = document.getElementById(`remark-${deviceIp}`);
    if (remarkElement) {
        if (downtimeCount === 0) {
            remarkElement.innerText = "Device is Online.";
        } else if (downtimeCount >= 3) {
            remarkElement.innerText = `Device is Online, but it had ${downtimeCount} offline occurrences. Needs repair!`;
        } else {
            remarkElement.innerText = `Device is Online, but it had ${downtimeCount} offline occurrences.`;
        }
    }
}






function updateRemarks(deviceIp, history, deviceType) {
    let downtimeEntries = history.filter(entry => entry.status === "Offline");

    // Filter downtimes that lasted more than 5 minutes (except for servers)
    let filteredDowntimeEntries = downtimeEntries.filter((entry, index, arr) => {
        if (deviceType === "SERVER") return true; // Always count downtime for servers
        if (index === 0) return true; // Always keep the first entry

        let previousEntry = arr[index - 1];
        let duration = (new Date(entry.timestamp) - new Date(previousEntry.timestamp)) / 1000;
        return duration >= 300; // 300 seconds = 5 minutes
    });

    let downtimeCount = filteredDowntimeEntries.length;
    let totalDowntimeDuration = filteredDowntimeEntries.reduce((total, entry) => total + (new Date() - new Date(entry.timestamp)), 0) / 1000;
    totalDowntimeDuration = Math.floor(totalDowntimeDuration / 86400); // Convert to days

    const remarkElement = document.getElementById(`remark-${deviceIp}`);
    let lastStatus = history.length > 0 ? history[history.length - 1].status : "Unknown";

    // **NEW FIX**: Ensure the remark reflects the correct current status
    if (lastStatus === "Offline") {
        if (downtimeCount >= 3 || totalDowntimeDuration > 2) {
            remarkElement.innerText = `Device is Offline, needs repair.`;
        } else {
            remarkElement.innerText = `Device is Offline.`;
        }
    } else if (lastStatus === "Online") {
        if (downtimeCount >= 3 || totalDowntimeDuration > 2) {
            remarkElement.innerText = `Device is Online, needs repair.`;
        } else if (downtimeCount > 0) {
            remarkElement.innerText = `Device is Online, but it had ${downtimeCount} offline occurrences.`;
        } else {
            remarkElement.innerText = `Device is Online.`;
        }
    } else {
        remarkElement.innerText = `Device status unknown.`;
    }

    // Update Downtime Count UI
    let downtimeElement = document.getElementById(`downtime-count-${deviceIp}`);
    if (downtimeElement) {
        downtimeElement.innerText = downtimeCount;
    }
}



function formatDuration(seconds) {
    let days = Math.floor(seconds / 86400); // 1 day = 86400 seconds
    let hours = Math.floor((seconds % 86400) / 3600);
    let minutes = Math.floor((seconds % 3600) / 60);
    let secs = seconds % 60;

    let result = [];
    if (days > 0) result.push(`${days}d`);
    if (hours > 0 || days > 0) result.push(`${hours}h`);
    if (minutes > 0 || hours > 0 || days > 0) result.push(`${minutes}m`);
    result.push(`${secs}s`); // Always show seconds

    return result.join('/');
}



function openDeviceHistory(deviceIp) {
    if (!window.deviceHistoryData) {
        console.error("Device history data not loaded.");
        return;
    }
    const history = window.deviceHistoryData[deviceIp] || [];
    displayDeviceHistory(history);
    document.getElementById('device-history-modal').style.display = 'block';
}




function displayDeviceHistory(history) {
    const historyContainer = document.getElementById('device-history');
    historyContainer.innerHTML = '';

    if (history.length > 0) {
        history.forEach(entry => {
            const date = new Date(entry.timestamp);
            const formattedDate = date.toDateString(); // Example: "Wed Mar 19 2025"
            const day = date.toLocaleDateString(undefined, { weekday: 'long' }); // Example: "Wednesday"
            const time = date.toLocaleTimeString(undefined, { hour: '2-digit', minute: '2-digit', second: '2-digit' }); // Example: "12:53:16 AM"

            const entryDiv = document.createElement('div');
            entryDiv.innerHTML = `<p><strong>${day}, ${formattedDate}, ${time}</strong> - ${entry.status}</p>`;

            historyContainer.appendChild(entryDiv);
        });
    } else {
        historyContainer.innerHTML = '<p>No history available</p>';
    }
}
function closeHistoryModal() {
    document.getElementById('device-history-modal').style.display = 'none';
}

function filterData() {
    const selectedType = document.getElementById('device-type').value;
    const selectedRemark = document.getElementById('remark-filter').value;
    const table = document.getElementById('device-table');
    const rows = table.getElementsByTagName('tbody')[0].getElementsByTagName('tr');

    for (let row of rows) {
        const type = row.cells[2].textContent;
        const remark = row.cells[7].textContent;

        if ((selectedType === "all" || type === selectedType) &&
            (selectedRemark === "all" || remark === selectedRemark)) {
            row.style.display = "";
        } else {
            row.style.display = "none";
        }
    }
}

document.addEventListener("DOMContentLoaded", function () {
    document.getElementById('region').addEventListener('change', fetchDeviceData);
    fetchDeviceData(); // Initial load
});
