Once Check my Html file and javaScript file

Remark is not display (remark - in a week device goes offline more than 5 times or its downtime duration is more than 5 hours then in remark -device need to repair
else display -device working properly)
and arrange code sequentially i want to display data on UI very interactive

see error 

trend.js:363 Error fetching trend data: TypeError: Cannot read properties of null (reading 'getContext')
    at updateTrendChart (trend.js:369:58)
    at trend.js:360:17

trend.html:1 Uncaught SyntaxError: missing ) after argument list
ï»¿

Current Html file

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Device Trend Analysis</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
        <!-- Back to Dashboard Button -->
        <button onclick="window.location.href='index.html'">Back to Dashboard</button>
    </div>

    <div class="container">
        <h1>Device Trend Report</h1>
        
        <div class="region-select">
            <label for="region">Select Region:</label>
            <select id="region" onchange="fetchDeviceData()">
                <option value="apac">APAC</option>
                <option value="emea">EMEA</option>
                <option value="laca">LACA</option>
                <option value="namer">NAMER</option>
            </select>
        </div>

        <table id="device-table">
            <thead>
                <tr>
                    <th>Device IP</th>
                    <th>Device Name</th>
                    <th>Device Type</th>
                    <th>Uptime Duration</th>
                    <th>Downtime Duration</th>
                    <th>Downtime Duration</th>
                    <th>Details</th>
                    <th>Remark</th>
                </tr>
            </thead>
            <tbody>
                <!-- Device data rows will be populated here -->
            </tbody>
        </table>
    </div>

    <div id="device-history-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeHistoryModal()">&times;</span>
            <h2>Device History</h2>
            <div id="device-history">
                <!-- History data will be displayed here -->
            </div>
        </div>
    </div>

    
    <script src="trend.js"></script>
</body>
</html>


    <!-- Footer -->
    <footer class="footer">
        <img src="images/FooterLogo.png" alt="Company Logo" class="footer-logo">
        <p>&copy;2025 VisionWatch | Powered by <strong>Western Union Services India Pvt Ltd.</strong></p>
        <p>Contact: 
            <a href="mailto:gsoc-globalsecurityoperationcenter.sharedmailbox@westernunion.com">gsoc-globalsecurityoperationcenter.sharedmailbox@westernunion.com</a> | 
            <a href="tel:+91 20 67632394">+91 2067632394</a>
        </p>
    </footer>
</body>
</html>




current  javaScript file 


// Wait for the DOM to load before executing any scripts
document.addEventListener('DOMContentLoaded', function() {
    let region = 'apac'; // Default region

    // Fetch device data based on region and device type
    function fetchDeviceData() {
        const region = document.getElementById('region').value;
        fetch(`http://localhost/api/regions/details/${region}`)
            .then(response => response.json())
            .then(data => {
                populateDeviceTable(data.details);
            })
            .catch(error => {
                console.error('Error fetching device data:', error);
            });
    }

    // Populate the device table with the fetched data
    function populateDeviceTable(details) {
        const tableBody = document.getElementById('device-table').getElementsByTagName('tbody')[0];
        tableBody.innerHTML = ''; // Clear existing rows

        if (details) {
            ['cameras', 'archivers', 'controllers', 'servers'].forEach(deviceType => {
                details[deviceType].forEach(device => {
                    const row = tableBody.insertRow();
                    row.innerHTML = `
                        <td>${device.ip_address}</td>
                        <td>${device[deviceType.slice(0, -1) + 'name']}</td>
                        <td>${deviceType.slice(0, -1).toUpperCase()}</td>
                        <td>${device.history ? device.history.filter(entry => entry.status === "Online").length : 0}h</td>
                        <td>${device.history ? device.history.filter(entry => entry.status === "Offline").length : 0}h</td>
                        <td>${calculateDowntimeDuration(device.history)}</td>
                        <td><button onclick="openDeviceHistory(${device.ip_address})">View History</button></td>
                        <td>Remark</td>
                    `;
                });
            });
        } else {
            console.error('No details found in the response');
        }
    }

    // Calculate downtime duration from the history
    function calculateDowntimeDuration(history) {
        let downtimeDuration = 0;
        if (history) {
            for (let i = 1; i < history.length; i++) {
                if (history[i].status === "Offline" && history[i - 1].status === "Online") {
                    let diff = new Date(history[i].timestamp) - new Date(history[i - 1].timestamp);
                    downtimeDuration += diff / 1000; // Calculate in seconds, convert as needed (e.g., hours)
                }
            }
        }
        return downtimeDuration > 0 ? `${Math.floor(downtimeDuration / 3600)}h` : '0h';
    }

    // Fetch trend data for the selected region and device type
    function fetchTrendData(region) {
        fetch(`http://localhost/api/regions/trend/details/${region}`)
            .then(response => response.json())
            .then(data => {
                updateTrendChart(data.trends);
            })
            .catch(error => {
                console.error('Error fetching trend data:', error);
            });
    }

    // Update the trend chart with the fetched data
    function updateTrendChart(trends) {
        const ctx = document.getElementById('trendChart').getContext('2d');
        new Chart(ctx, {
            type: 'line',  // Example chart type
            data: {
                labels: trends.map(trend => trend.device_name),
                datasets: [{
                    label: 'Uptime',
                    data: trends.map(trend => parseDuration(trend.uptime)),
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1,
                    fill: false
                }, {
                    label: 'Downtime',
                    data: trends.map(trend => parseDuration(trend.downtime)),
                    borderColor: 'rgba(255, 99, 132, 1)',
                    borderWidth: 1,
                    fill: false
                }]
            }
        });
    }

    // Parse uptime/downtime string into hours for charting
    function parseDuration(duration) {
        const regex = /(\d+)d (\d+)h (\d+)m/;
        const matches = duration.match(regex);
        return matches ? parseInt(matches[2]) + parseInt(matches[1]) * 24 : 0;  // Converts days + hours to hours
    }

    // Fetch initial device data and trend
    fetchDeviceData();
    fetchTrendData(region);

    // Event listeners for region changes
    document.getElementById('region').addEventListener('change', fetchDeviceData);
});
