now i have update excelservice.js file as per above code now once check carefully you.

const fs = require("fs");
const xlsx = require("xlsx");
const path = require("path");
const pLimit = require("p-limit");
const { pingHost } = require("./pingService");

const { DateTime } = require("luxon");

// Excel paths
const archiverPath = path.join(__dirname, "../data/ArchiverData.xlsx");
const controllerPath = path.join(__dirname, "../data/ControllerData.xlsx");
const cameraPath = path.join(__dirname, "../data/CameraData.xlsx");
const serverPath = path.join(__dirname, "../data/ServerData.xlsx");

// In‑memory cache
let allData = {};

// Helper: prune old entries
function pruneOldEntries(entries, days = 30) {
  const cutoff = DateTime.now().minus({ days }).toMillis();
  return entries.filter(e => DateTime.fromISO(e.timestamp).toMillis() >= cutoff);
}

// Load Excel sheets once
function loadExcelData() {
  if (Object.keys(allData).length) return;
  const loadSheet = file => {
    const wb = xlsx.readFile(file);
    const rows = xlsx.utils.sheet_to_json(wb.Sheets[wb.SheetNames[0]]);
    return rows.map(r => {

      
       const norm = {};
      Object.entries(r).forEach(([rawKey, rawValue]) => {
              const key = rawKey.trim().toLowerCase().replace(/\s+/g, "_");
              // Trim string values so “ 10.64.22.6” becomes “10.64.22.6”
              norm[key] = typeof rawValue === "string"
                ? rawValue.trim()
                : rawValue;
            });
      norm.history = [];
      return norm;
    });
  };


  allData = {
    archivers: loadSheet(archiverPath),
    controllers: loadSheet(controllerPath),
    cameras: loadSheet(cameraPath),
    servers: loadSheet(serverPath),
  };
  console.log("Excel Data Loaded:", Object.keys(allData));
}
loadExcelData();

// Build IP→region map
const ipRegionMap = {};
Object.values(allData).flat().forEach(dev => {
  if (dev.ip_address && dev.location) {
    ipRegionMap[dev.ip_address] = dev.location.toLowerCase();
  }
});

// Fetch all IPs
function fetchAllIpAddress() {
  return Object.values(allData)
    .flat()
    .map(d => d.ip_address)
    .filter(Boolean);
}



const cache = new Map();
const CACHE_TTL_MS=60*1000;


async function pingDevice(ip) {
      if (!ip) return "IP Address Missing";
      return await pingHost(ip);
    }
  

async function pingDevices(devices) {
  const limit = pLimit(50);   // bump concurrency if your CPU/network can handle it

  await Promise.all(devices.map(dev =>
    limit(async () => {
      const ip = dev.ip_address;
      const entry = cache.get(ip);

      // if we have a cached result and it’s still fresh, use it
      if (entry && (Date.now() - entry.lastCheckedMs) < CACHE_TTL_MS) {
        dev.status = entry.status;
        return;
      }

      // otherwise do a real ping…
      const status = await pingDevice(ip);

      // …and store it along with the timestamp
      cache.set(ip, { status, lastCheckedMs: Date.now() });
      dev.status = status;
    })
  ));
}


// Summary calculators
function calculateSummary(groups) {
  const summary = {};
  for (const [k, list] of Object.entries(groups)) {
    const total = list.length;
    const online = list.filter(d => d.status === "Online").length;
    summary[k] = { total, online, offline: total - online };
  }
  return {
    totalDevices: Object.values(summary).reduce((s, g) => s + g.total, 0),
    totalOnlineDevices: Object.values(summary).reduce((s, g) => s + g.online, 0),
    totalOfflineDevices: Object.values(summary).reduce((s, g) => s + g.offline, 0),
    ...summary
  };
}

// Public APIs
async function fetchGlobalData() {
  const all = [...allData.cameras, ...allData.archivers, ...allData.controllers, ...allData.servers];
  await pingDevices(all);
  return { summary: calculateSummary(allData), details: allData };
}

async function fetchRegionData(regionName) {
  const filter = list => list.filter(d => d.location?.toLowerCase() === regionName.toLowerCase());
  const regionDevices = {
    cameras: filter(allData.cameras),
    archivers: filter(allData.archivers),
    controllers: filter(allData.controllers),
    servers: filter(allData.servers),
  };
  await pingDevices([].concat(...Object.values(regionDevices)));
  return { summary: calculateSummary(regionDevices), details: regionDevices };
}

module.exports = {
  fetchGlobalData,
  fetchRegionData,
  fetchAllIpAddress,
  ipRegionMap
};
