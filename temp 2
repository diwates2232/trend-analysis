Read below js and html file carefully and make a Devices summary page like uploded images as per.

make changes and give me updated files.




Summary.js


let deviceUptimeTimers = {};
let deviceDowntimeTimers = {};

// Utility to turn an IP (or any string) into a safe DOMâ€‘ID fragment
function sanitizeId(str) {
    return (str || '').replace(/[^a-zA-Z0-9]/g, '_');
}

function fetchDeviceData() {
    const selectedRegion = document.getElementById('region').value;

    if (selectedRegion === 'All') {
        fetch(`http://localhost/api/regions/all-details`)
            .then(res => res.json())
            .then(allRegionsData => {
                let combinedDetails = { cameras: [], archivers: [], controllers: [], servers: [] };
                Object.values(allRegionsData).forEach(regionData => {
                    if (regionData.details) {
                        ['cameras','archivers','controllers','servers'].forEach(type => {
                            combinedDetails[type].push(...(regionData.details[type]||[]));
                        });
                    }
                });
                fetchDeviceHistory(combinedDetails);
            })
            .catch(err => console.error('Error fetching all regions data:', err));
    } else {
        fetch(`http://localhost/api/regions/details/${selectedRegion}`)
            .then(res => res.json())
            .then(regionData => {
                const d = regionData.details;
                const total = (d.cameras?.length||0)+(d.archivers?.length||0)+(d.controllers?.length||0)+(d.servers?.length||0);
                const online = ([...(d.cameras||[]),...(d.archivers||[]),...(d.controllers||[]),...(d.servers||[])]
                    .filter(dev => dev.status==="Online").length);
                const setIf = (id,txt)=>{const el=document.getElementById(id); if(el) el.innerText=txt;};
                setIf("total-devices", `Total Devices: ${total}`);
                setIf("total-online", `Total Online Devices: ${online}`);
                setIf("total-cameras", `Total Cameras: ${d.cameras?.length||0}`);
                setIf("total-controllers", `Total Controllers: ${d.controllers?.length||0}`);
                setIf("total-archivers", `Total Archivers: ${d.archivers?.length||0}`);
                setIf("total-servers", `Total Servers: ${d.servers?.length||0}`);
                fetchDeviceHistory(d);
            })
            .catch(err => console.error('Error fetching device data:', err));
    }
}

function fetchDeviceHistory(details) {
    fetch(`http://localhost/api/devices/history`)
        .then(res => res.json())
        .then(historyData => {
            populateDeviceTable(details, historyData);
            window.deviceHistoryData = historyData;
        })
        .catch(err => console.error('Error fetching device history:', err));
}

function populateDeviceTable(details, historyData) {
    const tbody = document.getElementById('device-table').getElementsByTagName('tbody')[0];
    tbody.innerHTML = '';
    let list = [];

    ['cameras','archivers','controllers','servers'].forEach(type => {
        details[type]?.forEach(dev => {
            const ip = dev.ip_address;
            const safe = sanitizeId(ip);
            const name = dev[type.slice(0,-1)+'name']||'Unknown';
            const category = type.slice(0,-1).toUpperCase();
            const region = dev.location||'Unknown';
            const hist = historyData[ip]||[];
            const current = dev.status || (hist.length? hist[hist.length-1].status : 'Unknown');
            const downCount = hist.filter(e=>e.status==='Offline').length;

            // Only show offline or >15 downtimes
            if (current==='Offline' || downCount>15) {
                list.push({ ip, safe, name, category, region, current, hist, downCount });
            }
        });
    });

    list.sort((a,b)=>b.downCount - a.downCount);

    // compute our two new summary counts:
    const downtimeOver15Count = list.filter(d=>d.downCount>15).length;
    const currentlyOfflineCount = list.filter(d=>d.current==='Offline').length;
    const setIf = (id, txt) => { const el = document.getElementById(id); if (el) el.innerText = txt; };
    setIf('count-downtime-over-15', `Devices with >15 downtimes: ${downtimeOver15Count}`);
    setIf('count-currently-offline', `Devices currently Offline: ${currentlyOfflineCount}`);

    if (!list.length) {
        const row = tbody.insertRow();
        const cell = row.insertCell();
        cell.colSpan = 10;
        cell.textContent = "No devices found";
        cell.style.textAlign = "center";
        cell.style.fontWeight = "bold";
        updateDisplayedDeviceCount(0);
        return;
    }

    list.forEach((dev, idx) => {
        const row = tbody.insertRow();
        row.style.border = "1px solid black";
        row.innerHTML = `
            <td>${idx+1}</td>
            <td>${dev.ip}</td>
            <td>${dev.name}</td>
            <td>${dev.category}</td>
            <td>${dev.region}</td>
            <td id="uptime-${dev.safe}">0h/0m/0s</td>
            <td id="downtime-count-${dev.safe}">${dev.downCount}</td>
            <td id="downtime-${dev.safe}">0h/0m/0s</td>
            <td><button onclick="openDeviceHistory('${dev.ip}','${dev.name}')">View History</button></td>
            <td id="remark-${dev.safe}">Device working properly</td>
        `;
        row.style.color = dev.current==="Online" ? "green" : "red";

        if (dev.current==="Online") {
            startUptime(dev.ip, dev.hist);
        } else {
            startDowntime(dev.ip, dev.hist, dev.category);
        }
        updateRemarks(dev.ip, dev.hist, dev.category);
    });

    filterData();
}

function startUptime(ip, hist) {
    const safe = sanitizeId(ip);
    clearInterval(deviceDowntimeTimers[safe]);
    const lastOn = hist.filter(e=>e.status==='Online').pop();
    if (!lastOn) return;
    const start = new Date(lastOn.timestamp).getTime();
    deviceUptimeTimers[safe] = setInterval(()=>{
        const secs = Math.floor((Date.now()-start)/1000);
        const el = document.getElementById(`uptime-${safe}`);
        if (el) el.innerText = formatDuration(secs);
    },1000);
}

function startDowntime(ip, hist, category) {
    const safe = sanitizeId(ip);
    clearInterval(deviceUptimeTimers[safe]);
    const lastOff = hist.filter(e=>e.status==='Offline').pop();
    if (!lastOff) return;
    const start = new Date(lastOff.timestamp).getTime();
    deviceDowntimeTimers[safe] = setInterval(()=>{
        const secs = Math.floor((Date.now()-start)/1000);
        const el = document.getElementById(`downtime-${safe}`);
        if (el) el.innerText = formatDuration(secs);
        updateDowntimeCount(ip, hist, category);
    },1000);
}

// **Fix Downtime Count and Remarks Update**
function updateDowntimeCount(ip, hist, category) {
    const safe = sanitizeId(ip);
    const offs = hist.filter(e=>e.status==='Offline');
    const filtered = offs.filter((e,i,arr)=>{
        if (category==='SERVER') return true;
        if (i===0) return true;
        return (new Date(e.timestamp)-new Date(arr[i-1].timestamp))/1000 >=300;
    });
    const count = filtered.length;
    const el = document.getElementById(`downtime-count-${safe}`);
    if (el) el.innerText = count;
    updateRemarks(ip, hist, category);
}

// **Update Remarks**
function updateRemarks(ip, hist, category) {
    const safe = sanitizeId(ip);
    const offs = hist.filter(e=>e.status==='Offline');
    const filtered = offs.filter((e,i,arr)=>{
        if (category==='SERVER') return true;
        if (i===0) return true;
        return (new Date(e.timestamp)-new Date(arr[i-1].timestamp))/1000 >=300;
    });
    const count = filtered.length;
    const lastStatus = hist.length? hist[hist.length-1].status : 'Unknown';
    const el = document.getElementById(`remark-${safe}`);
    if (!el) return;

    if (lastStatus==='Offline') {
        el.innerText = count>=10 ? "Device is Offline, needs repair." : "Device is Offline.";
    }
    else if (lastStatus==='Online') {
        if (count>=10) el.innerText = "Device is Online, needs repair.";
        else if (count>0) el.innerText = `Device is Online, it had ${count} downtime occurrences.`;
        else el.innerText = "Device is Online.";
    }
    else {
        el.innerText = "Device status unknown.";
    }
    const dc = document.getElementById(`downtime-count-${safe}`);
    if (dc) dc.innerText = count;
}

function formatDuration(seconds) {
    const d = Math.floor(seconds/86400);
    const h = Math.floor((seconds%86400)/3600);
    const m = Math.floor((seconds%3600)/60);
    const s = Math.round(seconds%60);
    const parts = [];
    if (d) parts.push(`${d}d`);
    if (h) parts.push(`${h}h`);
    if (m) parts.push(`${m}m`);
    if (s||!parts.length) parts.push(`${s}s`);
    return parts.join('/');
}

function openDeviceHistory(ip,name) {
    if (!window.deviceHistoryData) return console.error("No history loaded");
    const hist = window.deviceHistoryData[ip]||[];
    displayDeviceHistory(ip,name,hist);
    const modal = document.getElementById('device-history-modal');
    if (modal) modal.style.display='block';
}

function calculateDowntimeDuration(ts, hist) {
    const start = new Date(ts).getTime();
    const nextUp = hist.find(e=> e.status==='Online' && new Date(e.timestamp).getTime()>start);
    if (nextUp) return formatDuration((new Date(nextUp.timestamp).getTime()-start)/1000);
    return formatDuration((Date.now()-start)/1000);
}

function displayDeviceHistory(ip,name,hist) {
    const header = document.getElementById('device-history-header');
    const container = document.getElementById('device-history');
    if (header) {
        header.innerHTML=`
            <h3>Device History</h3>
            <p><strong>Device Name:</strong> ${name}</p>
            <p><strong>Device IP:</strong> ${ip}</p>
            <hr>`;
    }
    if (!container) return;
    container.innerHTML='';
    if (!hist.length) {
        container.innerHTML='<p>No history available for this device.</p>';
        return;
    }
    let html = `
        <table border="1" style="width:100%; text-align:center; border-collapse:collapse;">
            <thead><tr>
                <th>Sr. No</th><th>Date</th><th>Day</th><th>Time</th><th>Status</th><th>Downtime Duration</th>
            </tr></thead><tbody>`;
    let lastOff = null;
    hist.forEach((e,i)=>{
        const d = new Date(e.timestamp);
        const date = d.toLocaleDateString();
        const day = d.toLocaleString('en-US',{weekday:'long'});
        const time = d.toLocaleTimeString();
        let dur = '-';
        if (e.status==='Offline') lastOff = e.timestamp;
        else if (e.status==='Online' && lastOff) {
            dur = calculateDowntimeDuration(lastOff,hist);
            lastOff = null;
        }
        html+=`
            <tr>
                <td>${i+1}</td><td>${date}</td><td>${day}</td><td>${time}</td>
                <td style="color:${e.status==='Online'?'green':'red'}">${e.status}</td>
                <td>${dur}</td>
            </tr>`;
    });
    html+=`</tbody></table>`;
    container.innerHTML=html;
}

function closeHistoryModal() {
    const modal = document.getElementById('device-history-modal');
    if (modal) modal.style.display='none';
}

function filterData() {
    const typeSel = document.getElementById('device-type').value.toUpperCase();
    const remarkSel = document.getElementById('remark-filter').value.toUpperCase();
    const rows = document.getElementById('device-table').getElementsByTagName('tbody')[0].rows;
    let count = 0;
    for (let row of rows) {
        const type = row.cells[3].textContent.toUpperCase();
        const remark = row.cells[9].textContent.trim().toUpperCase();
        const show = (typeSel==='ALL'||type===typeSel) && (remarkSel==='ALL'||remark.includes(remarkSel));
        row.style.display = show? '':'none';
        if (show) count++;
    }
    updateDisplayedDeviceCount(count);
}

function updateDisplayedDeviceCount(count) {
    const el = document.getElementById('device-count');
    if (el) el.innerText = `Displayed Devices: ${count}`;
}

document.addEventListener("DOMContentLoaded", ()=>{
    const r = document.getElementById('region');
    if (r) r.addEventListener('change', fetchDeviceData);
    const t = document.getElementById('device-type');
    if (t) t.addEventListener('change', filterData);
    const f = document.getElementById('remark-filter');
    if (f) f.addEventListener('change', filterData);
    fetchDeviceData();
});

function exportDeviceTableToExcel() {
    const tbl = document.getElementById("device-table");
    if (!tbl) return;
    const wb = XLSX.utils.table_to_book(tbl, { sheet: "Device Table" });
    XLSX.writeFile(wb, "Device_Table.xlsx");
}

function exportDeviceHistoryToExcel() {
    const histTbl = document.querySelector("#device-history-modal table");
    if (!histTbl) return alert("Please open a device's history first.");
    const wb = XLSX.utils.table_to_book(histTbl, { sheet: "Device History" });
    XLSX.writeFile(wb, "Device_History.xlsx");
}








Summary.html



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Devices Summary</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>

 <header>
    <h1  style=" text-align: center;
    padding: 20px;
   background-color: hsla(62, 67%, 48%, 0);
   background-color:black;
   border-radius: 8px;
   box-shadow: 0px 4px 6px rgba(178, 190, 11, 0.296);
   transition: transform 0.3s ease-in-out;
   color: rgb(198, 210, 18);
   font-size: 36px;
   margin: 0;
   transition: color 0.3s ease;"">Devices Summary</h1>
   </header>

     <div id="sidebar-content">


          <div class="summary-container">

    <div class="summary-card" id="total-devices">Total Devices: 0</div>
    <div class="summary-card" id="total-online">Total Online Devices: 0</div>
    <div class="summary-card" id="total-cameras">Total Cameras: 0</div>
    <div class="summary-card" id="total-controllers">Total Controllers: 0</div>
    <div class="summary-card" id="total-archivers">Total Archivers: 0</div>
    <div class="summary-card" id="total-servers">Total Servers: 0</div>
     </div>
  <div class="summary-container" 

  style=" display: flex;
  flex-wrap: wrap;
  gap: 1rem;
  margin-bottom: 1rem;">
    <div class="summary-card">

      <p id="count-downtime-over-15">0</p>
    </div>
    <div class="summary-card">
    
      <p id="count-currently-offline">0</p>
    
    </div>
  </div>
                
     <button style="align-items: center;padding-top: 10px;margin-left: 10px;margin-top: 10px;" onclick="window.location.href='index.html'">Back to Dashboard</button>
    <button onclick="exportDeviceTableToExcel()">Export Device Table</button>
           
            <label for="region">Select Region:</label>
            <select id="region" onchange="fetchDeviceData()">
                <option value="global">Global</option>
                <option value="apac">APAC</option>
                <option value="emea">EMEA</option>
                <option value="laca">LACA</option>
                <option value="namer">NAMER</option>
            </select>

            <label for="device-type">Filter by Device Type:</label>
            <select id="device-type" onchange="filterData()">
                <option value="ALL">All</option>
                <option value="CONTROLLER">Controller</option>

                <option value="ARCHIVER">Archiver</option>

                <option value="CAMERA">Camera</option>

                <option value="SERVER">Server</option>
                
            </select>

             <label for="remark-filter">Filter by Remark:</label>
             <select id="remark-filter" onchange="filterData()">
                 <option value="ALL">All</option>
                 <option value="Device needs repair">Device needs repair</option>
                 <option value="Device is Online">Device is Online</option>
                 <option value="Device is Offline">Device is Offline</option>
             </select>

        </div>
    </div>


    <div class="container">
        <table id="device-table">
            <thead>
                <tr>
                    <th>Sr . No</th>
                    <th>Device IP</th>
                    <th>Device Name</th>
                    <th>Device Type</th>
                    <th>Device Region</th>
                    <!-- <th>Device Status</th> -->
                    <th>Uptime Duration</th>
                    <th>Downtime Count</th>
                    <th>Downtime Duration</th>
                    <th>Details</th>
                    <th>Remark</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

    <!-- Device History Modal -->
    <div id="device-history-modal" class="modal">

        <div class="modal-content">

            
            <div id="device-history-header"></div> <!-- Header for Device Name and IP -->
          
            <div id="device-history"></div>
            <!-- <<span class="close" onclick="closeHistoryModal()">&times;</span> -->

            <span class="close" onclick="closeHistoryModal()">&times;</span>
            <div id="device-history"></div>
            <button onclick="exportDeviceHistoryToExcel()">Export Device History</button>
            

            
        </div>
    </div>
    
<script>
    document.addEventListener("DOMContentLoaded" , function (){
        fetchDeviceData();
    });
</script>
    <script src="summary.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>


   <!-- Footer -->
   <footer class="footer">
    <img src="images/FooterLogo.png" alt="Company Logo" class="footer-logo">
    <p>&copy;2025 VisionWatch | Powered by <strong>Western Union Services India Pvt Ltd.</strong></p>
    <p>Contact: 
        <a href="mailto:gsoc-globalsecurityoperationcenter.sharedmailbox@westernunion.com">gsoc-globalsecurityoperationcenter.sharedmailbox@westernunion.com</a> | 
        <a href="tel:+91 20 67632394">+91 2067632394</a>
    </p>
</footer>

</body>
</html>

</body>
</html>



