document.addEventListener('DOMContentLoaded', function () {
    let deviceUptimeMap = {}; // Stores uptime for each device
    let deviceDowntimeMap = {}; // Stores downtime for each device

    function fetchDeviceData() {
        const selectedRegion = document.getElementById('region').value;
        fetch(`http://localhost/api/regions/details/${selectedRegion}`)
            .then(response => response.json())
            .then(data => {
                processDeviceData(data.details);
            })
            .catch(error => console.error('Error fetching device data:', error));
    }

    function processDeviceData(details) {
        if (!details) {
            console.error('No device details found');
            return;
        }

        const tableBody = document.getElementById('device-table').getElementsByTagName('tbody')[0];
        tableBody.innerHTML = ''; // Clear existing rows

        ['cameras', 'archivers', 'controllers', 'servers'].forEach(deviceType => {
            details[deviceType]?.forEach(device => {
                trackDeviceStatus(device);
            });
        });

        updateDeviceTable();
    }

    function trackDeviceStatus(device) {
        const ip = device.ip_address;
        const history = device.history || [];

        if (!deviceUptimeMap[ip]) deviceUptimeMap[ip] = 0; // Initialize uptime
        if (!deviceDowntimeMap[ip]) deviceDowntimeMap[ip] = 0; // Initialize downtime

        if (history.length > 0) {
            let lastEntry = history[history.length - 1];

            if (lastEntry.status === "Online") {
                if (!deviceDowntimeMap[ip]) {
                    deviceUptimeMap[ip] += 1; // Increase uptime every second
                }
                deviceDowntimeMap[ip] = 0; // Reset downtime if online
            } else if (lastEntry.status === "Offline") {
                deviceDowntimeMap[ip] += 1; // Increase downtime every second
            }
        }
    }

    function updateDeviceTable() {
        const tableBody = document.getElementById('device-table').getElementsByTagName('tbody')[0];
        tableBody.innerHTML = ''; // Clear existing rows

        Object.keys(deviceUptimeMap).forEach(ip => {
            const uptimeFormatted = formatDuration(deviceUptimeMap[ip]);
            const downtimeFormatted = formatDuration(deviceDowntimeMap[ip]);
            const remark = deviceDowntimeMap[ip] >= 300 ? "Device needs repair" : "Device working properly"; // If downtime > 5 minutes, mark for repair

            const row = tableBody.insertRow();
            row.innerHTML = `
                <td>${ip}</td>
                <td>Device ${ip}</td>
                <td>Type</td>
                <td>${uptimeFormatted}</td>
                <td>${downtimeFormatted}</td>
                <td><button onclick="openDeviceHistory('${ip}')">View History</button></td>
                <td>${remark}</td>
            `;
        });
    }

    function formatDuration(seconds) {
        let days = Math.floor(seconds / (24 * 3600));
        seconds %= 24 * 3600;
        let hours = Math.floor(seconds / 3600);
        seconds %= 3600;
        let minutes = Math.floor(seconds / 60);
        let secs = seconds % 60;
        return `${days}d ${hours}h ${minutes}m ${secs}s`;
    }

    // Refresh uptime and downtime every second
    setInterval(() => {
        Object.keys(deviceUptimeMap).forEach(ip => {
            trackDeviceStatus({ ip_address: ip, history: [{ status: "Online" }] });
        });
        updateDeviceTable();
    }, 1000);

    fetchDeviceData();
});
