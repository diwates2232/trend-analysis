// Updated function to fetch region trend data
const fetchRegionTrendData = async (region) => {
    if (!allData || Object.keys(allData).length === 0) {
        console.error("Error: Device data is not loaded.");
        return null;
    }

    const filterByRegion = (devices) => 
        devices.filter(device => device.location?.toLowerCase() === region.toLowerCase());

    const regionDevices = {
        cameras: filterByRegion(allData.cameras),
        archivers: filterByRegion(allData.archivers),
        controllers: filterByRegion(allData.controllers),
        servers: filterByRegion(allData.servers)
    };

    if (!regionDevices.cameras.length && !regionDevices.archivers.length && !regionDevices.controllers.length && !regionDevices.servers.length) {
        console.log(`No devices found for region: ${region}`);
        return null;
    }

    // Fetch history for each device
    await Promise.all([
        ...regionDevices.cameras.map(device => fetchDeviceHistory(device)),
        ...regionDevices.archivers.map(device => fetchDeviceHistory(device)),
        ...regionDevices.controllers.map(device => fetchDeviceHistory(device)),
        ...regionDevices.servers.map(device => fetchDeviceHistory(device))
    ]);

    // Calculate trends
    const trends = calculateDeviceTrends(regionDevices);

    return { 
        region,
        trends // Return trends with updated structure
    };
};

// Updated function to calculate device trends
const calculateDeviceTrends = (devices) => {
    return {
        daily: calculateTrend(devices, "daily"),
        // weekly: calculateTrend(devices, "weekly"),
        // monthly: calculateTrend(devices, "monthly")
    };
};

// Calculate trend for a given period
const calculateTrend = (devices, period) => {
    const allDevices = [...devices.cameras, ...devices.archivers, ...devices.controllers, ...devices.servers];

    return allDevices.map(device => {
        if (!device.history || device.history.length === 0) {
            return { 
                device_type: device.device_type || "Unknown",  // Added device type
                device_name: device.device_name || "Unknown", 
                ip_address: device.ip_address,
                uptime: "0h 0m", 
                downtime: "0h 0m"
            };
        }

        const stats = computeDeviceStats(device.history); // This will compute uptime/downtime
        return {
            device_type: device.device_type || "Unknown",  // Added device type
            device_name: device.device_name || "Unknown",
            ip_address: device.ip_address,
            ...stats // Include uptime and downtime stats
        };
    });
};

// Helper function to compute uptime and downtime for a device
const computeDeviceStats = (history) => {
    let uptime = 0, downtime = 0, downtimeDuration = 0;
    let lastStatus = history[0]?.status || "Offline"; // Default to "Offline" if no history
    let lastTimestamp = history[0] ? DateTime.fromISO(history[0].timestamp, { zone: 'Asia/Kolkata' }).toMillis() : DateTime.now().toMillis();

    for (let i = 1; i < history.length; i++) {
        let currentStatus = history[i].status;
        let currentTime = DateTime.fromISO(history[i].timestamp, { zone: 'Asia/Kolkata' }).toMillis();
        let timeDiff = (currentTime - lastTimestamp) / 60000; // Convert to minutes

        if (timeDiff > 0) {
            if (lastStatus === "Online") {
                uptime += timeDiff;
            } else if (lastStatus === "Offline") {
                downtime += timeDiff;
            }

            // Check if device just came back online, track downtime duration
            if (lastStatus === "Offline" && currentStatus === "Online") {
                downtimeDuration += downtime;
                downtime = 0; // Reset downtime once device comes back online
            }
        }

        lastStatus = currentStatus;
        lastTimestamp = currentTime;
    }

    // Convert uptime, downtime, and downtimeDuration to days, hours, minutes format
    const formatTime = (minutes) => {
        const days = Math.floor(minutes / 1440);
        const hours = Math.floor((minutes % 1440) / 60);
        const mins = Math.floor(minutes % 60);
        return `${days}d ${hours}h ${mins}m`;
    };

    return {
        uptime: formatTime(uptime),
        downtime: formatTime(downtime),
        downtimeDuration: formatTime(downtimeDuration),
    };
};
