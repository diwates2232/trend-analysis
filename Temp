const device = allData.cameras.find(d => d.ip_address === ip) ||
               allData.archivers.find(d => d.ip_address === ip) ||
               allData.controllers.find(d => d.ip_address === ip) ||
               allData.servers.find(d => d.ip_address === ip);



console.log("All Data Loaded from Excel:", JSON.stringify(allData, null, 2));


return device && device.location?.toLowerCase() === region.toLowerCase();


console.log("Current Uptime/Downtime Stats:", JSON.stringify(uptimeDowntimeStats, null, 2));



console.log(`Fetching downtime-uptime data for region: ${region}`);
console.log("UptimeDowntimeStats:", JSON.stringify(uptimeDowntimeStats, null, 2));
console.log("AllData:", JSON.stringify(allData, null, 2));










require("dotenv").config();
const express = require("express");
const cors = require("cors");
const bodyParser = require("body-parser");
const ping = require("ping");
const regionRoutes = require("./routes/regionRoutes");
const { fetchAllIpAddress, allData } = require("./services/excelService");

const app = express();
const PORT = process.env.PORT || 80;

// Middleware
app.use(cors({
  origin: "http://127.0.0.1:5500", // Match your frontend's origin
  methods: "GET,POST,PUT,DELETE",
  allowedHeaders: "Content-Type,Authorization",
}));
app.use(bodyParser.json());

// Routes
app.use("/api/regions", regionRoutes);

// Store device statuses and downtime tracking
const devices = fetchAllIpAddress();
let deviceStatus = {};
let downtimeTracking = {};
let uptimeDowntimeStats = {};

// Logging allData at startup
console.log("All Device Data Loaded from Excel:");
console.log(JSON.stringify(allData, null, 2));

// Function to get date keys
const getDateKeys = () => {
  const now = new Date();
  const day = now.toISOString().split("T")[0]; // YYYY-MM-DD
  const week = Math.ceil(now.getDate() / 7); // Week in the month
  const month = now.getMonth() + 1; // Month number
  return { day, week, month };
};

// Function to ping devices and update status
async function pingDevices() {
  const { day, week, month } = getDateKeys();

  for (const ip of devices) {
    try {
      const result = await ping.promise.probe(ip);
      const isOnline = result.alive;

      if (!uptimeDowntimeStats[ip]) {
        uptimeDowntimeStats[ip] = { daily: {}, weekly: {}, monthly: {} };
      }

      if (!uptimeDowntimeStats[ip].daily[day]) {
        uptimeDowntimeStats[ip].daily[day] = { uptime: 0, downtime: 0, downtimeDuration: 0 };
      }
      if (!uptimeDowntimeStats[ip].weekly[week]) {
        uptimeDowntimeStats[ip].weekly[week] = { uptime: 0, downtime: 0, downtimeDuration: 0 };
      }
      if (!uptimeDowntimeStats[ip].monthly[month]) {
        uptimeDowntimeStats[ip].monthly[month] = { uptime: 0, downtime: 0, downtimeDuration: 0 };
      }

      if (isOnline) {
        if (downtimeTracking[ip]?.lastOffline) {
          const lastOfflineTime = downtimeTracking[ip].lastOffline;
          const downtimeMinutes = Math.floor((Date.now() - lastOfflineTime) / 60000);
          uptimeDowntimeStats[ip].daily[day].downtimeDuration += downtimeMinutes;
          uptimeDowntimeStats[ip].weekly[week].downtimeDuration += downtimeMinutes;
          uptimeDowntimeStats[ip].monthly[month].downtimeDuration += downtimeMinutes;
          delete downtimeTracking[ip];
        }
        uptimeDowntimeStats[ip].daily[day].uptime += 1;
        uptimeDowntimeStats[ip].weekly[week].uptime += 1;
        uptimeDowntimeStats[ip].monthly[month].uptime += 1;
      } else {
        if (!downtimeTracking[ip]) {
          downtimeTracking[ip] = { lastOffline: Date.now(), totalDowntime: 0 };
        } else {
          const lastOfflineTime = downtimeTracking[ip].lastOffline;
          const downtimeMinutes = Math.floor((Date.now() - lastOfflineTime) / 60000);
          if (downtimeMinutes > 0) {
            uptimeDowntimeStats[ip].daily[day].downtimeDuration += downtimeMinutes;
            uptimeDowntimeStats[ip].weekly[week].downtimeDuration += downtimeMinutes;
            uptimeDowntimeStats[ip].monthly[month].downtimeDuration += downtimeMinutes;
            downtimeTracking[ip].totalDowntime += downtimeMinutes;
            downtimeTracking[ip].lastOffline = Date.now();
          }
        }
        uptimeDowntimeStats[ip].daily[day].downtime += 1;
        uptimeDowntimeStats[ip].weekly[week].downtime += 1;
        uptimeDowntimeStats[ip].monthly[month].downtime += 1;
      }

      deviceStatus[ip] = isOnline ? "Online" : "Offline";
    } catch (error) {
      console.error(`Error pinging ${ip}:`, error);
      deviceStatus[ip] = "Offline";
    }
  }
}

// Start pinging devices every 30 seconds
setInterval(pingDevices, 30000);

// Get device status
app.get("/api/devices/status", (req, res) => {
  res.json(deviceStatus);
});

// Get downtime/uptime summary for a region
app.get("/api/region/devices/downtime-uptime/:region", (req, res) => {
  try {
    const region = req.params.region.toLowerCase();
    console.log(`Fetching downtime-uptime data for region: ${region}`);

    if (!uptimeDowntimeStats) {
      return res.status(500).json({ message: "Server error: Data not available" });
    }

    const { day, week, month } = getDateKeys();

    // Find devices in the given region
    const regionDevices = Object.keys(uptimeDowntimeStats).filter((ip) => {
      const device = allData.cameras.find(d => d.ip_address === ip) ||
                     allData.archivers.find(d => d.ip_address === ip) ||
                     allData.controllers.find(d => d.ip_address === ip) ||
                     allData.servers.find(d => d.ip_address === ip);

      return device && device.location?.toLowerCase() === region.toLowerCase();
    });

    console.log("Devices Found in Region:", regionDevices);

    if (regionDevices.length === 0) {
      return res.status(404).json({ message: `No devices found for region: ${region}` });
    }

    let dailySummary = { totalUptime: 0, totalDowntime: 0, totalDowntimeDuration: 0 };
    let weeklySummary = { totalUptime: 0, totalDowntime: 0, totalDowntimeDuration: 0 };
    let monthlySummary = { totalUptime: 0, totalDowntime: 0, totalDowntimeDuration: 0 };

    regionDevices.forEach(ip => {
      const stats = uptimeDowntimeStats[ip] || { daily: {}, weekly: {}, monthly: {} };

      if (stats.daily[day]) {
        dailySummary.totalUptime += stats.daily[day].uptime || 0;
        dailySummary.totalDowntime += stats.daily[day].downtime || 0;
        dailySummary.totalDowntimeDuration += stats.daily[day].downtimeDuration || 0;
      }

      if (stats.weekly[week]) {
        weeklySummary.totalUptime += stats.weekly[week].uptime || 0;
        weeklySummary.totalDowntime += stats.weekly[week].downtime || 0;
        weeklySummary.totalDowntimeDuration += stats.weekly[week].downtimeDuration || 0;
      }

      if (stats.monthly[month]) {
        monthlySummary.totalUptime += stats.monthly[month].uptime || 0;
        monthlySummary.totalDowntime += stats.monthly[month].downtime || 0;
        monthlySummary.totalDowntimeDuration += stats.monthly[month].downtimeDuration || 0;
      }
    });

    return res.status(200).json({ region, dailySummary, weeklySummary, monthlySummary });

  } catch (error) {
    console.error("Error in API:", error);
    return res.status(500).json({ message: "Something went wrong!", error: error.message });
  }
});

// Start Server
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
  pingDevices();
});










require("dotenv").config();
const express = require("express");
const cors = require("cors");
const bodyParser = require("body-parser");
const ping = require("ping");
const regionRoutes = require("./routes/regionRoutes");
const { fetchAllIpAddress } = require("./services/excelService");
const {allData}=require("./services/excelService");

const app = express();
const PORT = process.env.PORT || 80;

// Middleware
app.use(cors({
  origin: "http://127.0.0.1:5500", // Match your frontend's origin
  methods: "GET,POST,PUT,DELETE",
  allowedHeaders: "Content-Type,Authorization",
}));
app.use(bodyParser.json());

// Routes
app.use("/api/regions", regionRoutes);

// Store device statuses and downtime tracking
const devices = fetchAllIpAddress();
let deviceStatus = {};
let downtimeTracking = {}; // { ip: { lastOffline: timestamp, downtimeDuration: minutes } }
let uptimeDowntimeStats = {}; // Store daily, weekly, and monthly uptime/downtime

// Function to get the current date, week, and month keys
const getDateKeys = () => {
  const now = new Date();
  const day = now.toISOString().split("T")[0]; // YYYY-MM-DD format
  const week = Math.ceil(now.getDate() / 7); // Week number in the month
  const month = now.getMonth() + 1; // Month number
  return { day, week, month };
};

// Function to update device status and track downtime/uptime
async function pingDevices() {
  const { day, week, month } = getDateKeys();

  for (const ip of devices) {
    try {
      const result = await ping.promise.probe(ip);
      const isOnline = result.alive;
      
      if (!uptimeDowntimeStats[ip]) {
        uptimeDowntimeStats[ip] = { daily: {}, weekly: {}, monthly: {} };
      }

      // Initialize if not present
      if (!uptimeDowntimeStats[ip].daily[day]) {
        uptimeDowntimeStats[ip].daily[day] = { uptime: 0, downtime: 0, downtimeDuration: 0 };
      }
      if (!uptimeDowntimeStats[ip].weekly[week]) {
        uptimeDowntimeStats[ip].weekly[week] = { uptime: 0, downtime: 0, downtimeDuration: 0 };
      }
      if (!uptimeDowntimeStats[ip].monthly[month]) {
        uptimeDowntimeStats[ip].monthly[month] = { uptime: 0, downtime: 0, downtimeDuration: 0 };
      }

      if (isOnline) {
        // If previously offline, calculate downtime duration
        if (downtimeTracking[ip] && downtimeTracking[ip].lastOffline) {
          const lastOfflineTime = downtimeTracking[ip].lastOffline;
          const downtimeMinutes = Math.floor((Date.now() - lastOfflineTime) / 60000); // Convert ms to minutes

          // Update downtime duration
          uptimeDowntimeStats[ip].daily[day].downtimeDuration += downtimeMinutes;
          uptimeDowntimeStats[ip].weekly[week].downtimeDuration += downtimeMinutes;
          uptimeDowntimeStats[ip].monthly[month].downtimeDuration += downtimeMinutes;

          // Reset tracking
          delete downtimeTracking[ip];
        }

        // Increase uptime count
        uptimeDowntimeStats[ip].daily[day].uptime += 1;
        uptimeDowntimeStats[ip].weekly[week].uptime += 1;
        uptimeDowntimeStats[ip].monthly[month].uptime += 1;
      } else {
        // If the device just went offline, store the timestamp


        if (!downtimeTracking[ip]) {
          // If the device just went offline, start tracking its downtime
          downtimeTracking[ip] = { lastOffline: Date.now(), totalDowntime: 0 };
        } else {
          // Device is still offline, calculate the new duration
          const lastOfflineTime = downtimeTracking[ip].lastOffline;
          const downtimeMinutes = Math.floor((Date.now() - lastOfflineTime) / 60000); // Convert ms to minutes
        
          if (downtimeMinutes > 0) {  // Only update if at least 1 minute has passed
            uptimeDowntimeStats[ip].daily[day].downtimeDuration += downtimeMinutes;
            uptimeDowntimeStats[ip].weekly[week].downtimeDuration += downtimeMinutes;
            uptimeDowntimeStats[ip].monthly[month].downtimeDuration += downtimeMinutes;
        
            // Update total downtime
            downtimeTracking[ip].totalDowntime += downtimeMinutes;
        
            // Update last offline time to the current timestamp (to avoid counting same duration multiple times)
            downtimeTracking[ip].lastOffline = Date.now();
          }
        }


        // Increase downtime count
        uptimeDowntimeStats[ip].daily[day].downtime += 1;
        uptimeDowntimeStats[ip].weekly[week].downtime += 1;
        uptimeDowntimeStats[ip].monthly[month].downtime += 1;
      }

      deviceStatus[ip] = isOnline ? "Online" : "Offline";
    } catch (error) {
      console.error(`Error pinging ${ip}:`, error);
      deviceStatus[ip] = "Offline";
    }
  }

  console.log("Updated device status:", deviceStatus);
}

// Ping devices every 30 seconds
setInterval(pingDevices, 30000);

// Get real-time status of all devices
app.get("/api/devices/status", (req, res) => {
  res.json(deviceStatus);
});




// New endpoint to get downtime/uptime summary
app.get("/api/region/devices/downtime-uptime/:region", (req, res) => {
  try {
      const region = req.params.region.toLowerCase();
      console.log(`Fetching downtime-uptime data for region: ${region}`);

      // Validate uptimeDowntimeStats
      if (!uptimeDowntimeStats) {
          console.error("uptimeDowntimeStats is undefined or empty");
          return res.status(500).json({ message: "Server error: Data not available" });
      }

      const { day, week, month } = getDateKeys();
      if (!day || !week || !month) {
          console.error("Error getting date keys");
          return res.status(500).json({ message: "Error generating date keys" });
      }

      // Find devices in the given region
      const regionDevices = Object.keys(uptimeDowntimeStats).filter((ip) => {
          const device = allData.cameras.find(d => d.ip_address === ip) ||
                         allData.archivers.find(d => d.ip_address === ip) ||
                         allData.controllers.find(d => d.ip_address === ip) ||
                         allData.servers.find(d => d.ip_address === ip);

          return device && device.location?.toLowerCase() === region;
      });

      if (regionDevices.length === 0) {
          console.warn(`No devices found for region: ${region}`);
          return res.status(404).json({ message: `No devices found for region: ${region}` });
      }

      let dailySummary = { totalUptime: 0, totalDowntime: 0, totalDowntimeDuration: 0 };
      let weeklySummary = { totalUptime: 0, totalDowntime: 0, totalDowntimeDuration: 0 };
      let monthlySummary = { totalUptime: 0, totalDowntime: 0, totalDowntimeDuration: 0 };

      regionDevices.forEach(ip => {
          const stats = uptimeDowntimeStats[ip] || { daily: {}, weekly: {}, monthly: {} };

          if (stats.daily[day]) {
              dailySummary.totalUptime += stats.daily[day].uptime || 0;
              dailySummary.totalDowntime += stats.daily[day].downtime || 0;
              dailySummary.totalDowntimeDuration += stats.daily[day].downtimeDuration || 0;
          }

          if (stats.weekly[week]) {
              weeklySummary.totalUptime += stats.weekly[week].uptime || 0;
              weeklySummary.totalDowntime += stats.weekly[week].downtime || 0;
              weeklySummary.totalDowntimeDuration += stats.weekly[week].downtimeDuration || 0;
          }

          if (stats.monthly[month]) {
              monthlySummary.totalUptime += stats.monthly[month].uptime || 0;
              monthlySummary.totalDowntime += stats.monthly[month].downtime || 0;
              monthlySummary.totalDowntimeDuration += stats.monthly[month].downtimeDuration || 0;
          }
      });

      return res.status(200).json({
          region: region,
          dailySummary,
          weeklySummary,
          monthlySummary
      });

  } catch (error) {
      console.error("Error in API:", error);
      return res.status(500).json({ message: "Something went wrong!", error: error.message });
  }
});



// Ping a specific device dynamically
app.get("/api/ping/:ip", async (req, res) => {
  const ip = req.params.ip;

  try {
    const result = await ping.promise.probe(ip);
    res.json({ ip, status: result.alive ? "Online" : "Offline" });
  } catch (error) {
    console.error(`Ping error for ${ip}:`, error);
    res.json({ ip, status: "Offline" });
  }
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).send("Something went wrong!");
});

// Start Server
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
  pingDevices(); // Start pinging devices immediately
});


