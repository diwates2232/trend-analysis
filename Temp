const xlsx = require("xlsx");
const path = require("path");
const ping = require("ping");

// Paths for Excel files
const archiverPath = path.join(__dirname, "../data/ArchiverData.xlsx");
const controllerPath = path.join(__dirname, "../data/ControllerData.xlsx");
const cameraPath = path.join(__dirname, "../data/CameraData.xlsx");
const serverPath = path.join(__dirname, "../data/ServerData.xlsx");

// Cache to store preloaded data
let allData = {};

// Function to normalize column headers
const normalizeHeaders = (data) => {
    return data.map((row) => {
        const normalizedRow = {};
        for (const key in row) {
            const normalizedKey = key.trim().toLowerCase().replace(/\s+/g, '_');
            normalizedRow[normalizedKey] = row[key];
        }
        return normalizedRow;
    });
};

const loadExcelData = () => {
    if (Object.keys(allData).length === 0) { // Load only if not already loaded
        const archiverWorkbook = xlsx.readFile(archiverPath);
        const controllerWorkbook = xlsx.readFile(controllerPath);
        const cameraWorkbook = xlsx.readFile(cameraPath);
        const serverWorkbook = xlsx.readFile(serverPath);

        allData = {
            archivers: normalizeHeaders(xlsx.utils.sheet_to_json(archiverWorkbook.Sheets[archiverWorkbook.SheetNames[0]])),
            controllers: normalizeHeaders(xlsx.utils.sheet_to_json(controllerWorkbook.Sheets[controllerWorkbook.SheetNames[0]])),
            cameras: normalizeHeaders(xlsx.utils.sheet_to_json(cameraWorkbook.Sheets[cameraWorkbook.SheetNames[0]])),
            servers: normalizeHeaders(xlsx.utils.sheet_to_json(serverWorkbook.Sheets[serverWorkbook.SheetNames[0]])),
        };
        console.log("Excel Data Loaded:", Object.keys(allData));
    
    }

};



// Function to compute global summary and details
const fetchAllIpAddress = () => {
    const devices = {
        cameras: allData.cameras,
        archivers: allData.archivers,
        controllers: allData.controllers,
        servers: allData.servers,
    };



    merged = [...devices.cameras , ...devices.archivers, ...devices.controllers, ...devices.servers]
    //console.log("Hi ", merged)
    addresses =  merged.map(myfunc)
    console.log(addresses)
    return addresses
    
}
const myfunc= (x) => {
    return x.ip_address
   // return x.device_name
}


const fetchGlobalData = async () => {
    const devices = {
        cameras: allData.cameras,
        archivers: allData.archivers,
        controllers: allData.controllers,
        servers: allData.servers,
    };


    // Ping all devices
    await pingDevices([...devices.cameras, ...devices.archivers, ...devices.controllers, ...devices.servers]);


    const summary = calculateSummary(devices);
    return { summary, details: devices };
};


// Function to compute region summary and details
const fetchRegionData = async (regionName) => {
    const devices = {
        cameras: allData.cameras.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
        archivers: allData.archivers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
        controllers: allData.controllers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
        servers: allData.servers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
    };

    // Ping all devices
    await pingDevices([...devices.cameras, ...devices.archivers, ...devices.controllers, ...devices.servers]);

    const summary = calculateSummary(devices);
    return { summary, details: devices };
};

// Helper function to calculate detailed summary
const calculateSummary = (devices) => {
    const summary = {};

    for (const [key, deviceList] of Object.entries(devices)) {
        const total = deviceList.length;
        const online = deviceList.filter(device => device.status === "Online").length;
        const offline = total - online;

        summary[key] = { total, online, offline };
    }

    return {
        totalDevices: Object.values(summary).reduce((sum, { total }) => sum + total, 0),
        totalOnlineDevices: Object.values(summary).reduce((sum, { online }) => sum + online, 0),
        totalOfflineDevices: Object.values(summary).reduce((sum, { offline }) => sum + offline, 0),
        ...summary,
    };
};

const pLimit = require("p-limit");

const cache = new Map(); // Stores device status temporarily
const pingDevices = async (devices) => {
    const limit = pLimit(10); // Reduce concurrent ping requests to 10
    const pingPromises = devices.map((device) =>
        limit(async () => {
            const ipAddress = device.ip_address;
            if (cache.has(ipAddress)) {
                device.status = cache.get(ipAddress); // Use cached status
            } else {
                device.status = ipAddress ? await pingDevice(ipAddress) : "IP Address Missing";
                cache.set(ipAddress, device.status); // Store result in cache
            }
        })
    );

    await Promise.all(pingPromises);
};

// Function to ping a single device
const pingDevice = (ip) => {
    return new Promise((resolve) => {
        ping.sys.probe(ip, (isAlive) => {
            resolve(isAlive ? "Online" : "Offline");
        });
    });
};



 


const fetchRegionTrendData = async (region) => {
    console.log("Fetching trend data for region:", region);

    if (!allData || !allData.cameras || !allData.archivers || !allData.controllers || !allData.servers) {
        console.error("Error: allData is undefined or missing device properties");
        return null;
    }

    const filterByRegion = (devices) => 
        devices ? devices.filter(device => device.location && device.location.toLowerCase() === region.toLowerCase()) : [];

    // Filter devices safely
    const devices = {
        cameras: filterByRegion(allData.cameras),
        archivers: filterByRegion(allData.archivers),
        controllers: filterByRegion(allData.controllers),
        servers: filterByRegion(allData.servers)
    };

    console.log("Filtered Devices:", JSON.stringify(devices, null, 2));

    if (!devices.cameras.length && !devices.archivers.length && !devices.controllers.length && !devices.servers.length) {
        console.log(`No devices found for region: ${region}`);
        return null;
    }

    const trends = calculateDeviceTrends(devices);
    return {trends };
};

// Function to calculate device trends
const calculateDeviceTrends = (devices) => {
    return {
        daily: calculateTrend(devices, "daily"),
        weekly: calculateTrend(devices, "weekly"),
        monthly: calculateTrend(devices, "monthly")
    };
};

// Function to calculate trend details for a given period
const calculateTrend = (devices, period) => {
    const allDevices = [...devices.cameras, ...devices.archivers, ...devices.controllers, ...devices.servers];

    return allDevices.map(device => {
        // Ensure history is defined before calculating uptime/downtime
        if (!device.history || device.history.length === 0) {
            console.log(`No history for device ${device.device_name}`);
            return {
                device_name: device.device_name || "Unknown",
                ip_address: device.ip_address,
                uptime: 0,
                downtime: 0,
                downtimeDuration: 0
            };
        }

        const { uptime, downtime, downtimeDuration } = computeDeviceStats(device.history);
        return {
            device_name: device.device_name || "Unknown",
            ip_address: device.ip_address,
            uptime,
            downtime,
            downtimeDuration
        };
    });
};

// Compute uptime and downtime for a device
const computeDeviceStats = (history) => {
    if (!Array.isArray(history) || history.length === 0) {
        console.log("No history data found for device");
        return { uptime: 0, downtime: 0, downtimeDuration: 0 };
    }

    let uptime = 0, downtime = 0, downtimeDuration = 0;
    let lastStatus = history[0].status;
    let lastTimestamp = new Date(history[0].timestamp).getTime();

    console.log(`Processing history for device. Initial status: ${lastStatus}, Time: ${history[0].timestamp}`);

    for (let i = 1; i < history.length; i++) {
        let currentStatus = history[i].status;
        let currentTime = new Date(history[i].timestamp).getTime();
        let timeDiff = (currentTime - lastTimestamp) / 60000; // Convert ms to minutes

        console.log(`Log ${i}: Status: ${currentStatus}, Time: ${history[i].timestamp}, TimeDiff: ${timeDiff} minutes`);

        if (timeDiff > 0) { // Only count if there's a valid difference
            if (lastStatus === "online" && currentStatus === "online") {
                uptime += timeDiff;
            } else if (lastStatus === "offline" && currentStatus === "offline") {
                downtime += timeDiff;
                downtimeDuration += timeDiff;
            } else if (lastStatus === "online" && currentStatus === "offline") {
                uptime += timeDiff; // Add uptime before switching to offline
            } else if (lastStatus === "offline" && currentStatus === "online") {
                downtime += timeDiff; // Add downtime before switching to online
                downtimeDuration += timeDiff;
            }
        }

        lastStatus = currentStatus;
        lastTimestamp = currentTime;
    }

    console.log(`Final Uptime: ${uptime} minutes, Downtime: ${downtime} minutes, Downtime Duration: ${downtimeDuration} minutes`);

    return { 
        uptime: Math.round(uptime), 
        downtime: Math.round(downtime), 
        downtimeDuration: Math.round(downtimeDuration) 
    };
};





// Preload data
loadExcelData();

module.exports = { fetchGlobalData, fetchRegionData, fetchAllIpAddress, fetchRegionTrendData};
