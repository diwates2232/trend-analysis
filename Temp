// Get downtime/uptime summary for a specific region
app.get('/api/region/devices/downtime-uptime/:region', (req, res) => {
    const region = req.params.region.toLowerCase();
    console.log(`Fetching downtime-uptime data for region: ${region}`);

    const regionDevices = Object.keys(uptimeDowntimeStats).filter(ip => {
        // Check if the IP belongs to the requested region
        return allData.cameras.some(device => device.ip_address === ip && device.location?.toLowerCase() === region) ||
               allData.archivers.some(device => device.ip_address === ip && device.location?.toLowerCase() === region) ||
               allData.controllers.some(device => device.ip_address === ip && device.location?.toLowerCase() === region) ||
               allData.servers.some(device => device.ip_address === ip && device.location?.toLowerCase() === region);
    });

    if (regionDevices.length === 0) {
        return res.status(404).json({ error: "No devices found for this region." });
    }

    // Collect uptime/downtime data for the found devices
    const regionData = {};
    for (const ip of regionDevices) {
        regionData[ip] = uptimeDowntimeStats[ip];
    }

    res.status(200).json({ region, uptimeDowntimeData: regionData });
});








const fetchRegionData = async (regionName) => {
    console.log(`Fetching data for region: ${regionName}`);
    
    const filteredCameras = allData.cameras.filter(row => {
        console.log(`Camera Location: ${row.location}`);
        return row.location?.toLowerCase() === regionName.toLowerCase();
    });

    console.log(`Filtered Cameras:`, filteredCameras);

    const filteredArchivers = allData.archivers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase());
    const filteredControllers = allData.controllers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase());
    const filteredServers = allData.servers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase());

    const devices = { cameras: filteredCameras, archivers: filteredArchivers, controllers: filteredControllers, servers: filteredServers };

    console.log(`Filtered Devices:`, devices);

    await pingDevices([...filteredCameras, ...filteredArchivers, ...filteredControllers, ...filteredServers]);

    const summary = calculateSummary(devices);
    return { summary, details: devices };
};








app.get('/api/region/devices/downtime-uptime/:region', (req, res) => {
    const region = req.params.region;
    console.log(`Fetching downtime-uptime data for region: ${region}`);
    
    // Sample response, replace this with actual logic
    res.json({ message: `Data for ${region}`, data: [] });
});









function fetchTrendData(region) {


    const trendApiUrl = `http://localhost:80/api/region/devices/downtime-uptime/${region}`;
    fetch(trendApiUrl)




function fetchDetails(regionName) {
    const detailsUrl = `${baseUrl}/details/${regionName}`;

    fetch(detailsUrl)
        .then((response) => response.json())
        .then((details) => {
            console.log("Details Data:", details);
            updateDetails(details);
            
            // Start live pinging every 10 seconds
            setInterval(() => {
                pingAllDevices(details);
                fetchLiveStatus(regionName); // Fetch live status every 10s
            }, 10000);
        })
        .catch((error) => {
            console.error("Error fetching details:", error);
            document.getElementById("device-details").innerHTML = "<p>Failed to load device details.</p>";
        });
}
