<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trend Analysis</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar">
        <h3>Device Trend Analysis</h3>

        <!-- Region Selector -->
        <div class="region-selector">
            <button onclick="fetchTrendData('apac')">APAC</button>
            <button onclick="fetchTrendData('emea')">EMEA</button>
            <button onclick="fetchTrendData('laca')">LACA</button>
            <button onclick="fetchTrendData('namer')">NAMER</button>
        </div>

        <!-- Device Type Dropdown -->
        <div class="device-type">
            <label for="deviceType">Select Device Type:</label>
            <select id="deviceType" onchange="updateDeviceType()">
                <option value="cameras">Cameras</option>
                <option value="archivers">Archivers</option>
                <option value="servers">Servers</option>
                <option value="controllers">Controllers</option>
            </select>
        </div>

        <!-- Back to Dashboard Button -->
        <button class="back-btn" onclick="window.location.href='index.html'">Back to Dashboard</button>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <h1>Device Trend Analysis</h1>
        <div class="chart-container">
            <canvas id="trendChart"></canvas>
        </div>
    </div>

    <script src="trend.js"></script> <!-- JavaScript to fetch and display trends -->
</body>
</html>





/* General Styling */
body {
    font-family: Arial, sans-serif;
    display: flex;
    min-height: 100vh;
    margin: 0;
}

/* Sidebar Styling */
.sidebar {
    width: 250px;
    padding: 20px;
    background-color: #333;
    color: white;
    position: fixed;
    height: 100%;
    top: 0;
    left: 0;
}

.sidebar h3 {
    color: #fff;
    text-align: center;
    margin-bottom: 20px;
}

.region-selector button {
    width: 100%;
    padding: 10px;
    margin: 5px 0;
    background-color: #444;
    color: white;
    border: none;
    cursor: pointer;
    font-size: 16px;
}

.region-selector button:hover {
    background-color: #555;
}

.device-type {
    margin-top: 20px;
}

.device-type select {
    width: 100%;
    padding: 8px;
    margin-top: 10px;
    font-size: 16px;
}

/* Back Button */
.back-btn {
    width: 100%;
    padding: 10px;
    background-color: #f44336;
    color: white;
    border: none;
    margin-top: 20px;
    cursor: pointer;
    font-size: 16px;
}

.back-btn:hover {
    background-color: #d32f2f;
}

/* Main Content Styling */
.main-content {
    margin-left: 260px; /* Sidebar width */
    padding: 20px;
    flex-grow: 1;
}

h1 {
    font-size: 2em;
    margin-bottom: 20px;
}

.chart-container {
    width: 80%;
    margin: 0 auto;
}





// Event listener for DOM content loaded
document.addEventListener("DOMContentLoaded", function () {
    fetchTrendData('apac', 'cameras'); // Default to APAC region and Cameras device type
});

// Fetch data based on the region and device type selected
function fetchTrendData(region, deviceType = 'cameras') {
    fetch(`http://localhost:80/api/region/trend/details/${region}`)
        .then(response => response.json())
        .then(data => {
            if (data && data.devices) {
                const filteredDevices = filterDevicesByType(data.devices, deviceType);
                displayTrendChart(filteredDevices);  // Display chart for selected region and device type
            } else {
                console.error("No devices data available.");
            }
        })
        .catch(error => console.error("Error fetching trend data:", error));
}

// Filter devices based on the selected device type
function filterDevicesByType(devices, deviceType) {
    return devices.filter(device => device.type.toLowerCase() === deviceType.toLowerCase());
}

// Function to display the chart
function displayTrendChart(devices) {
    const labels = devices.map(device => device.ip);
    const uptimeData = devices.map(device => convertToMinutes(device.daily.uptime));
    const downtimeData = devices.map(device => convertToMinutes(device.daily.downtimeDuration));

    const ctx = document.getElementById("trendChart").getContext("2d");
    new Chart(ctx, {
        type: "bar",
        data: {
            labels: labels,
            datasets: [
                {
                    label: "Uptime (minutes)",
                    data: uptimeData,
                    backgroundColor: "green",
                },
                {
                    label: "Downtime (minutes)",
                    data: downtimeData,
                    backgroundColor: "red",
                }
            ]
        },
        options: {
            responsive: true,
            scales: {
                y: { beginAtZero: true }
            }
        }
    });
}

// Convert time from string to minutes
function convertToMinutes(timeString) {
    const parts = timeString.split(" ");
    let totalMinutes = 0;
    parts.forEach(part => {
        if (part.includes("h")) totalMinutes += parseInt(part) * 60;
        if (part.includes("m")) totalMinutes += parseInt(part);
    });
    return totalMinutes;
}

// Function to update device type and fetch data
function updateDeviceType() {
    const deviceType = document.getElementById('deviceType').value;
    const regionButtons = document.querySelectorAll('.region-selector button');
    let selectedRegion = 'apac'; // Default region, update based on active region

    // Get the active region button
    regionButtons.forEach(button => {
        if (button.style.backgroundColor === 'rgb(85, 85, 85)') {
            selectedRegion = button.textContent.toLowerCase();
        }
    });

    fetchTrendData(selectedRegion, deviceType);
}














<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trend Analysis</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <h1>Device Trend Analysis</h1>

        <!-- Region Selector -->
        <div class="region-selector">
            <button onclick="fetchTrendData('apac')">APAC</button>
            <button onclick="fetchTrendData('emea')">EMEA</button>
            <button onclick="fetchTrendData('laca')">LACA</button>
            <button onclick="fetchTrendData('namer')">NAMER</button>
        </div>

        <!-- Chart Container -->
        <div class="chart-container">
            <canvas id="trendChart"></canvas>
        </div>

        <button class="back-btn" onclick="window.location.href='index.html'">Back to Dashboard</button>
    </div>

    <script src="trend.js"></script> <!-- JavaScript to fetch and display trends -->
</body>
</html>





// Event listener for DOM content loaded
document.addEventListener("DOMContentLoaded", function () {
    fetchTrendData('apac'); // Default to APAC region initially
});

// Fetch data based on the region selected
function fetchTrendData(region) {
    fetch(`http://localhost:80/api/region/trend/details/${region}`)
        .then(response => response.json())
        .then(data => {
            if (data && data.devices) {
                displayTrendChart(data.devices);  // Display chart for selected region
            } else {
                console.error("No devices data available.");
            }
        })
        .catch(error => console.error("Error fetching trend data:", error));
}

// Function to display the chart
function displayTrendChart(devices) {
    const labels = devices.map(device => device.ip);
    const uptimeData = devices.map(device => convertToMinutes(device.daily.uptime));
    const downtimeData = devices.map(device => convertToMinutes(device.daily.downtimeDuration));

    const ctx = document.getElementById("trendChart").getContext("2d");
    new Chart(ctx, {
        type: "bar",
        data: {
            labels: labels,
            datasets: [
                {
                    label: "Uptime (minutes)",
                    data: uptimeData,
                    backgroundColor: "green",
                },
                {
                    label: "Downtime (minutes)",
                    data: downtimeData,
                    backgroundColor: "red",
                }
            ]
        },
        options: {
            responsive: true,
            scales: {
                y: { beginAtZero: true }
            }
        }
    });
}

// Convert time from string to minutes
function convertToMinutes(timeString) {
    const parts = timeString.split(" ");
    let totalMinutes = 0;
    parts.forEach(part => {
        if (part.includes("h")) totalMinutes += parseInt(part) * 60;
        if (part.includes("m")) totalMinutes += parseInt(part);
    });
    return totalMinutes;
}








/* Chart Container */
.chart-container {
    width: 100%;
    height: 400px; /* Give space for the chart */
    margin-bottom: 30px;
    display: flex;
    justify-content: center;
    align-items: center;
}

/* Chart Styling */
#trendChart {
    width: 100%;
    height: 100%;
    border-radius: 8px; /* Optional rounded corners for the chart */
    border: 1px solid #ddd; /* Optional light border for visual separation */
}

/* Back Button Styling */
.back-btn {
    background-color: #007bff;
    color: white;
    padding: 12px 24px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1.2rem;
    transition: background-color 0.3s ease;
    display: block;
    margin: 20px auto 0; /* Centering the button horizontally */
}

.back-btn:hover {
    background-color: #0056b3;
}

.back-btn:focus {
    outline: none; /* Remove the default outline when focused */
}












document.addEventListener("DOMContentLoaded", function () {
    // Replace 'apac' with the region you want to fetch data for
    const region = 'apac'; // You can replace this dynamically based on user input if needed
    fetch(`http://localhost:80/api/region/trend/details/${region}`)
        .then(response => response.json())
        .then(data => {
            if (data && data.devices) {
                displayTrendChart(data.devices);
            } else {
                console.error("No devices data available.");
            }
        })
        .catch(error => console.error("Error fetching trend data:", error));
});

function displayTrendChart(devices) {
    const labels = devices.map(device => device.ip);
    const uptimeData = devices.map(device => convertToMinutes(device.daily.uptime));
    const downtimeData = devices.map(device => convertToMinutes(device.daily.downtimeDuration));

    const ctx = document.getElementById("trendChart").getContext("2d");
    new Chart(ctx, {
        type: "bar",
        data: {
            labels: labels,
            datasets: [
                {
                    label: "Uptime (minutes)",
                    data: uptimeData,
                    backgroundColor: "green",
                },
                {
                    label: "Downtime (minutes)",
                    data: downtimeData,
                    backgroundColor: "red",
                }
            ]
        },
        options: {
            responsive: true,
            scales: {
                y: { beginAtZero: true }
            }
        }
    });
}

function convertToMinutes(timeString) {
    const parts = timeString.split(" ");
    let totalMinutes = 0;
    parts.forEach(part => {
        if (part.includes("d")) totalMinutes += parseInt(part) * 1440; // Convert days to minutes (1 day = 1440 minutes)
        if (part.includes("h")) totalMinutes += parseInt(part) * 60;  // Convert hours to minutes (1 hour = 60 minutes)
        if (part.includes("m")) totalMinutes += parseInt(part); // Minutes
    });
    return totalMinutes;
}




<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trend Analysis</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <h1>Device Trend Analysis</h1>
        <canvas id="trendChart"></canvas>
        <button onclick="window.location.href='index.html'">Back to Dashboard</button>
    </div>

    <script src="trend.js"></script> <!-- JavaScript to fetch and display trends -->
</body>
</html>



app.js


app.get("/api/region/trend/details/:region", (req, res) => {
  try {
    const region = req.params.region.toLowerCase();
    console.log(`Fetching details for region: ${region}`);

    const { day, week, month } = getDateKeys();

    let deviceDetails = [];

    Object.keys(uptimeDowntimeStats).forEach(ip => {
      const device = allData.cameras.find(d => d.ip_address === ip) ||
                     allData.archivers.find(d => d.ip_address === ip) ||
                     allData.controllers.find(d => d.ip_address === ip) ||
                     allData.servers.find(d => d.ip_address === ip);

      if (device && device.location?.toLowerCase() === region) {
        const stats = uptimeDowntimeStats[ip];

        deviceDetails.push({
          ip,
          name: device.name,
          type: device.type || "Unknown", // Device type (Camera, Server, etc.)
          location: device.location || "Unknown", // Device location
          status: deviceStatus[ip] || "Unknown",
          daily: {
            uptime: formatDuration(stats.daily[day]?.uptime),
            downtime: formatDuration(stats.daily[day]?.downtime),
            downtimeDuration: formatDuration(stats.daily[day]?.downtimeDuration)
          },
          weekly: {
            uptime: formatDuration(stats.weekly[week]?.uptime),
            downtime: formatDuration(stats.weekly[week]?.downtime),
            downtimeDuration: formatDuration(stats.weekly[week]?.downtimeDuration)
          },
          monthly: {
            uptime: formatDuration(stats.monthly[month]?.uptime),
            downtime: formatDuration(stats.monthly[month]?.downtime),
            downtimeDuration: formatDuration(stats.monthly[month]?.downtimeDuration)
          }
        });
      }
    });

    if (deviceDetails.length === 0) {
      return res.status(404).json({ message: `No devices found for region: ${region}` });
    }

    return res.status(200).json({ region, devices: deviceDetails });

  } catch (error) {
    console.error("Error in details API:", error);
    return res.status(500).json({ message: "Something went wrong!", error: error.message });
  }
});

// Helper function to format time duration
const formatDuration = (seconds) => {
  if (seconds === undefined) return "0d 0h 0m 0s";

  const d = Math.floor(seconds / 86400); // 1 day = 86400 seconds
  const h = Math.floor((seconds % 86400) / 3600); // 1 hour = 3600 seconds
  const m = Math.floor((seconds % 3600) / 60); // 1 minute = 60 seconds
  const s = Math.floor(seconds % 60); 

  return `${d}d ${h}h ${m}m ${s}s`;
};



Api-http://localhost/api/region/trend/details/apac (apac /emea/laca namer/global)


api responce- 

{
  "region": "apac",
  "devices": [
    {
      "ip": "10.199.10.20",
      "type": "Unknown",
      "location": "APAC",
      "status": "Online",
      "daily": {
        "uptime": "0d 1h 7m 0s",
        "downtime": "0d 0h 0m 0s",
        "downtimeDuration": "0d 0h 0m 0s"
      },
      "weekly": {
        "uptime": "0d 1h 7m 0s",
        "downtime": "0d 0h 0m 0s",
        "downtimeDuration": "0d 0h 0m 0s"
      },
      "monthly": {
        "uptime": "0d 1h 7m 0s",
        "downtime": "0d 0h 0m 0s",
        "downtimeDuration": "0d 0h 0m 0s"
      }
    },



trend.js

document.addEventListener("DOMContentLoaded", function () {
    fetch("http://localhost:80/api/region/trend/details/regions")
        .then(response => response.json())
        .then(data => {
            if (data && data.devices) {
                displayTrendChart(data.devices);
            } else {
                console.error("No devices data available.");
            }
        })
        .catch(error => console.error("Error fetching trend data:", error));
});

function displayTrendChart(devices) {
    const labels = devices.map(device => device.ip);
    const uptimeData = devices.map(device => convertToMinutes(device.uptime));
    const downtimeData = devices.map(device => convertToMinutes(device.downtimeDuration));

    const ctx = document.getElementById("trendChart").getContext("2d");
    new Chart(ctx, {
        type: "bar",
        data: {
            labels: labels,
            datasets: [
                {
                    label: "Uptime (minutes)",
                    data: uptimeData,
                    backgroundColor: "green",
                },
                {
                    label: "Downtime (minutes)",
                    data: downtimeData,
                    backgroundColor: "red",
                }
            ]
        },
        options: {
            responsive: true,
            scales: {
                y: { beginAtZero: true }
            }
        }
    });
}

function convertToMinutes(timeString) {
    const parts = timeString.split(" ");
    let totalMinutes = 0;
    parts.forEach(part => {
        if (part.includes("h")) totalMinutes += parseInt(part) * 60;
        if (part.includes("m")) totalMinutes += parseInt(part);
    });
    return totalMinutes;
}



trend.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trend Analysis</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <h1>Device Trend Analysis</h1>
        <canvas id="trendChart"></canvas>
        <button onclick="window.location.href='index.html'">Back to Dashboard</button>
    </div>

    <script src="trend.js"></script> <!-- JavaScript to fetch and display trends -->
</body>
</html>



