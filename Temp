
{
  "ignore": [
    "deviceLogs-*.jsonl",
    "deviceLogs-*.json",
    "node_modules/*"
  ]
}







require("dotenv").config();
const express = require("express");
const cors = require("cors");
const bodyParser = require("body-parser");
const fs = require("fs");
const ping = require("ping");
const { DateTime } = require("luxon");
const regionRoutes = require("./routes/regionRoutes");
const { fetchAllIpAddress, ipRegionMap } = require("./services/excelService");

const app = express();
const PORT = process.env.PORT || 80;

// Helpers
function pruneOldEntries(entries, days = 30) {
  const cutoff = DateTime.now().minus({ days }).toMillis();
  return entries.filter(e => DateTime.fromISO(e.timestamp).toMillis() >= cutoff);
}
function getLogFileForDate(dt) {
  return `./deviceLogs-${dt.toISODate()}.json`;
}

// Middleware
app.use(cors({
  origin: "http://127.0.0.1:5500",
  methods: "GET,POST,PUT,DELETE",
  allowedHeaders: "Content-Type,Authorization",
}));
app.use(bodyParser.json());

// Routes
app.use("/api/regions", regionRoutes);

// Device Status Tracking
const devices = fetchAllIpAddress();
let deviceStatus = {};

// Load only today's logs
const today = DateTime.now().setZone("Asia/Kolkata");
const todayLogFile = getLogFileForDate(today);
let todayLogs = fs.existsSync(todayLogFile)
  ? JSON.parse(fs.readFileSync(todayLogFile, "utf8"))
  : {};

// Persist today's logs
function saveTodayLogs() {
  fs.writeFileSync(todayLogFile, JSON.stringify(todayLogs, null, 2));
}

// Log a status change
function logDeviceChange(ip, status) {
  const timestamp = DateTime.now().setZone("Asia/Kolkata").toISO();
  const arr = (todayLogs[ip] = todayLogs[ip] || []);
  const last = arr[arr.length - 1];
  if (!last || last.status !== status) {
    arr.push({ status, timestamp });
    todayLogs[ip] = pruneOldEntries(arr, 30);
    saveTodayLogs();
  }
}

// Ping devices
async function pingDevices() {
  for (const ip of devices) {
    let newStatus = "Offline";
    try {
      const res = await ping.promise.probe(ip);
      newStatus = res.alive ? "Online" : "Offline";
    } catch {
      /* keep Offline */
    }
    if (deviceStatus[ip] !== newStatus) {
      logDeviceChange(ip, newStatus);
    }
    deviceStatus[ip] = newStatus;
  }
  console.log("Updated device status:", deviceStatus);
}

// Start ping loop
setInterval(pingDevices, 60_000);
pingDevices();

// Real‑time status
app.get("/api/region/devices/status", (req, res) => {
  res.json(deviceStatus);
});

// Full history: stitch together all daily files
app.get("/api/devices/history", (req, res) => {
  const files = fs.readdirSync(".")
    .filter(f => f.startsWith("deviceLogs-") && f.endsWith(".json"));
  const combined = {};
  for (const f of files) {
    const dayLogs = JSON.parse(fs.readFileSync(f, "utf8"));
    for (const ip of Object.keys(dayLogs)) {
      combined[ip] = (combined[ip] || []).concat(dayLogs[ip]);
    }
  }
  // prune to last 30 days
  for (const ip of Object.keys(combined)) {
    combined[ip] = pruneOldEntries(combined[ip], 30);
  }
  res.json(combined);
});

// Region‑wise history
app.get("/api/region/:region/history", (req, res) => {
  const region = req.params.region.toLowerCase();
  const files = fs.readdirSync(".")
    .filter(f => f.startsWith("deviceLogs-") && f.endsWith(".json"));
  const regionLogs = {};

  for (const f of files) {
    const dayLogs = JSON.parse(fs.readFileSync(f, "utf8"));
    for (const ip of Object.keys(dayLogs)) {
      if (ipRegionMap[ip] === region) {
        regionLogs[ip] = (regionLogs[ip] || []).concat(dayLogs[ip]);
      }
    }
  }

  if (!Object.keys(regionLogs).length) {
    return res.status(404).json({ message: `No device history found for region: ${region}` });
  }
  // prune per‑IP
  for (const ip of Object.keys(regionLogs)) {
    regionLogs[ip] = pruneOldEntries(regionLogs[ip], 30);
  }
  res.json(regionLogs);
});

// Single‑device history
app.get("/api/device/history/:ip", (req, res) => {
  const ip = req.params.ip;
  const files = fs.readdirSync(".")
    .filter(f => f.startsWith("deviceLogs-") && f.endsWith(".json"));
  let history = [];
  for (const f of files) {
    const dayLogs = JSON.parse(fs.readFileSync(f, "utf8"));
    if (dayLogs[ip]) history = history.concat(dayLogs[ip]);
  }
  if (!history.length) {
    return res.status(404).json({ message: "No history found for this device" });
  }
  history.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));
  res.json({ ip, history });
});

// Start server
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});









const fs = require("fs");
const xlsx = require("xlsx");
const path = require("path");
const ping = require("ping");
const pLimit = require("p-limit");
const { DateTime } = require("luxon");

// Excel paths
const archiverPath = path.join(__dirname, "../data/ArchiverData.xlsx");
const controllerPath = path.join(__dirname, "../data/ControllerData.xlsx");
const cameraPath = path.join(__dirname, "../data/CameraData.xlsx");
const serverPath = path.join(__dirname, "../data/ServerData.xlsx");

// In‑memory cache
let allData = {};

// Helper: prune old entries
function pruneOldEntries(entries, days = 10) {
  const cutoff = DateTime.now().minus({ days }).toMillis();
  return entries.filter(e => DateTime.fromISO(e.timestamp).toMillis() >= cutoff);
}

// Load Excel sheets once
function loadExcelData() {
  if (Object.keys(allData).length) return;
  const loadSheet = file => {
    const wb = xlsx.readFile(file);
    const rows = xlsx.utils.sheet_to_json(wb.Sheets[wb.SheetNames[0]]);
    return rows.map(r => {
      const norm = {};
      Object.entries(r).forEach(([k, v]) => {
        norm[k.trim().toLowerCase().replace(/\s+/g, "_")] = v;
      });
      norm.history = [];
      return norm;
    });
  };
  allData = {
    archivers: loadSheet(archiverPath),
    controllers: loadSheet(controllerPath),
    cameras: loadSheet(cameraPath),
    servers: loadSheet(serverPath),
  };
  console.log("Excel Data Loaded:", Object.keys(allData));
}
loadExcelData();

// Build IP→region map
const ipRegionMap = {};
Object.values(allData).flat().forEach(dev => {
  if (dev.ip_address && dev.location) {
    ipRegionMap[dev.ip_address] = dev.location.toLowerCase();
  }
});

// Fetch all IPs
function fetchAllIpAddress() {
  return Object.values(allData)
    .flat()
    .map(d => d.ip_address)
    .filter(Boolean);
}

// Ping helpers
const cache = new Map();
function pingDevice(ip) {
  return new Promise(resolve =>
    ping.sys.probe(ip, alive => resolve(alive ? "Online" : "Offline"))
  );
}
async function pingDevices(devices) {
  const limit = pLimit(10);
  await Promise.all(devices.map(dev => limit(async () => {
    if (!dev.ip_address) {
      dev.status = "IP Address Missing";
      return;
    }
    if (cache.has(dev.ip_address)) {
      dev.status = cache.get(dev.ip_address);
    } else {
      dev.status = await pingDevice(dev.ip_address);
      cache.set(dev.ip_address, dev.status);
    }
    // record history in daily file via app.js
  })));
}

// Summary calculators
function calculateSummary(groups) {
  const summary = {};
  for (const [k, list] of Object.entries(groups)) {
    const total = list.length;
    const online = list.filter(d => d.status === "Online").length;
    summary[k] = { total, online, offline: total - online };
  }
  return {
    totalDevices: Object.values(summary).reduce((s, g) => s + g.total, 0),
    totalOnlineDevices: Object.values(summary).reduce((s, g) => s + g.online, 0),
    totalOfflineDevices: Object.values(summary).reduce((s, g) => s + g.offline, 0),
    ...summary
  };
}

// Public APIs
async function fetchGlobalData() {
  const all = [...allData.cameras, ...allData.archivers, ...allData.controllers, ...allData.servers];
  await pingDevices(all);
  return { summary: calculateSummary(allData), details: allData };
}

async function fetchRegionData(regionName) {
  const filter = list => list.filter(d => d.location?.toLowerCase() === regionName.toLowerCase());
  const regionDevices = {
    cameras: filter(allData.cameras),
    archivers: filter(allData.archivers),
    controllers: filter(allData.controllers),
    servers: filter(allData.servers),
  };
  await pingDevices([].concat(...Object.values(regionDevices)));
  return { summary: calculateSummary(regionDevices), details: regionDevices };
}

module.exports = {
  fetchGlobalData,
  fetchRegionData,
  fetchAllIpAddress,
  ipRegionMap
};







Read below backend js file carefully and due to high number of device logs  our api got stuck.to solve this issue can i do this create new deviceLogs file for specific day and use this.
read carefully backend.js file and give me updated js files 




app.js

require("dotenv").config();
const express = require("express");
const cors = require("cors");
const bodyParser = require("body-parser");
const fs = require("fs");
const ping = require("ping");
const { DateTime } = require("luxon");
const regionRoutes = require("./routes/regionRoutes");
const { fetchAllIpAddress } = require("./services/excelService");

const app = express();
const PORT = process.env.PORT || 80;

// Helper: prune entries older than N days
function pruneOldEntries(entries, days = 10) {
  const cutoff = DateTime.now().minus({ days }).toMillis();
  return entries.filter(e => {
    try {
      return DateTime.fromISO(e.timestamp).toMillis() >= cutoff;
    } catch {
      return false;
    }
  });
}

// Middleware
app.use(
  cors({
    origin: "http://127.0.0.1:5500",
    methods: "GET,POST,PUT,DELETE",
    allowedHeaders: "Content-Type,Authorization",
  })
);
app.use(bodyParser.json());

// Routes
app.use("/api/regions", regionRoutes);

// Device Status Tracking
const devices = fetchAllIpAddress();
let deviceStatus = {};
const logFile = "./deviceLogs.json";

// Load previous logs if exists
let deviceLogs = fs.existsSync(logFile)
  ? JSON.parse(fs.readFileSync(logFile, "utf8"))
  : {};

// Function to log device status changes
function logDeviceChange(ip, status) {
  const timestamp = DateTime.now().setZone("Asia/Kolkata").toISO();

  if (!deviceLogs[ip]) {
    deviceLogs[ip] = [];
  }

  const lastLog = deviceLogs[ip].length
    ? deviceLogs[ip][deviceLogs[ip].length - 1]
    : null;

  // Log only if status changes
  if (!lastLog || lastLog.status !== status) {
    deviceLogs[ip].push({ status, timestamp });
    // Prune to last 30 days
    deviceLogs[ip] = pruneOldEntries(deviceLogs[ip], 30);
    fs.writeFileSync(logFile, JSON.stringify(deviceLogs, null, 2));
  }
}

// Ping all devices and log changes
async function pingDevices() {
  for (const ip of devices) {
    try {
      const result = await ping.promise.probe(ip);
      const newStatus = result.alive ? "Online" : "Offline";

      if (deviceStatus[ip] !== newStatus) {
        logDeviceChange(ip, newStatus);
      }
      deviceStatus[ip] = newStatus;
    } catch (error) {
      console.error(`Error pinging ${ip}:`, error);
      deviceStatus[ip] = "Offline";
    }
  }
  console.log("Updated device status:", deviceStatus);
}

// Interval to ping devices every minute
setInterval(pingDevices, 60000);

// API to get real-time device status
app.get("/api/region/devices/status", (req, res) => {
  res.json(deviceStatus);
});

// API to fetch device history for all devices
app.get("/api/devices/history", (req, res) => {
  res.json(deviceLogs);
});

// API to fetch device history region-wise
app.get("/api/region/:region/history", (req, res) => {
  const region = req.params.region;
  const logs = fs.existsSync(logFile)
    ? JSON.parse(fs.readFileSync(logFile, "utf8"))
    : {};

  const regionLogs = {};
  for (const ip in logs) {
    // if you have region info per-device, filter here
    // e.g. if logs[ip].region === region
  }

  if (Object.keys(regionLogs).length === 0) {
    return res.status(404).json({ message: `No device history found for region: ${region}` });
  }

  res.json(regionLogs);
});

// API to fetch history of a specific device by IP address
app.get("/api/device/history/:ip", async (req, res) => {
  const ip = req.params.ip;
  const logs = fs.existsSync(logFile)
    ? JSON.parse(fs.readFileSync(logFile, "utf8"))
    : {};

  if (!logs[ip]) {
    return res.status(404).json({ message: "No history found for this device" });
  }

  // Note: you’ll need to import or reconstruct allData here if you want device metadata
  res.json({ ip, history: logs[ip] });
});

// Start Server
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
  pingDevices(); // Initial ping on startup
});







excelService.js



const fs = require("fs");
const xlsx = require("xlsx");
const path = require("path");
const ping = require("ping");
const pLimit = require("p-limit");
const { DateTime } = require("luxon"); // Import Luxon for timezone handling

// Paths for Excel files
const archiverPath = path.join(__dirname, "../data/ArchiverData.xlsx");
const controllerPath = path.join(__dirname, "../data/ControllerData.xlsx");
const cameraPath = path.join(__dirname, "../data/CameraData.xlsx");
const serverPath = path.join(__dirname, "../data/ServerData.xlsx");

// Log file for device status history
const logFile = "./deviceLogs.json";

// Cache to store preloaded data
let allData = {};

const activeDevices = {}; // Store active monitoring sessions

// Helper: prune entries older than N days
function pruneOldEntries(entries, days = 10) {
  const cutoff = DateTime.now().minus({ days }).toMillis();
  return entries.filter(e => {
    try {
      return DateTime.fromISO(e.timestamp).toMillis() >= cutoff;
    } catch {
      return false;
    }
  });
}
//1
// // Function to load logs
const loadLogs = () =>
  fs.existsSync(logFile)
    ? JSON.parse(fs.readFileSync(logFile, "utf8"))
    : {};

// Save logs, merging and pruning to last 30 days
const saveLogs = (logs) => {
  const existing = fs.existsSync(logFile)
    ? JSON.parse(fs.readFileSync(logFile, "utf8"))
    : {};

  // For each IP in the incoming logs, append and prune
  for (const ip of Object.keys(logs)) {
    const combined = [...(existing[ip] || []), ...logs[ip]];
    existing[ip] = pruneOldEntries(combined, 10);
  }

  fs.writeFileSync(logFile, JSON.stringify(existing, null, 2), "utf8");
};

// Function to normalize column headers
const normalizeHeaders = (data) => {
  return data.map((row) => {
    const normalizedRow = {};
    for (const key in row) {
      const normalizedKey = key.trim().toLowerCase().replace(/\s+/g, '_');
      normalizedRow[normalizedKey] = row[key];
    }
    return normalizedRow;
  });
};

// Function to load Excel data into cache
const loadExcelData = () => {
  if (Object.keys(allData).length === 0) {
    const loadSheet = (filePath) => {
      const workbook = xlsx.readFile(filePath);
      return normalizeHeaders(xlsx.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[0]]));
    };

    allData = {
      archivers: loadSheet(archiverPath),
      controllers: loadSheet(controllerPath),
      cameras: loadSheet(cameraPath),
      servers: loadSheet(serverPath),
    };

    for (const deviceList of Object.values(allData)) {
      deviceList.forEach(device => {
        if (!device.history) {
          device.history = [];
        }
      });
    }

    console.log("Excel Data Loaded:", Object.keys(allData));
  }
};



// Fetch all IP addresses from loaded devices
const fetchAllIpAddress = () => {
  if (!allData || Object.keys(allData).length === 0) {
    console.error("Error: Device data is not loaded.");
    return [];
  }

  return Object.values(allData)
    .flatMap(devices => devices.map(device => device.ip_address).filter(Boolean));
};


const monitorDevice = (device) => {
  const logs = loadLogs();
  const currentTime = DateTime.now().setZone("Asia/Kolkata").toISO();

  if (!logs[device.ip_address]) {
    logs[device.ip_address] = [];
  }

  let lastEntry = logs[device.ip_address].slice(-1)[0];
  if (lastEntry && lastEntry.status === device.status) {
    return; // Avoid duplicate entries
  }

  console.log(`Status changed: ${device.device_name || device.ip_address} is now ${device.status}`);
  logs[device.ip_address].push({ status: device.status, timestamp: currentTime });
  saveLogs(logs);
};


// Update logs for uptime and downtime (also goes through saveLogs)
const updateLogs = (device, status) => {
  const logs = loadLogs();
  const currentTime = DateTime.now().setZone("Asia/Kolkata").toISO();

  logs[device.ip_address] = logs[device.ip_address] || [];
  logs[device.ip_address].push({ status, timestamp: currentTime });

  saveLogs(logs);
};

// Stop tracking when device status changes
const stopTracking = (device) => {
  if (activeDevices[device.ip_address]) {
    clearInterval(activeDevices[device.ip_address]);
    delete activeDevices[device.ip_address];
  }
};

// Function to Ping a Single Device
const pingDevice = (ip) => {
  return new Promise((resolve) => {
    ping.sys.probe(ip, (isAlive) => {
      resolve(isAlive ? "Online" : "Offline");
    });
  });
};

// Function to ping devices and cache results
const cache = new Map();

const pingDevices = async (devices) => {
  const limit = pLimit(10);

  const pingPromises = devices.map((device) =>
    limit(async () => {
      if (!device.ip_address) {
        device.status = "IP Address Missing";
        return;
      }

      if (cache.has(device.ip_address)) {
        device.status = cache.get(device.ip_address);
      } else {
        device.status = await pingDevice(device.ip_address);
        cache.set(device.ip_address, device.status);
      }

      monitorDevice(device);
    })
  );

  await Promise.all(pingPromises);
};


// Fetch Global Data
const fetchGlobalData = async () => {
  if (!allData || Object.keys(allData).length === 0) {
    console.error("Error: Device data is not loaded.");
    return null;
  }

  const allDevices = [
    ...allData.cameras,
    ...allData.archivers,
    ...allData.controllers,
    ...allData.servers
  ];

  await pingDevices(allDevices);
  const summary = calculateSummary(allData);

  return { summary, details: allData };
};







// Fetch Region Data
const fetchRegionData = async (regionName) => {
  if (!allData || Object.keys(allData).length === 0) {
    console.error("Error: Device data is not loaded.");
    return null;
  }

  const filterByRegion = (devices) =>
    devices.filter(device => device.location?.toLowerCase() === regionName.toLowerCase());

  const regionDevices = {
    cameras: filterByRegion(allData.cameras),
    archivers: filterByRegion(allData.archivers),
    controllers: filterByRegion(allData.controllers),
    servers: filterByRegion(allData.servers),
  };

  await pingDevices([
    ...regionDevices.cameras,
    ...regionDevices.archivers,
    ...regionDevices.controllers,
    ...regionDevices.servers
  ]);

  const summary = calculateSummary(regionDevices);
  return { summary, details: regionDevices };
};

// Calculate summary of devices
const calculateSummary = (devices) => {
  const summary = {};

  for (const [key, deviceList] of Object.entries(devices)) {
    const total = deviceList.length;
    const online = deviceList.filter(device => device.status === "Online").length;
    const offline = total - online;

    summary[key] = { total, online, offline };
  }

  return {
    totalDevices: Object.values(summary).reduce((sum, { total }) => sum + total, 0),
    totalOnlineDevices: Object.values(summary).reduce((sum, { online }) => sum + online, 0),
    totalOfflineDevices: Object.values(summary).reduce((sum, { offline }) => sum + offline, 0),
    ...summary,
  };
};

// Helper function to compute uptime and downtime for a device
const computeDeviceStats = (history) => {
  let uptime = 0, downtime = 0, downtimeDuration = 0;
  let lastStatus = history[0]?.status || "Offline";
  let lastTimestamp = history[0]
    ? DateTime.fromISO(history[0].timestamp).toMillis()
    : DateTime.now().toMillis();

  for (let i = 1; i < history.length; i++) {
    const currentStatus = history[i].status;
    const currentTime = DateTime.fromISO(history[i].timestamp).toMillis();
    const timeDiff = (currentTime - lastTimestamp) / 60000; // minutes

    if (timeDiff > 0) {
      if (lastStatus === "Online") uptime += timeDiff;
      else downtime += timeDiff;

      if (lastStatus === "Offline" && currentStatus === "Online") {
        downtimeDuration += downtime;
        downtime = 0;
      }
    }

    lastStatus = currentStatus;
    lastTimestamp = currentTime;
  }

  const formatTime = (minutes) => {
    const days = Math.floor(minutes / 1440);
    const hours = Math.floor((minutes % 1440) / 60);
    const mins = Math.floor(minutes % 60);
    return `${days}d ${hours}h ${mins}m`;
  };

  return {
    uptime: formatTime(uptime),
    downtime: formatTime(downtime),
    downtimeDuration: formatTime(downtimeDuration)
  };
};

// Fetch Device History
const fetchDeviceHistory = async (device) => {
  const devicesLogs = fs.existsSync(logFile)
    ? JSON.parse(fs.readFileSync(logFile, "utf8"))
    : {};

  if (!devicesLogs[device.ip_address]) {
    console.log(`No history found for device: ${device.device_name || "Unknown"} (${device.ip_address})`);
    return;
  }

  device.history = [];
  devicesLogs[device.ip_address].forEach(log => {
    const convertedTimestamp = DateTime.fromISO(log.timestamp, { zone: 'utc' })
      .setZone('Asia/Kolkata')
      .toISO();

    device.history.push({
      status: log.status,
      timestamp: convertedTimestamp
    });
  });

  console.log(`Device history for ${device.device_name} (${device.ip_address}):`, device.history);
};

// Preload Data
loadExcelData();

module.exports = { fetchGlobalData, fetchRegionData, fetchAllIpAddress };




regionController.js


const { fetchGlobalData, fetchRegionData} = require("../services/excelService");


// Global Summary Controller
const getGlobalSummary = async (req, res) => {
    try {
        const globalData = await fetchGlobalData();
        res.status(200).json({ summary: globalData.summary });
    } catch (error) {
        res.status(500).json({ error: "Internal server error", details: error.message });
    }
};

// Global Details Controller
const getGlobalDetails = async (req, res) => {
    try {
        const globalData = await fetchGlobalData();
        res.status(200).json({ details: globalData.details });
    } catch (error) {
        res.status(500).json({ error: "Internal server error", details: error.message });
    }
};

// Region Summary Controller
const getRegionSummary = async (req, res) => {
    const { regionName } = req.params;
    try {
        const regionData = await fetchRegionData(regionName);
        res.status(200).json({ summary: regionData.summary });
    } catch (error) {
        res.status(500).json({ error: "Internal server error", details: error.message });
    }
};


// Region Details Controller
const getRegionDetails = async (req, res) => {
    const { regionName } = req.params;
    try {
        const regionData = await fetchRegionData(regionName);
        res.status(200).json({ details: regionData.details });
    } catch (error) {
        res.status(500).json({ error: "Internal server error", details: error.message });
    }
};

module.exports = {
    getGlobalSummary,
    getGlobalDetails,
    getRegionSummary,
    getRegionDetails,
};






regionRoutes.js

//  my code working 
 const express = require("express");
 const {
     getGlobalSummary,
     getGlobalDetails,
     getRegionSummary,
     getRegionDetails,
 } = require("../controllers/regionControllers");
 
 const router = express.Router();
 
 // Global Routes
 router.get("/summary/global", getGlobalSummary);
 router.get("/details/global", getGlobalDetails);
 
 
 // Region Routes
 router.get("/summary/:regionName", getRegionSummary);
 router.get("/details/:regionName", getRegionDetails)
 
 module.exports = router;






