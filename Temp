const fetchRegionTrendData = async (region) => {
    console.log("Fetching trend data for region:", region);

    if (!allData || !allData.cameras) {
        console.error("Error: allData is undefined or missing cameras property");
        return null; // Prevent further errors
    }

    const devices = {
        cameras: allData.cameras
            .filter(device => device.location?.toLowerCase() === region.toLowerCase())
            .map(device => ({
                ...device,
                history: Array.isArray(device.history) ? device.history : [] // Ensure history is an array
            })),
        archivers: allData.archivers
            ? allData.archivers.filter(device => device.location?.toLowerCase() === region.toLowerCase())
            : [],
        controllers: allData.controllers
            ? allData.controllers.filter(device => device.location?.toLowerCase() === region.toLowerCase())
            : [],
        servers: allData.servers
            ? allData.servers.filter(device => device.location?.toLowerCase() === region.toLowerCase())
            : []
    };

    console.log("Devices with History:", JSON.stringify(devices, null, 2));

    if (!devices.cameras.length && !devices.archivers.length && !devices.controllers.length && !devices.servers.length) {
        console.log(`No devices found for region: ${region}`);
        return null;
    }

    // For each device, compute trend and status
    const deviceTrends = calculateDeviceTrends(devices);

    return {
        daily: deviceTrends.daily,
        weekly: deviceTrends.weekly,
        monthly: deviceTrends.monthly,
        devices: devices // Add detailed device information
    };
};

// Modify calculateTrend to include device-specific details
const calculateDeviceTrends = (devices) => {
    const trends = {
        daily: [],
        weekly: [],
        monthly: [],
    };

    // Process each device type
    for (const [deviceType, deviceList] of Object.entries(devices)) {
        deviceList.forEach((device) => {
            const { uptime, downtime, downtimeDuration } = computeDeviceStats(device.history);
            trends.daily.push({
                deviceName: device.device_name,
                uptime,
                downtime,
                downtimeDuration
            });
        });
    }

    return trends;
};




// Controller for fetch trend data
const getRegionTrendDetails = async (req, res) => {
    try {
        const { region } = req.params;
        console.log("Requested Region:", region);

        if (!region) {
            return res.status(400).json({ error: "Region parameter is missing" });
        }

        const trendData = await fetchRegionTrendData(region);
        console.log("Trend Data Response:", JSON.stringify(trendData, null, 2));

        if (!trendData || typeof trendData !== "object") {
            return res.status(500).json({ error: "Failed to fetch trend data" });
        }

        res.json({
            region,
            trends: trendData,
            devices: trendData.devices,  // Include detailed device information in the response
        });
    } catch (error) {
        console.error("Error in getRegionTrendDetails:", error);
        res.status(500).json({ error: "Internal server error", details: error.message });
    }
};











http://localhost/api/regions/trend/details/apac

{
  "region": "apac",
  "trends": {
    "daily": {
      "uptime": 20,
      "downtime": 26,
      "downtimeDuration": 3
    },
    "weekly": {
      "uptime": 84,
      "downtime": 42,
      "downtimeDuration": 0
    },
    "monthly": {
      "uptime": 3,
      "downtime": 31,
      "downtimeDuration": 1
    }
  }
}









regionController.js

const { fetchGlobalData, fetchRegionData, fetchRegionTrendData } = require("../services/excelService");


// Controller for fetch trend data
const getRegionTrendDetails = async (req, res) => {
    try {
        const { region } = req.params;
        console.log("Requested Region:", region);

        if (!region) {
            return res.status(400).json({ error: "Region parameter is missing" });
        }

        const trendData = await fetchRegionTrendData(region);
        console.log("Trend Data Response:", JSON.stringify(trendData, null, 2));

        if (!trendData || typeof trendData !== "object") {
            return res.status(500).json({ error: "Failed to fetch trend data" });
        }

        res.json({
            region,
            trends: trendData
        });
    } catch (error) {
        console.error("Error in getRegionTrendDetails:", error);
        res.status(500).json({ error: "Internal server error", details: error.message });
    }
};




// Global Summary Controller
const getGlobalSummary = async (req, res) => {
    try {
        const globalData = await fetchGlobalData();
        res.status(200).json({ summary: globalData.summary });
    } catch (error) {
        res.status(500).json({ error: "Internal server error", details: error.message });
    }
};

// Global Details Controller
const getGlobalDetails = async (req, res) => {
    try {
        const globalData = await fetchGlobalData();
        res.status(200).json({ details: globalData.details });
    } catch (error) {
        res.status(500).json({ error: "Internal server error", details: error.message });
    }
};

// Region Summary Controller
const getRegionSummary = async (req, res) => {
    const { regionName } = req.params;
    try {
        const regionData = await fetchRegionData(regionName);
        res.status(200).json({ summary: regionData.summary });
    } catch (error) {
        res.status(500).json({ error: "Internal server error", details: error.message });
    }
};

// Region Details Controller
const getRegionDetails = async (req, res) => {
    const { regionName } = req.params;
    try {
        const regionData = await fetchRegionData(regionName);
        res.status(200).json({ details: regionData.details });
    } catch (error) {
        res.status(500).json({ error: "Internal server error", details: error.message });
    }
};

module.exports = {
    getGlobalSummary,
    getGlobalDetails,
    getRegionSummary,
    getRegionDetails,
    getRegionTrendDetails,
};


regionRoutes.js


 const express = require("express");
 const {
     getGlobalSummary,
     getGlobalDetails,
     getRegionSummary,
     getRegionDetails,
     getRegionTrendDetails,
 } = require("../controllers/regionControllers");
 
 const router = express.Router();
 
 // Global Routes
 router.get("/summary/global", getGlobalSummary);
 router.get("/details/global", getGlobalDetails);
 
 
 // Region Routes
 router.get("/summary/:regionName", getRegionSummary);
 router.get("/details/:regionName", getRegionDetails);
 router.get("/trend/details/:regionName",getRegionTrendDetails);
 
 module.exports = router;


excelService.js

const xlsx = require("xlsx");
const path = require("path");
const ping = require("ping");

// Paths for Excel files
const archiverPath = path.join(__dirname, "../data/ArchiverData.xlsx");
const controllerPath = path.join(__dirname, "../data/ControllerData.xlsx");
const cameraPath = path.join(__dirname, "../data/CameraData.xlsx");
const serverPath = path.join(__dirname, "../data/ServerData.xlsx");

// Cache to store preloaded data
let allData = {};

// Function to normalize column headers
const normalizeHeaders = (data) => {
    return data.map((row) => {
        const normalizedRow = {};
        for (const key in row) {
            const normalizedKey = key.trim().toLowerCase().replace(/\s+/g, '_');
            normalizedRow[normalizedKey] = row[key];
        }
        return normalizedRow;
    });
};

const loadExcelData = () => {
    if (Object.keys(allData).length === 0) { // Load only if not already loaded
        const archiverWorkbook = xlsx.readFile(archiverPath);
        const controllerWorkbook = xlsx.readFile(controllerPath);
        const cameraWorkbook = xlsx.readFile(cameraPath);
        const serverWorkbook = xlsx.readFile(serverPath);

        allData = {
            archivers: normalizeHeaders(xlsx.utils.sheet_to_json(archiverWorkbook.Sheets[archiverWorkbook.SheetNames[0]])),
            controllers: normalizeHeaders(xlsx.utils.sheet_to_json(controllerWorkbook.Sheets[controllerWorkbook.SheetNames[0]])),
            cameras: normalizeHeaders(xlsx.utils.sheet_to_json(cameraWorkbook.Sheets[cameraWorkbook.SheetNames[0]])),
            servers: normalizeHeaders(xlsx.utils.sheet_to_json(serverWorkbook.Sheets[serverWorkbook.SheetNames[0]])),
        };
        console.log("Excel Data Loaded.");
    }
};

// Function to compute global summary and details
const fetchAllIpAddress = () => {
    const devices = {
        cameras: allData.cameras,
        archivers: allData.archivers,
        controllers: allData.controllers,
        servers: allData.servers,
    };

    merged = [...devices.cameras , ...devices.archivers, ...devices.controllers, ...devices.servers]
    //console.log("Hi ", merged)
    addresses =  merged.map(myfunc)
    console.log(addresses)
    return addresses
    
}
const myfunc= (x) => {
    return x.ip_address
}

const fetchGlobalData = async () => {
    const devices = {
        cameras: allData.cameras,
        archivers: allData.archivers,
        controllers: allData.controllers,
        servers: allData.servers,
    };

    // Ping all devices
    await pingDevices([...devices.cameras, ...devices.archivers, ...devices.controllers, ...devices.servers]);

    const summary = calculateSummary(devices);
    return { summary, details: devices };
};



// Function to compute region summary and details
const fetchRegionData = async (regionName) => {
    const devices = {
        cameras: allData.cameras.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
        archivers: allData.archivers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
        controllers: allData.controllers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
        servers: allData.servers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
    };

    // Ping all devices
    await pingDevices([...devices.cameras, ...devices.archivers, ...devices.controllers, ...devices.servers]);

    const summary = calculateSummary(devices);
    return { summary, details: devices };
};

// Helper function to calculate detailed summary
const calculateSummary = (devices) => {
    const summary = {};

    for (const [key, deviceList] of Object.entries(devices)) {
        const total = deviceList.length;
        const online = deviceList.filter(device => device.status === "Online").length;
        const offline = total - online;

        summary[key] = { total, online, offline };
    }

    return {
        totalDevices: Object.values(summary).reduce((sum, { total }) => sum + total, 0),
        totalOnlineDevices: Object.values(summary).reduce((sum, { online }) => sum + online, 0),
        totalOfflineDevices: Object.values(summary).reduce((sum, { offline }) => sum + offline, 0),
        ...summary,
    };
};

const pLimit = require("p-limit");

const cache = new Map(); // Stores device status temporarily
const pingDevices = async (devices) => {
    const limit = pLimit(10); // Reduce concurrent ping requests to 10
    const pingPromises = devices.map((device) =>
        limit(async () => {
            const ipAddress = device.ip_address;
            if (cache.has(ipAddress)) {
                device.status = cache.get(ipAddress); // Use cached status
            } else {
                device.status = ipAddress ? await pingDevice(ipAddress) : "IP Address Missing";
                cache.set(ipAddress, device.status); // Store result in cache
            }
        })
    );

    await Promise.all(pingPromises);
};

// Function to ping a single device
const pingDevice = (ip) => {
    return new Promise((resolve) => {
        ping.sys.probe(ip, (isAlive) => {
            resolve(isAlive ? "Online" : "Offline");
        });
    });
};




// function to fetch trend
const fetchRegionTrendData = async (region) => {
    console.log("Fetching trend data for region:", region);

    if (!allData || !allData.cameras) {
        console.error("Error: allData is undefined or missing cameras property");
        return null; // Prevent further errors
    }

    const devices = {
        cameras: allData.cameras
            .filter(device => device.location?.toLowerCase() === region.toLowerCase())
            .map(device => ({
                ...device,
                history: Array.isArray(device.history) ? device.history : [] // Ensure history is an array
            })),
        archivers: allData.archivers
            ? allData.archivers.filter(device => device.location?.toLowerCase() === region.toLowerCase())
            : [],
        controllers: allData.controllers
            ? allData.controllers.filter(device => device.location?.toLowerCase() === region.toLowerCase())
            : [],
        servers: allData.servers
            ? allData.servers.filter(device => device.location?.toLowerCase() === region.toLowerCase())
            : []
    };

    console.log("Devices with History:", JSON.stringify(devices, null, 2));

    if (!devices.cameras.length && !devices.archivers.length && !devices.controllers.length && !devices.servers.length) {
        console.log(`No devices found for region: ${region}`);
        return null;
    }

    return {
        daily: calculateTrend(devices, "daily"),
        weekly: calculateTrend(devices, "weekly"),
        monthly: calculateTrend(devices, "monthly"),
    };
};

const calculateTrend = (devices, period) => {
    return {
        uptime: Math.floor(Math.random() * 100),  // Replace with actual calculation logic
        downtime: Math.floor(Math.random() * 50),
        downtimeDuration: Math.floor(Math.random() * 10),
    };
};

// 

// Function to track uptime/downtime
const trackUptimeDowntime = (devices, region) => {
    return devices
    
        .filter(device => device.location?.toLowerCase() === region.toLowerCase())
        .map(device => {
            const { uptime, downtime, downtimeDuration } = computeDeviceStats(device.history);
            return {
                deviceName: device.device_name || "Unknown",
                ipAddress: device.ip_address,
                uptime,
                downtime,
                downtimeDuration
            };
        });
};

// Compute device uptime and downtime
const computeDeviceStats = (history) => {
    if (!Array.isArray(history) || history.length === 0) {
        console.log("No history data found for device");
        return { uptime: 0, downtime: 0, downtimeDuration: 0 };
    }

    let uptime = 0, downtime = 0, downtimeDuration = 0;
    let lastStatus = null;
    let lastTimestamp = null;

    history.forEach((log, index) => {
        let currentTime = new Date(log.timestamp).getTime();

        // Debugging: Log the log details
        console.log(`Log ${index}: Status: ${log.status}, Timestamp: ${log.timestamp}`);

        // Skip the first entry since there's no previous log to compare
        if (index > 0 && lastTimestamp) {
            let timeDiff = (currentTime - lastTimestamp) / 60000; // Convert ms to minutes

            // Debugging: Log time difference
            console.log(`Time Difference (in minutes) between logs: ${timeDiff}`);

            if (lastStatus === "online") {
                uptime += timeDiff; // Add uptime duration
            } else if (lastStatus === "offline") {
                downtime += timeDiff; // Add downtime duration
                downtimeDuration++;
            }
        }

        lastStatus = log.status;
        lastTimestamp = currentTime;
    });

    // Debugging: Log final uptime and downtime
    console.log(`Final Uptime: ${uptime} minutes, Downtime: ${downtime} minutes, Downtime Duration: ${downtimeDuration}`);

    return { uptime: Math.round(uptime), downtime: Math.round(downtime), downtimeDuration };
};


// Preload data
loadExcelData();

module.exports = { fetchGlobalData, fetchRegionData, fetchAllIpAddress, fetchRegionTrendData};


app.js

require("dotenv").config();
const express = require("express");
const cors = require("cors");
const bodyParser = require("body-parser");
const fs = require("fs");
const ping = require("ping");
const regionRoutes = require("./routes/regionRoutes");
const { fetchAllIpAddress } = require("./services/excelService");

const app = express();
const PORT = process.env.PORT || 80;




// Middleware
app.use(
  cors({
    origin: "http://127.0.0.1:5500", 
    methods: "GET,POST,PUT,DELETE",
    allowedHeaders: "Content-Type,Authorization",
  })
);
app.use(bodyParser.json());

// Routes
app.use("/api/regions", regionRoutes);

// Device Status Tracking
const devices = fetchAllIpAddress();
let deviceStatus = {};
const logFile = "./deviceLogs.json";

// Load previous logs if exists
let deviceLogs = fs.existsSync(logFile) ? JSON.parse(fs.readFileSync(logFile)) : {};

// Function to log device status changes
function logDeviceChange(ip, status) {
  const timestamp = new Date().toISOString();
  
  if (!deviceLogs[ip]) {
    deviceLogs[ip] = [];
  }

  const lastLog = deviceLogs[ip].length ? deviceLogs[ip][deviceLogs[ip].length - 1] : null;
  
  if (!lastLog || lastLog.status !== status) {
    deviceLogs[ip].push({ status, timestamp });
    fs.writeFileSync(logFile, JSON.stringify(deviceLogs, null, 2)); 
  }
}

// Ping all devices and log changes
async function pingDevices() {
  for (const ip of devices) {
    try {
      const result = await ping.promise.probe(ip);
      const newStatus = result.alive ? "Online" : "Offline";

      if (deviceStatus[ip] !== newStatus) {
        logDeviceChange(ip, newStatus);
      }
      deviceStatus[ip] = newStatus;
    } catch (error) {
      console.error(`Error pinging ${ip}:`, error);
      deviceStatus[ip] = "Offline";
    }
  }
  console.log("Updated device status:", deviceStatus);
}

// Ping devices every 30 seconds
setInterval(pingDevices, 30000);

// API to get real-time device status
app.get("/api/region/devices/status", (req, res) => {
  res.json(deviceStatus);
});


