const fetchRegionTrendData = async (regionName) => {
    console.log("Region being filtered: ", regionName);

    if (!regionName) {
        console.error("Error: regionName is undefined or empty!");
        return { error: "Invalid region name" };
    }

    // Normalize the region name
    const normalizedRegion = regionName.trim().toLowerCase();

    // Filter devices by region
    const devices = {
        cameras: allData.cameras.filter(device => {
            if (!device.location) {
                console.warn(`Camera device missing location:`, device);
                return false; // Skip devices with no location
            }
            return device.location.trim().toLowerCase() === normalizedRegion;
        }),
        archivers: allData.archivers.filter(device => {
            if (!device.location) {
                console.warn(`Archiver device missing location:`, device);
                return false;
            }
            return device.location.trim().toLowerCase() === normalizedRegion;
        }),
        controllers: allData.controllers.filter(device => {
            if (!device.location) {
                console.warn(`Controller device missing location:`, device);
                return false;
            }
            return device.location.trim().toLowerCase() === normalizedRegion;
        }),
        servers: allData.servers.filter(device => {
            if (!device.location) {
                console.warn(`Server device missing location:`, device);
                return false;
            }
            return device.location.trim().toLowerCase() === normalizedRegion;
        }),
    };

    console.log("Filtered devices: ", devices);

    // If no devices are found, log the issue
    if (Object.values(devices).every(arr => arr.length === 0)) {
        console.error("No devices found for region:", regionName);
        return { error: `No devices found for region: ${regionName}` };
    }

    // Create an object to store trend data for each device
    const deviceTrends = {};

    // Iterate over each device list and calculate trends
    for (const deviceType in devices) {
        devices[deviceType].forEach(device => {
            deviceTrends[device.ip_address] = {
                daily: calculateTrendForDevice(device, "daily"),
                weekly: calculateTrendForDevice(device, "weekly"),
                monthly: calculateTrendForDevice(device, "monthly")
            };
        });
    }

    return { devices: deviceTrends };
};












RegionController.js


const { fetchGlobalData, fetchRegionData } = require("../services/excelService");

// Global Summary Controller
const getGlobalSummary = async (req, res) => {
    try {
        const globalData = await fetchGlobalData();
        res.status(200).json({ summary: globalData.summary });
    } catch (error) {
        res.status(500).json({ error: "Internal server error", details: error.message });
    }
};

// Global Details Controller
const getGlobalDetails = async (req, res) => {
    try {
        const globalData = await fetchGlobalData();
        res.status(200).json({ details: globalData.details });
    } catch (error) {
        res.status(500).json({ error: "Internal server error", details: error.message });
    }
};

// Region Summary Controller
const getRegionSummary = async (req, res) => {
    const { regionName } = req.params;
    try {
        const regionData = await fetchRegionData(regionName);
        res.status(200).json({ summary: regionData.summary });
    } catch (error) {
        res.status(500).json({ error: "Internal server error", details: error.message });
    }
};

// Region Details Controller
const getRegionDetails = async (req, res) => {
    const { regionName } = req.params;
    try {
        const regionData = await fetchRegionData(regionName);
        res.status(200).json({ details: regionData.details });
    } catch (error) {
        res.status(500).json({ error: "Internal server error", details: error.message });
    }
};

module.exports = {
    getGlobalSummary,
    getGlobalDetails,
    getRegionSummary,
    getRegionDetails,
};


RegionRoutes.js


 const express = require("express");
 const {
     getGlobalSummary,
     getGlobalDetails,
     getRegionSummary,
     getRegionDetails,
 } = require("../controllers/regionControllers");
 
 const router = express.Router();
 
 // Global Routes
 router.get("/summary/global", getGlobalSummary);
 router.get("/details/global", getGlobalDetails);
 
 // Region Routes
 router.get("/summary/:regionName", getRegionSummary);
 router.get("/details/:regionName", getRegionDetails);
 
 module.exports = router;




excelservice.js

const xlsx = require("xlsx");
const path = require("path");
const ping = require("ping");

// Paths for Excel files
const archiverPath = path.join(__dirname, "../data/ArchiverData.xlsx");
const controllerPath = path.join(__dirname, "../data/ControllerData.xlsx");
const cameraPath = path.join(__dirname, "../data/CameraData.xlsx");
const serverPath = path.join(__dirname, "../data/ServerData.xlsx");

// Cache to store preloaded data
let allData = {};

// Function to normalize column headers
const normalizeHeaders = (data) => {
    return data.map((row) => {
        const normalizedRow = {};
        for (const key in row) {
            const normalizedKey = key.trim().toLowerCase().replace(/\s+/g, '_');
            normalizedRow[normalizedKey] = row[key];
        }
        return normalizedRow;
    });
};

const loadExcelData = () => {
    if (Object.keys(allData).length === 0) { // Load only if not already loaded
        const archiverWorkbook = xlsx.readFile(archiverPath);
        const controllerWorkbook = xlsx.readFile(controllerPath);
        const cameraWorkbook = xlsx.readFile(cameraPath);
        const serverWorkbook = xlsx.readFile(serverPath);

        allData = {
            archivers: normalizeHeaders(xlsx.utils.sheet_to_json(archiverWorkbook.Sheets[archiverWorkbook.SheetNames[0]])),
            controllers: normalizeHeaders(xlsx.utils.sheet_to_json(controllerWorkbook.Sheets[controllerWorkbook.SheetNames[0]])),
            cameras: normalizeHeaders(xlsx.utils.sheet_to_json(cameraWorkbook.Sheets[cameraWorkbook.SheetNames[0]])),
            servers: normalizeHeaders(xlsx.utils.sheet_to_json(serverWorkbook.Sheets[serverWorkbook.SheetNames[0]])),
        };
        console.log("Excel Data Loaded.");
    }
};

// Function to compute global summary and details
const fetchAllIpAddress = () => {
    const devices = {
        cameras: allData.cameras,
        archivers: allData.archivers,
        controllers: allData.controllers,
        servers: allData.servers,
    };

    merged = [...devices.cameras , ...devices.archivers, ...devices.controllers, ...devices.servers]
    //console.log("Hi ", merged)
    addresses =  merged.map(myfunc)
    console.log(addresses)
    return addresses
    
}
const myfunc= (x) => {
    return x.ip_address
}

const fetchGlobalData = async () => {
    const devices = {
        cameras: allData.cameras,
        archivers: allData.archivers,
        controllers: allData.controllers,
        servers: allData.servers,
    };

    // Ping all devices
    await pingDevices([...devices.cameras, ...devices.archivers, ...devices.controllers, ...devices.servers]);

    const summary = calculateSummary(devices);
    return { summary, details: devices };
};

// Function to compute region summary and details
const fetchRegionData = async (regionName) => {
    const devices = {
        cameras: allData.cameras.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
        archivers: allData.archivers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
        controllers: allData.controllers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
        servers: allData.servers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
    };

    // Ping all devices
    await pingDevices([...devices.cameras, ...devices.archivers, ...devices.controllers, ...devices.servers]);

    const summary = calculateSummary(devices);
    return { summary, details: devices };
};

// Helper function to calculate detailed summary
const calculateSummary = (devices) => {
    const summary = {};

    for (const [key, deviceList] of Object.entries(devices)) {
        const total = deviceList.length;
        const online = deviceList.filter(device => device.status === "Online").length;
        const offline = total - online;

        summary[key] = { total, online, offline };
    }

    return {
        totalDevices: Object.values(summary).reduce((sum, { total }) => sum + total, 0),
        totalOnlineDevices: Object.values(summary).reduce((sum, { online }) => sum + online, 0),
        totalOfflineDevices: Object.values(summary).reduce((sum, { offline }) => sum + offline, 0),
        ...summary,
    };
};

const pLimit = require("p-limit");

const cache = new Map(); // Stores device status temporarily
const pingDevices = async (devices) => {
    const limit = pLimit(10); // Reduce concurrent ping requests to 10
    const pingPromises = devices.map((device) =>
        limit(async () => {
            const ipAddress = device.ip_address;
            if (cache.has(ipAddress)) {
                device.status = cache.get(ipAddress); // Use cached status
            } else {
                device.status = ipAddress ? await pingDevice(ipAddress) : "IP Address Missing";
                cache.set(ipAddress, device.status); // Store result in cache
            }
        })
    );

    await Promise.all(pingPromises);
};

// Function to ping a single device
const pingDevice = (ip) => {
    return new Promise((resolve) => {
        ping.sys.probe(ip, (isAlive) => {
            resolve(isAlive ? "Online" : "Offline");
        });
    });
};

// Preload data
loadExcelData();

module.exports = { fetchGlobalData, fetchRegionData, fetchAllIpAddress };


app.js


require("dotenv").config();
const express = require("express");
const cors = require("cors");
const bodyParser = require("body-parser");
const regionRoutes = require("./routes/regionRoutes");
const ping = require("ping"); // Import the ping module

const app = express();
const PORT = process.env.PORT || 80;

const { fetchAllIpAddress } = require("./services/excelService");

// Middleware
app.use(
  cors({
    origin: "http://127.0.0.1:5500", // Match your frontend's origin
    methods: "GET,POST,PUT,DELETE",
    allowedHeaders: "Content-Type,Authorization",
  })
);
app.use(bodyParser.json());

// Routes
app.use("/api/regions", regionRoutes);

// Ping a specific device dynamically
app.get("/api/ping/:ip", async (req, res) => {
  const ip = req.params.ip;
  
  try {
    const result = await ping.promise.probe(ip);
    res.json({ ip, status: result.alive ? "Online" : "Offline" });
  } catch (error) {
    console.error(`Ping error for ${ip}:`, error);
    res.json({ ip, status: "Offline" });
  }
});

// Function to continuously ping all devices
const devices = fetchAllIpAddress();
let deviceStatus = {};

async function pingDevices() {
  for (const ip of devices) {
    try {
      const result = await ping.promise.probe(ip);
      deviceStatus[ip] = result.alive ? "Online" : "Offline";
    } catch (error) {
      console.error(`Error pinging ${ip}:`, error);
      deviceStatus[ip] = "Offline";
    }
  }
  console.log("Updated device status:", deviceStatus);
}

// Ping devices every 30 seconds
setInterval(pingDevices, 30000);

// Get real-time status of all devices
app.get("/api/region/devices/status", (req, res) => {
  res.json(deviceStatus);
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).send("Something went wrong!");
});


// Start Server
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
  pingDevices(); // Start pinging devices immediately
});


