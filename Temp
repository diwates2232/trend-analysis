excelService.js



const xlsx = require("xlsx");
const path = require("path");
const ping = require("ping");

// Paths for Excel files
const archiverPath = path.join(__dirname, "../data/ArchiverData.xlsx");
const controllerPath = path.join(__dirname, "../data/ControllerData.xlsx");
const cameraPath = path.join(__dirname, "../data/CameraData.xlsx");
const serverPath = path.join(__dirname, "../data/ServerData.xlsx");

// Cache to store preloaded data
let allData = {};

// Function to normalize column headers
const normalizeHeaders = (data) => {
    return data.map((row) => {
        const normalizedRow = {};
        for (const key in row) {
            const normalizedKey = key.trim().toLowerCase().replace(/\s+/g, '_');
            normalizedRow[normalizedKey] = row[key];
        }
        return normalizedRow;
    });
};

const loadExcelData = () => {
    if (Object.keys(allData).length === 0) { // Load only if not already loaded
        const archiverWorkbook = xlsx.readFile(archiverPath);
        const controllerWorkbook = xlsx.readFile(controllerPath);
        const cameraWorkbook = xlsx.readFile(cameraPath);
        const serverWorkbook = xlsx.readFile(serverPath);

        allData = {
            archivers: normalizeHeaders(xlsx.utils.sheet_to_json(archiverWorkbook.Sheets[archiverWorkbook.SheetNames[0]])),
            controllers: normalizeHeaders(xlsx.utils.sheet_to_json(controllerWorkbook.Sheets[controllerWorkbook.SheetNames[0]])),
            cameras: normalizeHeaders(xlsx.utils.sheet_to_json(cameraWorkbook.Sheets[cameraWorkbook.SheetNames[0]])),
            servers: normalizeHeaders(xlsx.utils.sheet_to_json(serverWorkbook.Sheets[serverWorkbook.SheetNames[0]])),
        };
        console.log("Excel Data Loaded.");
    }
};

// Function to fetch all IP addresses
const fetchAllIpAddress = () => {
    const devices = {
        cameras: allData.cameras,
        archivers: allData.archivers,
        controllers: allData.controllers,
        servers: allData.servers,
    };

    merged = [...devices.cameras , ...devices.archivers, ...devices.controllers, ...devices.servers];
    addresses = merged.map(device => device.ip_address);
    return addresses;
};

// Function to compute global summary and details
const fetchGlobalData = async () => {
    const devices = {
        cameras: allData.cameras,
        archivers: allData.archivers,
        controllers: allData.controllers,
        servers: allData.servers,
    };

    await pingDevices([...devices.cameras, ...devices.archivers, ...devices.controllers, ...devices.servers]);

    const summary = calculateSummary(devices);
    return { summary, details: devices };
};

// Function to compute region summary and details
const fetchRegionData = async (regionName) => {
    const devices = {
        cameras: allData.cameras.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
        archivers: allData.archivers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
        controllers: allData.controllers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
        servers: allData.servers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
    };

    await pingDevices([...devices.cameras, ...devices.archivers, ...devices.controllers, ...devices.servers]);

    const summary = calculateSummary(devices);
    return { summary, details: devices };
};

// Helper function to calculate detailed summary
const calculateSummary = (devices) => {
    const summary = {};

    for (const [key, deviceList] of Object.entries(devices)) {
        const total = deviceList.length;
        const online = deviceList.filter(device => device.status === "Online").length;
        const offline = total - online;

        summary[key] = { total, online, offline };
    }

    return {
        totalDevices: Object.values(summary).reduce((sum, { total }) => sum + total, 0),
        totalOnlineDevices: Object.values(summary).reduce((sum, { online }) => sum + online, 0),
        totalOfflineDevices: Object.values(summary).reduce((sum, { offline }) => sum + offline, 0),
        ...summary,
    };
};

const pLimit = require("p-limit");

const cache = new Map(); // Stores device status temporarily
let deviceDowntimeData = {}; // Stores downtime and uptime information for devices

// Monitor devices' status over time and track downtime/uptime
const pingDevices = async (devices) => {
    const limit = pLimit(10); // Reduce concurrent ping requests to 10
    const pingPromises = devices.map((device) =>
        limit(async () => {
            const ipAddress = device.ip_address;
            const currentTime = new Date().getTime();
            if (cache.has(ipAddress)) {
                device.status = cache.get(ipAddress); // Use cached status
            } else {
                device.status = ipAddress ? await pingDevice(ipAddress) : "IP Address Missing";
                cache.set(ipAddress, device.status); // Store result in cache
            }

            // Track downtime and uptime for devices that go offline for more than 5 minutes
            if (device.status === "Offline") {
                if (deviceDowntimeData[ipAddress]) {
                    const lastOfflineTime = deviceDowntimeData[ipAddress].lastOfflineTime;
                    if (currentTime - lastOfflineTime > 300000) { // More than 5 minutes of downtime
                        deviceDowntimeData[ipAddress].downtime += 5; // Adding 5 minutes
                    }
                } else {
                    deviceDowntimeData[ipAddress] = { downtime: 5, lastOfflineTime: currentTime }; // Initialize with 5 minutes of downtime
                }
            } else {
                if (deviceDowntimeData[ipAddress]) {
                    deviceDowntimeData[ipAddress].uptime += 5; // Adding 5 minutes of uptime
                } else {
                    deviceDowntimeData[ipAddress] = { uptime: 5 }; // Initialize with 5 minutes of uptime
                }
            }
        })
    );

    await Promise.all(pingPromises);
};

// Function to ping a single device
const pingDevice = (ip) => {
    return new Promise((resolve) => {
        ping.sys.probe(ip, (isAlive) => {
            resolve(isAlive ? "Online" : "Offline");
        });
    });
};

// Preload data
loadExcelData();

// Endpoint to fetch downtime/uptime data
const fetchDeviceUptimeData = () => {
    return deviceDowntimeData;
};

module.exports = { fetchGlobalData, fetchRegionData, fetchAllIpAddress, fetchDeviceUptimeData, loadExcelData,allData };






regionController.js



const { fetchGlobalData, fetchRegionData, fetchDeviceUptimeData } = require("../services/excelService");

// Global Summary Controller
const getGlobalSummary = async (req, res) => {
    try {
        const globalData = await fetchGlobalData();
        res.status(200).json({ summary: globalData.summary });
    } catch (error) {
        res.status(500).json({ error: "Internal server error", details: error.message });
    }
};

// Global Details Controller
const getGlobalDetails = async (req, res) => {
    try {
        const globalData = await fetchGlobalData();
        res.status(200).json({ details: globalData.details });
    } catch (error) {
        res.status(500).json({ error: "Internal server error", details: error.message });
    }
};

// Region Summary Controller
const getRegionSummary = async (req, res) => {
    const { regionName } = req.params;
    try {
        const regionData = await fetchRegionData(regionName);
        res.status(200).json({ summary: regionData.summary });
    } catch (error) {
        res.status(500).json({ error: "Internal server error", details: error.message });
    }
};

// Region Details Controller
const getRegionDetails = async (req, res) => {
    const { regionName } = req.params;
    try {
        const regionData = await fetchRegionData(regionName);
        res.status(200).json({ details: regionData.details });
    } catch (error) {
        res.status(500).json({ error: "Internal server error", details: error.message });
    }
};

// Fetch Device Uptime/Downtime Summary
const getDeviceUptimeSummary = async (req, res) => {
    try {
        const uptimeData = fetchDeviceUptimeData();
        res.status(200).json({ uptimeData });
    } catch (error) {
        res.status(500).json({ error: "Internal server error", details: error.message });
    }
};

module.exports = {
    getGlobalSummary,
    getGlobalDetails,
    getRegionSummary,
    getRegionDetails,
    getDeviceUptimeSummary
};






regionRoutes.js



 const express = require("express");
const {
    getGlobalSummary,
    getGlobalDetails,
    getRegionSummary,
    getRegionDetails,
    getDeviceUptimeSummary
} = require("../controllers/regionControllers");

const router = express.Router();

// Global Routes
router.get("/summary/global", getGlobalSummary);
router.get("/details/global", getGlobalDetails);

// Region Routes
router.get("/summary/:regionName", getRegionSummary);
router.get("/details/:regionName", getRegionDetails);

// Device Uptime/Downtime Summary
router.get("/uptime-summary", getDeviceUptimeSummary);

module.exports = router;







app.js




require("dotenv").config();
const express = require("express");
const cors = require("cors");
const bodyParser = require("body-parser");
const ping = require("ping");
const regionRoutes = require("./routes/regionRoutes");
const { fetchAllIpAddress } = require("./services/excelService");

const app = express();
const PORT = process.env.PORT || 80;

// Middleware
app.use(cors({
  origin: "http://127.0.0.1:5500", // Match your frontend's origin
  methods: "GET,POST,PUT,DELETE",
  allowedHeaders: "Content-Type,Authorization",
}));
app.use(bodyParser.json());

// Routes
app.use("/api/regions", regionRoutes);

// Store device statuses and downtime tracking
const devices = fetchAllIpAddress();
let deviceStatus = {};
let downtimeTracking = {}; // { ip: { lastOffline: timestamp, downtimeDuration: minutes } }
let uptimeDowntimeStats = {}; // Store daily, weekly, and monthly uptime/downtime

// Function to get the current date, week, and month keys
const getDateKeys = () => {
  const now = new Date();
  const day = now.toISOString().split("T")[0]; // YYYY-MM-DD format
  const week = Math.ceil(now.getDate() / 7); // Week number in the month
  const month = now.getMonth() + 1; // Month number
  return { day, week, month };
};

// Function to update device status and track downtime/uptime
async function pingDevices() {
  const { day, week, month } = getDateKeys();

  for (const ip of devices) {
    try {
      const result = await ping.promise.probe(ip);
      const isOnline = result.alive;
      
      if (!uptimeDowntimeStats[ip]) {
        uptimeDowntimeStats[ip] = { daily: {}, weekly: {}, monthly: {} };
      }

      // Initialize if not present
      if (!uptimeDowntimeStats[ip].daily[day]) {
        uptimeDowntimeStats[ip].daily[day] = { uptime: 0, downtime: 0, downtimeDuration: 0 };
      }
      if (!uptimeDowntimeStats[ip].weekly[week]) {
        uptimeDowntimeStats[ip].weekly[week] = { uptime: 0, downtime: 0, downtimeDuration: 0 };
      }
      if (!uptimeDowntimeStats[ip].monthly[month]) {
        uptimeDowntimeStats[ip].monthly[month] = { uptime: 0, downtime: 0, downtimeDuration: 0 };
      }

      if (isOnline) {
        // If previously offline, calculate downtime duration
        if (downtimeTracking[ip] && downtimeTracking[ip].lastOffline) {
          const lastOfflineTime = downtimeTracking[ip].lastOffline;
          const downtimeMinutes = Math.floor((Date.now() - lastOfflineTime) / 60000); // Convert ms to minutes

          // Update downtime duration
          uptimeDowntimeStats[ip].daily[day].downtimeDuration += downtimeMinutes;
          uptimeDowntimeStats[ip].weekly[week].downtimeDuration += downtimeMinutes;
          uptimeDowntimeStats[ip].monthly[month].downtimeDuration += downtimeMinutes;

          // Reset tracking
          delete downtimeTracking[ip];
        }

        // Increase uptime count
        uptimeDowntimeStats[ip].daily[day].uptime += 1;
        uptimeDowntimeStats[ip].weekly[week].uptime += 1;
        uptimeDowntimeStats[ip].monthly[month].uptime += 1;
      } else {
        // If the device just went offline, store the timestamp


        if (!downtimeTracking[ip]) {
          // If the device just went offline, start tracking its downtime
          downtimeTracking[ip] = { lastOffline: Date.now(), totalDowntime: 0 };
        } else {
          // Device is still offline, calculate the new duration
          const lastOfflineTime = downtimeTracking[ip].lastOffline;
          const downtimeMinutes = Math.floor((Date.now() - lastOfflineTime) / 60000); // Convert ms to minutes
        
          if (downtimeMinutes > 0) {  // Only update if at least 1 minute has passed
            uptimeDowntimeStats[ip].daily[day].downtimeDuration += downtimeMinutes;
            uptimeDowntimeStats[ip].weekly[week].downtimeDuration += downtimeMinutes;
            uptimeDowntimeStats[ip].monthly[month].downtimeDuration += downtimeMinutes;
        
            // Update total downtime
            downtimeTracking[ip].totalDowntime += downtimeMinutes;
        
            // Update last offline time to the current timestamp (to avoid counting same duration multiple times)
            downtimeTracking[ip].lastOffline = Date.now();
          }
        }


        // Increase downtime count
        uptimeDowntimeStats[ip].daily[day].downtime += 1;
        uptimeDowntimeStats[ip].weekly[week].downtime += 1;
        uptimeDowntimeStats[ip].monthly[month].downtime += 1;
      }

      deviceStatus[ip] = isOnline ? "Online" : "Offline";
    } catch (error) {
      console.error(`Error pinging ${ip}:`, error);
      deviceStatus[ip] = "Offline";
    }
  }

  console.log("Updated device status:", deviceStatus);
}

// Ping devices every 30 seconds
setInterval(pingDevices, 30000);

// Get real-time status of all devices
app.get("/api/devices/status", (req, res) => {
  res.json(deviceStatus);
});




// New endpoint to get downtime/uptime summary
app.get('/api/region/devices/downtime-uptime/:region', (req, res) => {
  const region = req.params.region;
  console.log(`Fetching downtime-uptime data for region: ${region}`);
  
  // Sample response, replace this with actual logic
  res.json({ message: `Data for ${region}`, data: [] });
});




// Ping a specific device dynamically
app.get("/api/ping/:ip", async (req, res) => {
  const ip = req.params.ip;

  try {
    const result = await ping.promise.probe(ip);
    res.json({ ip, status: result.alive ? "Online" : "Offline" });
  } catch (error) {
    console.error(`Ping error for ${ip}:`, error);
    res.json({ ip, status: "Offline" });
  }
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).send("Something went wrong!");
});

// Start Server
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
  pingDevices(); // Start pinging devices immediately
});








