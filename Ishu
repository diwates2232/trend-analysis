function updateRemarks(deviceIp, history) {
    let downtimeEntries = history.filter(entry => entry.status === "Offline");
    let downtimeCount = downtimeEntries.length;
    let totalDowntimeDuration = downtimeEntries.reduce((total, entry) => total + (new Date() - new Date(entry.timestamp)), 0) / 1000;

    totalDowntimeDuration = Math.floor(totalDowntimeDuration / 86400); // Convert to days
    const remarkElement = document.getElementById(`remark-${deviceIp}`);
    let lastStatus = history.length > 0 ? history[history.length - 1].status : "Unknown";

    if (lastStatus === "Offline") {
        if (downtimeCount >= 3 || totalDowntimeDuration > 2) {
            remarkElement.innerText = `Device is Offline, needs repair.`;
        } else {
            remarkElement.innerText = `Device is Offline.`;
        }
    } else if (lastStatus === "Online") {
        if (downtimeCount === 0) {
            remarkElement.innerText = `Device is Online.`; // FIX: No downtime means no count
        } else if (downtimeCount >= 3 || totalDowntimeDuration > 2) {
            remarkElement.innerText = `Device is Online, needs repair.`;
        } else {
            remarkElement.innerText = `Device is Online, its downtime count is ${downtimeCount}.`;
        }
    } else {
        remarkElement.innerText = `Device status unknown.`;
    }
}




function fetchDeviceHistory(regionDetails) {
    fetch(`http://localhost/api/devices/history`)
        .then(response => response.json())
        .then(historyData => {
            populateDeviceTable(regionDetails, historyData);
            window.deviceHistoryData = historyData; // Store history for reuse
        })
        .catch(error => console.error('Error fetching device history:', error));
}

function openDeviceHistory(deviceIp) {
    if (!window.deviceHistoryData) {
        console.error("Device history data not loaded.");
        return;
    }
    const history = window.deviceHistoryData[deviceIp] || [];
    displayDeviceHistory(history);
    document.getElementById('device-history-modal').style.display = 'block';
}






function updateDowntimeCount(deviceIp, history) {
    let downtimeCount = history.filter(entry => entry.status === "Offline").length;
    document.getElementById(`downtime-count-${deviceIp}`).innerText = downtimeCount;

    // FIX: If no downtime, reset remarks to just "Online"
    if (downtimeCount === 0) {
        document.getElementById(`remark-${deviceIp}`).innerText = "Device is Online.";
    } else if (downtimeCount > 3) {
        document.getElementById(`remark-${deviceIp}`).innerText = "Device needs repair";
    }
}


