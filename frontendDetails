Script.js


    const baseUrl = "http://localhost:3000/api/regions";
    let refreshInterval = 300000; // 5 minutes
    let pingInterval = 30000; // 30 seconds
    let countdownTime = refreshInterval / 1000; // Convert to seconds
    let currentRegion = "global";
    let deviceDetailsCache = {}; // Store previous details to prevent redundant updates
    let latestDetails = null; // Cache the latest fetched details
    
    document.addEventListener("DOMContentLoaded", () => {
        fetchData("global"); // Load initial data
        startAutoRefresh("global");
    
        document.querySelectorAll(".region-button").forEach((button) => {
            button.addEventListener("click", () => {
                const region = button.getAttribute("data-region");
                document.getElementById("region-title").textContent = `${region.toUpperCase()} Summary`;
                switchRegion(region);
            });
        });
    
        document.getElementById("close-modal").addEventListener("click", () => {
            document.getElementById("modal").style.display = "none";
        });
    });
    
    function switchRegion(region) {
        clearExistingIntervals(); // Avoid interval duplication
        currentRegion = region;
        deviceDetailsCache = {};
        fetchData(region);
        startAutoRefresh(region);
    }
    
    // **Auto-refresh mechanism**
    function startAutoRefresh(regionName) {
        fetchData(regionName); // Fetch initial data
    
        clearExistingIntervals();
    
        // Start countdown timer
        window.countdownTimer = setInterval(() => {
            document.getElementById("countdown").innerText = `Refreshing in ${countdownTime} seconds`;
            countdownTime--;
            if (countdownTime < 0) countdownTime = refreshInterval / 1000;
        }, 1000);
    
        // Refresh summary & details every 5 minutes
        window.refreshTimer = setInterval(() => {
            fetchData(regionName);
            countdownTime = refreshInterval / 1000;
        }, refreshInterval);
    
        // Ping devices every 30 seconds using history API
        window.pingTimer = setInterval(() => {
            pingAllDevices(regionName);
        }, pingInterval);
    }
    
    function clearExistingIntervals() {
        clearInterval(window.countdownTimer);
        clearInterval(window.refreshTimer);
        clearInterval(window.pingTimer);
    }
    
    // **Fetch summary and details together**
    function fetchData(regionName) {
        Promise.all([
            fetch(`${baseUrl}/summary/${regionName}`).then(res => res.json()),
            fetch(`${baseUrl}/details/${regionName}`).then(res => res.json())
        ])
        .then(([summary, details]) => {
            updateSummary(summary);
    
            if (JSON.stringify(details) !== JSON.stringify(deviceDetailsCache)) {
                updateDetails(details);
                deviceDetailsCache = details; // Update cache
            }
            // Cache details for pinging and modal refresh
            latestDetails = details;
        })
        .catch((error) => console.error("Error fetching data:", error));
    }
        
    /*
       Updated pingAllDevices:
       Instead of calling a non-existent ping endpoint, we now use the history API to fetch 
       device history and update each deviceâ€™s status by updating the separate status dot and text.
    */
    function pingAllDevices(regionName) {
        let details = latestDetails;
        if (!details || !details.details) return;
    
        fetch("http://localhost/api/devices/history")
            .then(response => response.json())
            .then(historyData => {
                let statusChanged = false;
    
                for (const [key, devices] of Object.entries(details.details)) {
                    if (!Array.isArray(devices) || devices.length === 0) continue;
    
                    devices.forEach((device) => {
                        const ip = device.ip_address || "N/A";
                        const card = document.querySelector(`[data-ip="${ip}"]`);
                        if (!card) return;
    
                        // Determine new status from history API if available.
                        const historyArray = historyData[ip];
                        let newStatus = (device.status || "offline").toLowerCase();
                        if (Array.isArray(historyArray) && historyArray.length > 0) {
                            const latestEntry = historyArray[historyArray.length - 1];
                            newStatus = (latestEntry.status || "offline").toLowerCase();
                        }
                        const currentStatus = card.dataset.status;
    
                        // Update UI: update the dot and the text.
                        const statusDot = card.querySelector(".status-dot");
                        const statusText = card.querySelector(".status-text");
                        if (statusDot) {
                            statusDot.style.backgroundColor = (newStatus === "online") ? "green" : "red";
                        } else {
                            console.warn(`Status dot element not found for IP: ${ip}`);
                        }
                        if (statusText) {
                            statusText.textContent = newStatus.charAt(0).toUpperCase() + newStatus.slice(1);
                        } else {
                            console.warn(`Status text element not found for IP: ${ip}`);
                        }
    
                        if (newStatus !== currentStatus) {
                            statusChanged = true;
                            card.dataset.status = newStatus;
                        }
                    });
                }
    
                setTimeout(() => {
                    if (statusChanged) {
                        fetchData(regionName);
                    }
                }, 5000);
            })
            .catch(error => {
                console.error("Error fetching device history:", error);
            });
    }
    
    function updateSummary(data) {
        document.getElementById("total-devices").textContent = data.summary?.totalDevices || "0";
        document.getElementById("online-devices").textContent = data.summary?.totalOnlineDevices || "0";
        document.getElementById("offline-devices").textContent = data.summary?.totalOfflineDevices || "0";
    
        document.getElementById("camera-total").textContent = data.summary?.cameras?.total || "0";
        document.getElementById("camera-online").textContent = data.summary?.cameras?.online || "0";
        document.getElementById("camera-offline").textContent = data.summary?.cameras?.offline || "0";
    
        document.getElementById("archiver-total").textContent = data.summary?.archivers?.total || "0";
        document.getElementById("archiver-online").textContent = data.summary?.archivers?.online || "0";
        document.getElementById("archiver-offline").textContent = data.summary?.archivers?.offline || "0";
    
        document.getElementById("controller-total").textContent = data.summary?.controllers?.total || "0";
        document.getElementById("controller-online").textContent = data.summary?.controllers?.online || "0";
        document.getElementById("controller-offline").textContent = data.summary?.controllers?.offline || "0";
    
        document.getElementById("server-total").textContent = data.summary?.servers?.total || "0";
        document.getElementById("server-online").textContent = data.summary?.servers?.online || "0";
        document.getElementById("server-offline").textContent = data.summary?.servers?.offline || "0";
    }
    
    /*
       Updated updateDetails:
       Each device card is built with separate elements for the status dot and status text.
       This ensures that later updates from pingAllDevices can reliably find and update them.
    */
    function updateDetails(data) {
        const detailsContainer = document.getElementById("device-details");
        const deviceFilter = document.getElementById("device-filter");
        const onlineFilterButton = document.getElementById("filter-online");
        const offlineFilterButton = document.getElementById("filter-offline");
        const allFilterButton = document.getElementById("filter-all");
        const cityFilter = document.getElementById("city-filter");
    
        detailsContainer.innerHTML = "";
        cityFilter.innerHTML = '<option value="all">All Cities</option>';
    
        let combinedDevices = [];
        let citySet = new Set();
    
        // Fetch real-time status if available.
        fetch("http://localhost:3000/api/region/devices/status")
            .then((response) => response.json())
            .then((realTimeStatus) => {
                console.log("Live Status Data:", realTimeStatus);
    
                for (const [key, devices] of Object.entries(data.details)) {
                    if (!Array.isArray(devices) || devices.length === 0) continue;
                    const deviceType = key.toLowerCase();
    
                    devices.forEach((device) => {
                        const deviceIP = device.ip_address || "N/A";
                        let currentStatus = (realTimeStatus[deviceIP] || device.status || "offline").toLowerCase();
                        const city = device.city || "Unknown";
                        citySet.add(city);
    
                        // Create card element.
                        const card = document.createElement("div");
                        card.className = "device-card";
                        card.dataset.type = deviceType;
                        card.dataset.status = currentStatus;
                        card.dataset.city = city;
                        card.setAttribute("data-ip", deviceIP);
    
                        // Create a container for status.
                        const statusContainer = document.createElement("p");
                        statusContainer.className = "device-status";
                        statusContainer.textContent = "Status: ";
    
                        // Create the status text element.
                        const statusText = document.createElement("span");
                        statusText.className = "status-text";
                        statusText.textContent = currentStatus.charAt(0).toUpperCase() + currentStatus.slice(1);
    
                        // Create the status dot element.
                        const statusDot = document.createElement("span");
                        statusDot.className = "status-dot";
                        statusDot.style.backgroundColor = (currentStatus === "online") ? "green" : "red";
                        statusDot.style.display = "inline-block";
                        statusDot.style.width = "10px";
                        statusDot.style.height = "10px";
                        statusDot.style.marginLeft = "5px";
                        statusDot.style.borderRadius = "50%";
    
                        // Append status text and dot to the container.
                        statusContainer.appendChild(statusText);
                        statusContainer.appendChild(statusDot);
    
                        card.innerHTML = `
                            <h3>${device.cameraname || device.controllername || device.archivername || device.servername || "Unknown Device"}</h3>
                            <p>DEVICE TYPE: ${deviceType.toUpperCase()}</p>
                            <p>IP: ${deviceIP}</p>
                            <p>LOCATION: ${device.location || "N/A"}</p>
                            <p>CITY: ${city}</p>
                        `;
                        card.appendChild(statusContainer);
                        card.innerHTML += `
                            <button class="details-button" onclick="showModal('${device.cameraname || device.controllername || device.archivername || device.servername || "Unknown Device"}', '${deviceIP}', '${device.location || "N/A"}', '${currentStatus.charAt(0).toUpperCase() + currentStatus.slice(1)}', '${city}')">Details</button>
                        `;
    
                        combinedDevices.push({
                            card: card,
                            device: {
                                type: deviceType,
                                status: currentStatus,
                                city: city
                            }
                        });
                    });
                }
    
                combinedDevices.sort((a, b) => {
                    const statusA = (a.device.status === "offline") ? 0 : 1;
                    const statusB = (b.device.status === "offline") ? 0 : 1;
                    return statusA - statusB;
                });
    
                const allDevices = combinedDevices.map(item => item.card);
                const deviceObjects = combinedDevices.map(item => item.device);
    
                citySet.forEach((city) => {
                    const option = document.createElement("option");
                    option.value = city;
                    option.textContent = city;
                    cityFilter.appendChild(option);
                });
    
                deviceFilter.value = "all";
                cityFilter.value = "all";
                document.querySelectorAll(".status-filter").forEach(btn => btn.classList.remove("active"));
                allFilterButton.classList.add("active");
    
                function filterDevices() {
                    const selectedType = deviceFilter.value;
                    const selectedStatus = document.querySelector(".status-filter.active")?.dataset.status || "all";
                    const selectedCity = cityFilter.value;
    
                    detailsContainer.innerHTML = "";
    
                    const filteredDevices = allDevices.filter((device) =>
                        (selectedType === "all" || device.dataset.type === selectedType) &&
                        (selectedStatus === "all" || device.dataset.status === selectedStatus) &&
                        (selectedCity === "all" || device.dataset.city === selectedCity)
                    );
    
                    filteredDevices.forEach((deviceCard) => {
                        detailsContainer.appendChild(deviceCard);
                    });
    
                    const region = currentRegion?.toUpperCase() || "GLOBAL";
                    if (selectedCity !== "all") {
                        document.getElementById("region-title").textContent = `${region}, ${selectedCity} Summary`;
                    } else {
                        document.getElementById("region-title").textContent = `${region} Summary`;
                    }
    
                    const filteredSummaryDevices = deviceObjects.filter((deviceObj, index) => {
                        const correspondingCard = allDevices[index];
                        return (
                            (selectedType === "all" || correspondingCard.dataset.type === selectedType) &&
                            (selectedStatus === "all" || correspondingCard.dataset.status === selectedStatus) &&
                            (selectedCity === "all" || correspondingCard.dataset.city === selectedCity)
                        );
                    });
    
                    const summary = calculateCitySummary(filteredSummaryDevices);
                    updateSummary(summary);
                }
    
                function calculateCitySummary(devices) {
                    const summary = {
                        summary: {
                            totalDevices: devices.length,
                            totalOnlineDevices: devices.filter(d => d.status === "online").length,
                            totalOfflineDevices: devices.filter(d => d.status === "offline").length,
                            cameras: { total: 0, online: 0, offline: 0 },
                            archivers: { total: 0, online: 0, offline: 0 },
                            controllers: { total: 0, online: 0, offline: 0 },
                            servers: { total: 0, online: 0, offline: 0 },
                        }
                    };
    
                    devices.forEach((device) => {
                        if (!summary.summary[device.type]) return;
                        summary.summary[device.type].total += 1;
                        if (device.status === "online") summary.summary[device.type].online += 1;
                        else summary.summary[device.type].offline += 1;
                    });
    
                    return summary;
                }
    
                filterDevices();
    
                setTimeout(() => {
                    const selectedCity = cityFilter.value;
                    const selectedType = deviceFilter.value;
                    const selectedStatus = document.querySelector(".status-filter.active")?.dataset.status || "all";
    
                    const filteredSummaryDevices = deviceObjects.filter((deviceObj, index) => {
                        const correspondingCard = allDevices[index];
                        return (
                            (selectedType === "all" || correspondingCard.dataset.type === selectedType) &&
                            (selectedStatus === "all" || correspondingCard.dataset.status === selectedStatus) &&
                            (selectedCity === "all" || correspondingCard.dataset.city === selectedCity)
                        );
                    });
    
                    const summary = calculateCitySummary(filteredSummaryDevices);
                    updateSummary(summary);
                }, 100);
    
                deviceFilter.addEventListener("change", filterDevices);
                cityFilter.addEventListener("change", filterDevices);
                allFilterButton.addEventListener("click", () => {
                    document.querySelectorAll(".status-filter").forEach(btn => btn.classList.remove("active"));
                    allFilterButton.classList.add("active");
                    filterDevices();
                });
                onlineFilterButton.addEventListener("click", () => {
                    document.querySelectorAll(".status-filter").forEach(btn => btn.classList.remove("active"));
                    onlineFilterButton.classList.add("active");
                    filterDevices();
                });
                offlineFilterButton.addEventListener("click", () => {
                    document.querySelectorAll(".status-filter").forEach(btn => btn.classList.remove("active"));
                    offlineFilterButton.classList.add("active");
                    filterDevices();
                });
            })
            .catch((error) => {
                console.error("Error fetching real-time device status:", error);
                detailsContainer.innerHTML = "<p>Failed to load device details.</p>";
            });
    }
    function showModal(name, ip, location, status, city) {
        const modal = document.getElementById("modal");
        modal.style.display = "block";
    
        // Render the initial modal content
        renderModalContent({ name, ip, location, status, city });
    
        // Bind the Refresh button
        const btn = document.getElementById("refresh-data");
        btn.onclick = () => {
            // Find the latest device info from latestDetails
            if (!latestDetails || !latestDetails.details) return;
    
            // Search through the details object to find this IP
            let found = null;
            for (const devList of Object.values(latestDetails.details)) {
                found = devList.find(d => d.ip_address === ip);
                if (found) break;
            }
            if (!found) return;
    
            // Derive updated fields
            const updatedStatus = (found.status || "offline")
                .charAt(0).toUpperCase() + found.status.slice(1);
            const updatedLocation = found.location || location;
            const updatedCity = found.city || city;
    
            renderModalContent({
                name,
                ip,
                location: updatedLocation,
                status: updatedStatus,
                city: updatedCity
            });
        };
    }
    
    // Helper to render the modalâ€™s inner HTML
    function renderModalContent({ name, ip, location, status, city }) {
        document.getElementById("modal-title").textContent = `Details for ${name}`;
        document.getElementById("modal-body").innerHTML = `
            <ul>
                <li><strong>Name:</strong> ${name}</li>
                <li><strong>IP:</strong> ${ip}</li>
                <li><strong>Location:</strong> ${location}</li>
                <li><strong>Status:</strong> ${status}</li>
                <li><strong>City:</strong> ${city}</li>
            </ul>

            <button id="refresh-data" >Refresh Data</button>
        `;
    }




    index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Device Dashboard</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>

<!-- 
    <header>
        
        <h1 style=" text-align: center;

   background-color: hsla(62, 67%, 48%, 0);
   border-radius: 8px;
   box-shadow: 0px 4px 6px rgba(178, 190, 11, 0.296);
   transition: transform 0.3s ease-in-out;
   font-size: 36px;
   margin-inline-start: 0;
   margin: 0;
   padding: 20px 20px;
   transition: color 0.3s ease;
   border-radius: 8px;
   color:rgb(223, 205, 38);
    background-color: #222;
    width: 100%;
    
    bottom: 0">Device Health Monitoring & Trend Analysis Dashboard</h1>

    </header> -->
    



    <div class="container">
        <div id="sidebar">
            <h2 style="color:rgb(223, 205, 38);">Regions</h2>
            <button class="region-button" data-region="global">Global</button>
            <button class="region-button" data-region="apac">APAC</button>

            <button class="region-button" data-region="emea">EMEA</button>
            <button class="region-button" data-region="laca">LACA</button>   
            <button class="region-button" data-region="namer">NAMER</button>

            <button  style="display: block;
            width: 100%;
            padding: 15px;
            margin-bottom: 10px;
            border: none;
            background-color:rgb(223, 205, 38);
           color: rgb(26, 23, 23);
           font-size: 16px;
           cursor: pointer;
          text-align: center;
           border-radius: 5px;
           transition: background-color 0.3s ease;""
             onclick="window.location.href='trend.html'">View Trend Analysis</button>




            <button   style="display: block;
            width: 100%;
            padding: 15px;
            margin-bottom: 10px;
            border: none;
            background-color:rgb(223, 205, 38);
           color: rgb(26, 23, 23);
           font-size: 16px;
           cursor: pointer;
          text-align: center;
           border-radius: 5px;
           transition: background-color 0.3s ease;""
            
            onclick="window.location.href='summary.html'">View Devices Summary</button>


            <div id="countdown" 
            style="font-size: 16px; font-weight: bold; color:rgb(223, 205, 38);
            padding: 10px;
            display: block; "></div>


            <div class="filter-buttons">
                <button id="filter-all" class="status-filter active" data-status="all"
                style="display: block;
                 width: 100%;
                 padding: 15px;
                 margin-bottom: 10px;
                 border: none;
                 background-color: #e8f0f1;
                color: rgb(26, 23, 23);
                font-size: 16px;
                cursor: pointer;
               text-align: center;
                border-radius: 5px;
                transition: background-color 0.3s ease; ">All Devices</button>


                <button id="filter-online" class="status-filter" data-status="online" 
                style="
                display: block;
                 width: 100%;
                 padding: 15px;
                 margin-bottom: 10px;
                 border: none;
                 background-color: #1c9c47;
                color: rgb(26, 23, 23);
                font-size: 16px;
                cursor: pointer;
               text-align: center;
                border-radius: 5px;
                transition: background-color 0.3s ease;">Online Devices</button>

                <button id="filter-offline"  class="status-filter" data-status="offline"
                style="
                display: block;
                 width: 100%;
                 padding: 15px;
                 margin-bottom: 10px;
                 border: none;
                 background-color: #db2410;
                color: rgb(26, 23, 23);
                font-size: 16px;
                cursor: pointer;
               text-align: center;
                border-radius: 5px;
                transition: background-color 0.3s ease;                
                 ">Offline Devices</button>
            </div>


       <div><
            <label for="device-filter" style="color:rgb(223, 205, 38);
            font-size: 16px;
            margin: 10;
            border: none;
            font-weight: bold;
            text-align: start;
            border-radius: 5px;
            width: 100%;
             ">Filter by Device Type:</label>
            <select id="device-filter">
                <option value="all">All</option>
                <option value="cameras">Cameras</option>
                <option value="archivers">Archivers</option>
                <option value="controllers">Controllers</option>
                <option value="servers">Servers</option>
            </select>

              </div>


            <div><
                <label for="device-filter" style="color:rgb(223, 205, 38);
                font-size: 16px;
                padding-top: 10px;
                margin-top: 5px;
                border: none;
                font-weight: bold;
                text-align: start;
                border-radius: 5px;
                width: 100%;
                 ">Filter by Location:</label>
                <select id="city-filter">
                    <option value="all">All Cities</option>
                </select>
              </div>

    </div>

        <div id="content">
            <h1 id="region-title" style="color:rgb(255, 0, 0);
            font-weight: bold;
            border: black;
            border-radius: 5px;
            text-align: start;">Global Summary</h1>


            <div class="summary">
                <div id="city-summary"></div>


                <div class="card">
                    <h3>Total Devices</h3>
                    <p>Total: <span id="total-devices">Loading...</span></p>
                    <p>Online: <span id="online-devices">Loading...</span></p>
                    <p>Offline: <span id="offline-devices">Loading...</span></p>
                   </div>

             <div class="card">
                <h3>Cameras</h3>
                <p>Total: <span id="camera-total">Loading...</span></p>
                <p>Online: <span id="camera-online">Loading...</span></p>
                <p>Offline: <span id="camera-offline">Loading...</span></p>
               </div>
            
               <div class="card">
                <h3>Archivers</h3>
                <p>Total: <span id="archiver-total">Loading...</span></p>
                <p>Online: <span id="archiver-online">Loading...</span></p>
                <p>Offline: <span id="archiver-offline">Loading...</span></p>
               </div>
            
               <div class="card">
                <h3>Controllers</h3>
                <p>Total: <span id="controller-total">Loading...</span></p>
                <p>Online: <span id="controller-online">Loading...</span></p>
                <p>Offline: <span id="controller-offline">Loading...</span></p>
               </div>

               <div class="card">
                <h3>Servers</h3>
                <p>Total: <span id="server-total">Loading...</span></p>
                <p>Online: <span id="server-online">Loading...</span></p>
                <p>Offline: <span id="server-offline">Loading...</span></p>
               </div>
            </div>

           
            <div id="details-section">
                <h2 style="color:rgb(255, 0, 0)">Device Details</h2>
             <!-- Dropdown for Filtering -->
    <div id="device-details">Loading...</div>
                <div id ="details-container"></div>
    
            </div>
        </div>
    </div>
    </body>

    
    <div id="modal">
        <div class="modal-content">
            <span id="close-modal">&times;</span>
            <h3 id="modal-title">Device Details</h3>
            <ul id="modal-body"></ul>
           

<div id="device-details"></div>
        </div>
    </div>



    <script src="script.js"></script> 
    
     <!-- Include Footer -->
              <footer class="footer">
                <img src="images/FooterLogo.png" alt="Company Logo" class="footer-logo">
                <p>&copy;2025 VisionWatch | Powered by <strong>Western Union Services India Pvt Ltd.</strong></p>
                <p>Contact :
                <a href="mailto:gsoc-globalsecurityoperationcenter.sharedmailbox@westernunion.com">gsoc-globalsecurityoperationcenter.sharedmailbox@westernunion.com</a> |
                <a href="tel:+91 20 67632394">+91 2067632394 </a>
                </p>
            </footer>  
        </body>
        </html>







        styles.css



body {
    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;

    display: flex;
    flex-direction: column;
    height: 100vh;
    background-color: #f4f4f9;
}

.container {
    display: flex;
    width: 100%;
    flex-grow: 1;
}

#sidebar {
    width: 15%;
    background-color: #222831;
    color: black;
    padding: 20px;
    box-shadow: 2px 0 5px rgba(0, 0, 0, 0.2);
}

#sidebar h2 {
    text-align: center;
    margin-bottom:10px;
}

.region-button {
    display: block;
    width: 100%;
    padding: 15px;
    margin-bottom: 10px;
    border: none;
    background-color: #00adb5;
    color: white;
    font-size: 16px;
    cursor: pointer;
    text-align: center;
    border-radius: 5px;
    transition: background-color 0.3s ease;
}

.region-button:hover {
    background-color: #007a80;
}

#content {
    width: 80%;
    padding: 20px;
    display: flex;
    flex-direction: column;
    gap: 20px;
}

#region-title {
    font-size: 24px;
    margin-bottom: 0%;
    margin-top: 0%;
    color: #333;
    padding: 0%;
}

.summary {
    display: flex;
    gap: 5px;
    width: auto;
    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;
    margin: top 5px;
    flex-wrap: wrap; /* Ensure they can wrap to next row */
}

.card {
    background: white;
    margin: top 1px;
    margin: bottom 1px;
    width: 10px;;
    padding: auto;
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    text-align: center;
    flex: 1 1 calc(25% - 20px); /* Adjust this value for your card size */
}

.card h3 {
    margin-bottom: 10px;
    color: #555;
}

#details-section {
    margin: 1px;
    margin: bottom 1px;;
    margin-top: 0%;
    padding: auto;
}

#device-details {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
}

.device-card {
    flex: 1 1 calc(25% - 15px); /* Adjust this to your desired card size */
    background: white;
    padding: 10px;
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.device-card h3 {
    margin-bottom: 10px;
    color: #333;
}

.device-card p {
    font-size: 14px;
    margin: 5px 0;
}

.details-button {
    display: inline-block;
    margin-top: 10px;
    padding: 5px 10px;
    background-color: #00adb5;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

.details-button:hover {
    background-color: #007a80;
}

#modal {
    display: none;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: white;
    width: 40%;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.3);
    z-index: 1000;
}

.modal-content {
    position: relative;
}

#close-modal {
    position: absolute;
    top: 10px;
    right: 10px;
    font-size: 20px;
    cursor: pointer;
    color: #333;
}

#modal-body {
    margin-top: 20px;
}

.status-dot {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    display: inline-block;
    margin-left: 5px;
}




/* General Styling */
body {
    display: flex;
    min-height: 100vh;
    margin: 0;
}

/* Sidebar Styling */
.sidebar {
    width: 250px;
    padding: 20px;
    background-color: #333;
    color: white;
    position: fixed;
    height: 100%;
    top: 0;
    left: 0;
}

.sidebar h3 {
    color: #fff;
    text-align: center;
    margin-bottom: 20px;
}

.region-selector button {
    width: 100%;
    padding: 10px;
    margin: 5px 0;
    background-color: #444;
    color: white;
    border: none;
    cursor: pointer;
    font-size: 16px;
}

.region-selector button:hover {
    background-color: #555;
}

.device-type {
    margin-top: 20px;
}

.device-type select {
    width: 100%;
    padding: 8px;
    margin-top: 10px;
    font-size: 16px;
}

/* Back Button */
.back-btn {
    width: 100%;
    padding: 10px;
    background-color: #f44336;
    color: white;
    border: none;
    margin-top: 20px;
    cursor: pointer;
    font-size: 16px;
}

.back-btn:hover {
    background-color: #d32f2f;
}



table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
}

table, th, td {
    border: 1px solid #ddd;
}

th, td {
    padding: 12px;
    text-align: center;
}

th {
    background-color: #f2f2f2;
}

button {
    background-color: #007bff;
    color: white;
    border: none;
    padding: 6px 12px;
    cursor: pointer;
    border-radius: 4px;
}

button:hover {
    background-color: #0056b3;
}



.footer {
    text-align: center;
    padding: 15px;
    background-color: #222;
    color: #fff;
    font-size: 14px;
    width: 100%;
    position: relative;
    bottom: 0;
    box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.1);
}

.footer-logo {
    height: 40px;
    display: block;
    margin: 0 auto 10px;
}

.footer a {
    color: #ffcc00;
    text-decoration: underline;
}

.footer a:hover {
    text-decoration: underline;
}

.footer strong {
    color: #ffcc00;
}



table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
}

table, th, td {
    border: 1px solid #ddd;
}

th, td {
    padding: 12px;
    text-align: center;
}

th {
    background-color: #f2f2f2;
}

button {
    background-color: #007bff;
    color: white;
    border: none;
    padding: 6px 12px;
    cursor: pointer;
    border-radius: 4px;
}

button:hover {
    background-color: #0056b3;
}


#device-history-modal {
    display: none;
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.4);
    overflow: auto;
}

.modal-content {
    background-color: #fff;
    padding: 20px;
    margin: 10% auto;
    width: 80%;
    max-width: 600px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
}

.close:hover,
.close:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
}



#device-history-modal {
    display: none;
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.4);
    overflow: auto;
}

.modal-content {
    background-color: #fff;
    padding: 20px;
    margin: 10% auto;
    width: 80%;
    max-width: 600px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
}

.close:hover,
.close:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
}

#device-history {
    margin-top: 20px;
}

#device-history ul {
    list-style-type: none;
    padding: 0;
}

#device-history ul li {
    margin-bottom: 10px;
}

.summary-container {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 15px;
    margin: 20px 0;
}

.summary-card {
    background: #f8f9fa;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
    text-align: center;
    font-size: 18px;
    font-weight: bold;
    min-width: 200px;
}


/* Dynamic font size */
@media (max-width: 768px) {
    header h1 {
        font-size: 28px;
    }
}

@media (max-width: 480px) {
    header h1 {
        font-size: 22px;
    }
}

        
    
