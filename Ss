Read below files and add one sidebar 
in sidebar add button 
back to dashboard 
select region (dropdown)
also add dropdown button i want to filter data in basis of Device type (Controller,archiver,camera, server)
and want to filter data on basis of Remark.

i want display Uptime & downtime duraion in hour/minutes/ format in View history display 
History  day ,date , then status  like this kindly update my files as per my request and give me updated code 



index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="styles.css">

</head>
<body>
    <h1 style="display: flex;margin-bottom: 5%;align-self: center;margin-top: 0%;margin-bottom: 0%;">Device Trend Report </h1>
    <!-- Back to Dashboard Button -->
    <button onclick="window.location.href='index.html'">Back to Dashboard</button>
    
    <div class="container">
        
        
        <div class="region-select" style="margin-top: 0%;">
            <label for="region">Select Region:</label>
            <select id="region" onchange="fetchDeviceData()">
                <option value="apac">APAC</option>
                <option value="emea">EMEA</option>
                <option value="laca">LACA</option>
                <option value="namer">NAMER</option>
            </select>
        </div>

        <table id="device-table">
            <thead>
                <tr>
                    <th>Device IP</th>
                    <th>Device Name</th>
                    <th>Device Type</th>
                    <th>Uptime Duration</th>
                    <th>Downtime Count</th>
                    <th>Downtime Duration</th>
                    <th>Details</th>
                    
                    <th>Remark</th>
                </tr>
            </thead>
            <tbody>
                <!-- Device data rows will be populated here -->
            </tbody>
        </table>
    </div>

    <!-- Device History Modal -->
    <div id="device-history-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeHistoryModal()">&times;</span>
            
            <h2>Device History</h2>
            <div id="device-history">
                <!-- History data will be displayed here -->
            </div>
        </div>
    </div>
    <script src="trend.js"></script>
    
</body>
</html>



    <!-- Footer -->
    <footer class="footer">
        <img src="images/FooterLogo.png" alt="Company Logo" class="footer-logo">
        <p>&copy;2025 VisionWatch | Powered by <strong>Western Union Services India Pvt Ltd.</strong></p>
        <p>Contact: 
            <a href="mailto:gsoc-globalsecurityoperationcenter.sharedmailbox@westernunion.com">gsoc-globalsecurityoperationcenter.sharedmailbox@westernunion.com</a> | 
            <a href="tel:+91 20 67632394">+91 2067632394</a>
        </p>
    </footer>
</body>
</html>





trend.js


document.addEventListener('DOMContentLoaded', function () {
    let region = 'apac'; // Default region

    function fetchDeviceData() {
        const selectedRegion = document.getElementById('region').value;
        fetch(`http://localhost/api/regions/details/${selectedRegion}`)
            .then(response => response.json())
            .then(data => {
                populateDeviceTable(data.details);
                fetchTrendData(selectedRegion);
            })
            .catch(error => console.error('Error fetching device data:', error));
    }

    function populateDeviceTable(details) {
        const tableBody = document.getElementById('device-table').getElementsByTagName('tbody')[0];
        tableBody.innerHTML = ''; // Clear existing rows

        if (details) {
            ['cameras', 'archivers', 'controllers', 'servers'].forEach(deviceType => {
                details[deviceType]?.forEach(device => {
                    const downtimeCount = device.history.filter(entry => entry.status === "Offline").length;
                    const downtimeDuration = calculateDowntimeDuration(device.history);
                    const remark = (downtimeCount > 5 || downtimeDuration >= 5) ? "Device needs repair" : "Device working properly";

                    const row = tableBody.insertRow();
                    row.innerHTML = `
                        <td>${device.ip_address}</td>
                        <td>${device[deviceType.slice(0, -1) + 'name']}</td>
                        <td>${deviceType.slice(0, -1).toUpperCase()}</td>
                        <td>${calculateUptimeDuration(device.history)}</td>
                        <td>${downtimeCount}</td>
                        <td>${downtimeDuration}h</td>
                        <td><button onclick="openDeviceHistory('${device.ip_address}')">View History</button></td>
                        <td>${remark}</td>
                    `;
                });
            });
        } else {
            console.error('No details found in the response');
        }
    }

    function calculateUptimeDuration(history) {
        let uptimeDuration = 0;
        if (history) {
            history.forEach(entry => {
                if (entry.status === "Online") {
                    uptimeDuration += 1; // Increment for each online instance
                }
            });
        }
        return `${uptimeDuration}h`;
    }

    function calculateDowntimeDuration(history) {
        let downtimeDuration = 0;
        if (history) {
            for (let i = 1; i < history.length; i++) {
                if (history[i].status === "Offline" && history[i - 1].status === "Online") {
                    let diff = new Date(history[i].timestamp) - new Date(history[i - 1].timestamp);
                    downtimeDuration += diff / (1000 * 60 * 60); // Convert to hours
                }
            }
        }
        return Math.floor(downtimeDuration);
    }

    function fetchTrendData(region) {
        fetch(`http://localhost/api/regions/trend/details/${region}`)
            .then(response => response.json())
            .then(data => {
                updateTrendChart(data.trends);
            })
            .catch(error => console.error('Error fetching trend data:', error));
    }
    function parseDuration(duration) {
        const regex = /(\d+)d (\d+)h (\d+)m/;
        const matches = duration.match(regex);
        return matches ? parseInt(matches[2]) + parseInt(matches[1]) * 24 : 0;
    }

    function openDeviceHistory(ip) {
        alert(`Displaying history for device: ${ip}`);
    }

    document.getElementById('region').addEventListener('change', fetchDeviceData);

    fetchDeviceData(); // Fetch initial data
});




// Function to open the device history modal and display details
function openDeviceHistory(ipAddress) {
    // Fetch device history data from API
    fetch(`http://localhost/api/device/history/${ipAddress}`)
        .then(response => response.json())
        .then(data => {
            displayDeviceHistory(data.history);
        })
        .catch(error => {
            console.error('Error fetching device history:', error);
        });

    // Show the modal
    document.getElementById('device-history-modal').style.display = 'block';
}

// Function to display device history inside the modal
function displayDeviceHistory(history) {
    const historyContainer = document.getElementById('device-history');
    historyContainer.innerHTML = ''; // Clear previous data

    if (history && history.length > 0) {
        history.forEach(entry => {
            const entryDiv = document.createElement('div');
            entryDiv.innerHTML = `<p><strong>${new Date(entry.timestamp).toLocaleString()}</strong> - ${entry.status}</p>`;
            historyContainer.appendChild(entryDiv);
        });
    } else {
        historyContainer.innerHTML = '<p>No history available</p>';
    }
}

// Function to close the modal
function closeHistoryModal() {
    document.getElementById('device-history-modal').style.display = 'none';
}


