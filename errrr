[ContentMain]
ContentMain.js:18 [ContentService] document.readyState: loading
ContentMain.js:5 [ContentService.SetContentInitData] target: { TabId: 1454074211, FrameId: 0}
summary.js:19 Devices Data: {details: {…}}
summary.js:27 Invalid devices data structure: {details: {…}}

CHECK Above error and fix it 

for more infrmation kindly check 

summary.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Device Status Dashboard</title>
    <link rel="stylesheet" href="summary.css">
</head>
<body>
    <h1>Device Status Dashboard</h1>

    <!-- Filters -->
    <div>
        <label for="regionFilter">Filter by Region:</label>
        <select id="regionFilter">
            <option value="global">Global</option>
            <option value="apac">APAC</option>
            <option value="laca">LACA</option>
            <option value="emea">EMEA</option>
            <option value="namer">NAMER</option>
        </select>

        <label for="categoryFilter">Filter by Category:</label>
        <select id="categoryFilter">
            <option value="Low">Low</option>
            <option value="Medium">Medium</option>
            <option value="High">High</option>
        </select>

        <label for="deviceTypeFilter">Filter by Device Type:</label>
        <select id="deviceTypeFilter">
            <option value="All">All</option>
            <option value="Camera">Camera</option>
            <option value="Archiver">Archiver</option>
            <option value="Controller">Controller</option>
            <option value="Server">Server</option>
        </select>
    </div>

    <!-- Device Table -->
    <table id="deviceTable">
        <thead>
            <tr>
                <th>Sr. No.</th>
                <th>Device IP</th>
                <th>Device Name</th>
                <th>Device Current Status</th>
                <th>Device History</th>
                <th>Device Category</th>
            </tr>
        </thead>
        <tbody id="device-list">
            <!-- Device list will be populated here -->
        </tbody>
    </table>

    <script src="summary.js"></script>
</body>
</html>



summary.js


document.addEventListener("DOMContentLoaded", function () {
    const regionFilter = document.getElementById("regionFilter");
    const categoryFilter = document.getElementById("categoryFilter");
    const deviceTypeFilter = document.getElementById("deviceTypeFilter");
    const deviceList = document.getElementById("device-list");

    // Check if elements are loaded before using them
    if (!deviceList || !regionFilter || !categoryFilter || !deviceTypeFilter) {
        console.error("One or more required elements are missing in the DOM.");
        return;
    }
    async function fetchDevices(region = "global") {
        try {
            const response = await fetch(`http://localhost/api/regions/details/${region}`);
            if (!response.ok) throw new Error("Failed to fetch data");
    
            const data = await response.json();
            console.log("Devices Data:", data);  // Check the structure
    
            // Ensure that 'data.details' is an array, or access the correct array
            if (Array.isArray(data.details)) {
                updateDeviceList(data.details);  // If 'details' is already an array
            } else if (data.details && data.details.devices) {
                updateDeviceList(data.details.devices);  // Access 'devices' if it's nested
            } else {
                console.error("Invalid devices data structure:", data);
            }
        } catch (error) {
            console.error("Error fetching devices:", error);
        }
    }
    function updateDeviceList(data) {
        if (!deviceList) {
            console.error("Missing device list element.");
            return;
        }

        let filteredDevices = filterDevices(data.details);

        // Clear the existing list
        deviceList.innerHTML = "";

        if (filteredDevices.length === 0) {
            deviceList.innerHTML = "<tr><td colspan='6'>No devices match the filter criteria.</td></tr>";
            return;
        }

        filteredDevices.forEach((device, index) => {
            const tr = document.createElement("tr");

            // Determine device category based on conditions
            let category = "Low";
            const offlineCount = device.history.filter(entry => entry.status === "Offline").length;
            const downtime = calculateDowntime(device.history);
            if (offlineCount > 3 || downtime > 120) {
                category = "Medium";
            }
            if (offlineCount >= 5 || downtime > 240) {
                category = "High";
            }

            // Create table row for each device
            tr.innerHTML = `
                <td>${index + 1}</td>
                <td>${device.ip_address}</td>
                <td>${device.name}</td>
                <td style="color:${device.status === 'Online' ? 'green' : 'red'}">${device.status}</td>
                <td><button onclick="viewDeviceHistory(${device.id})">View History</button></td>
                <td>${category}</td>
            `;
            deviceList.appendChild(tr);
        });
    }

    function filterDevices(devices) {
        const region = regionFilter.value;
        const category = categoryFilter.value;
        const deviceType = deviceTypeFilter.value;

        return devices.filter(device => {
            // Filter by region
            if (device.region !== region && region !== "global") {
                return false;
            }

            // Filter by category
            if (category !== "Low" && category !== "Medium" && category !== "High") {
                return false;
            }

            // Filter by device type (Camera, Archiver, etc.)
            if (deviceType !== "All" && device.type !== deviceType) {
                return false;
            }

            return true;
        });
    }

    function calculateDowntime(history) {
        let totalDowntime = 0;
        for (let i = 0; i < history.length - 1; i++) {
            if (history[i].status === "Offline" && history[i + 1].status === "Online") {
                let offlineTime = new Date(history[i].timestamp);
                let onlineTime = new Date(history[i + 1].timestamp);
                totalDowntime += (onlineTime - offlineTime) / (1000 * 60); // Convert to minutes
            }
        }
        return totalDowntime;
    }

    function viewDeviceHistory(deviceId) {
        // Display device history (daily, weekly, monthly)
        const historyData = getDeviceHistory(deviceId);
        const historyContainer = document.createElement("div");

        historyContainer.innerHTML = `
            <h3>Device History</h3>
            <button onclick="showDeviceHistory('daily')">Daily</button>
            <button onclick="showDeviceHistory('weekly')">Weekly</button>
            <button onclick="showDeviceHistory('monthly')">Monthly</button>
            <div id="deviceHistoryContent"></div>
        `;

        document.body.appendChild(historyContainer);
        showDeviceHistory('daily', historyData);
    }

    function showDeviceHistory(timeFrame) {
        const historyContent = document.getElementById("deviceHistoryContent");

        // Logic to display history based on timeframe
        historyContent.innerHTML = `Showing ${timeFrame} data for the device.`;

        // Fetch or filter data according to daily, weekly, or monthly
    }

    fetchDevices();
});



