<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Device Summary</title>
    <link rel="stylesheet" href="styles.css">
    <script defer src="script.js"></script>
</head>
<body>
    <div class="container">
        <h1>Device Downtime Summary</h1>
        
        <!-- Region Dropdown -->
        <label for="regionSelect">Filter by Region:</label>
        <select id="regionSelect">
            <option value="global">GLOBAL</option>
            <option value="apac">APAC</option>
            <option value="emea">EMEA</option>
            <option value="laca">LACA</option>
            <option value="namer">NAMER</option>
        </select>

        <!-- Summary Sections -->
        <div class="summary-container">
            <div class="summary-box low">
                <h3>Low Risk Devices</h3>
                <ul id="lowRiskDevices"></ul>
            </div>

            <div class="summary-box medium">
                <h3>Medium Risk Devices</h3>
                <ul id="mediumRiskDevices"></ul>
            </div>

            <div class="summary-box high">
                <h3>High Risk Devices</h3>
                <ul id="highRiskDevices"></ul>
            </div>
        </div>

        <!-- Chart Section -->
        <div class="chart-container">
            <canvas id="downtimeChart"></canvas>
        </div>
    </div>
</body>
</html>




body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    margin: 0;
    padding: 20px;
}

.container {
    max-width: 900px;
    margin: auto;
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

h1 {
    text-align: center;
}

label {
    font-weight: bold;
}

select {
    width: 100%;
    padding: 8px;
    margin: 10px 0;
}

.summary-container {
    display: flex;
    justify-content: space-between;
    margin-top: 20px;
}

.summary-box {
    width: 30%;
    padding: 15px;
    border-radius: 5px;
    color: white;
}

.low { background-color: #28a745; }
.medium { background-color: #ffc107; }
.high { background-color: #dc3545; }

ul {
    list-style: none;
    padding: 0;
}

.chart-container {
    margin-top: 30px;
    text-align: center;
}




document.addEventListener("DOMContentLoaded", () => {
    const regionSelect = document.getElementById("regionSelect");
    const lowRiskList = document.getElementById("lowRiskDevices");
    const mediumRiskList = document.getElementById("mediumRiskDevices");
    const highRiskList = document.getElementById("highRiskDevices");

    // API Endpoints
    const regionDetailsAPI = "http://localhost/api/regions/details/";
    const historyAPI = "http://localhost/api/devices/history";

    let deviceHistory = {};
    
    // Fetch Device History
    async function fetchDeviceHistory() {
        try {
            const response = await fetch(historyAPI);
            deviceHistory = await response.json();
        } catch (error) {
            console.error("Error fetching history data:", error);
        }
    }

    // Fetch Region Data
    async function fetchRegionData(region) {
        try {
            const response = await fetch(regionDetailsAPI + region);
            const data = await response.json();
            processDeviceData(data.details);
        } catch (error) {
            console.error("Error fetching region data:", error);
        }
    }

    // Process Data and Categorize Devices
    function processDeviceData(details) {
        const offlineDevices = [];

        // Extract devices (Cameras, Archivers, Controllers, Servers)
        const allDevices = [...details.cameras, ...details.archivers, ...details.controllers, ...details.servers];

        allDevices.forEach(device => {
            const ip = device.ip_address;
            if (device.status === "Offline" || (deviceHistory[ip] && deviceHistory[ip].length > 1)) {
                const history = deviceHistory[ip] || [];
                const downtimeInfo = analyzeDowntime(history);
                
                if (downtimeInfo.category) {
                    offlineDevices.push({ ...device, ...downtimeInfo });
                }
            }
        });

        updateSummary(offlineDevices);
    }

    // Analyze Downtime Trends
    function analyzeDowntime(history) {
        let category = null;
        let downtimeCount = 0;
        let lastOfflineTime = null;
        let consecutiveOfflineDays = 0;

        history.forEach(entry => {
            if (entry.status === "Offline") {
                downtimeCount++;

                if (lastOfflineTime) {
                    const timeDiff = new Date(entry.timestamp) - new Date(lastOfflineTime);
                    if (timeDiff >= 2 * 60 * 60 * 1000) { // 2 Hours
                        consecutiveOfflineDays++;
                    }
                }
                lastOfflineTime = entry.timestamp;
            }
        });

        if (downtimeCount > 3 || consecutiveOfflineDays >= 2) {
            category = "low";
        }
        if (consecutiveOfflineDays >= 3) {
            category = "medium";
        }
        if (consecutiveOfflineDays >= 5) {
            category = "high";
        }

        return { downtimeCount, category };
    }

    // Update Summary Section
    function updateSummary(devices) {
        lowRiskList.innerHTML = "";
        mediumRiskList.innerHTML = "";
        highRiskList.innerHTML = "";

        devices.forEach(device => {
            const li = document.createElement("li");
            li.textContent = `${device.cameraname || device.archivername || device.controllername || device.servername} - ${device.ip_address}`;

            if (device.category === "low") {
                lowRiskList.appendChild(li);
            } else if (device.category === "medium") {
                mediumRiskList.appendChild(li);
            } else if (device.category === "high") {
                highRiskList.appendChild(li);
            }
        });
    }

    // Handle Region Change
    regionSelect.addEventListener("change", () => {
        fetchRegionData(regionSelect.value);
    });

    // Initial Load
    fetchDeviceHistory().then(() => fetchRegionData("global"));
});

