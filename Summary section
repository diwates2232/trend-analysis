
async function fetchDevices(region = "global") {
    try {
        const response = await fetch(`http://localhost/api/regions/details/${region}`);
        if (!response.ok) throw new Error("Failed to fetch data");

        const data = await response.json();
        console.log("üìå API Response:", JSON.stringify(data, null, 2));

        if (data.details && Array.isArray(data.details.devices)) {
            updateDeviceList(data.details.devices);
        } else {
            console.error("‚ùå Invalid devices data structure:", data);
        }
    } catch (error) {
        console.error("‚ùå Error fetching devices:", error);
    }
}















Invalid devices data structure: {details: {‚Ä¶}}
fetchDevices @ summary.js:27
await in fetchDevices
(anonymous) @ summary.js:160Understand this errorAI


check below file and solve this error



document.addEventListener("DOMContentLoaded", function () {
    const regionFilter = document.getElementById("regionFilter");
    const categoryFilter = document.getElementById("categoryFilter");
    const deviceTypeFilter = document.getElementById("deviceTypeFilter");
    const deviceList = document.getElementById("device-list");

    // Check if elements are loaded before using them
    if (!deviceList || !regionFilter || !categoryFilter || !deviceTypeFilter) {
        console.error("One or more required elements are missing in the DOM.");
        return;
    }


    async function fetchDevices(region = "global") {
        try {
            const response = await fetch(`http://localhost/api/regions/details/${region}`);
            if (!response.ok) throw new Error("Failed to fetch data");
    
            const data = await response.json();
            console.log("Devices Data Received:", JSON.stringify(data, null, 2));  // üëÄ Check API Response
    
            // Validate structure before accessing 'devices'
            if (data && data.details && Array.isArray(data.details.devices)) {
                updateDeviceList(data.details.devices);
            } else {
                console.error("‚ùå Invalid devices data structure:", data);
            }
        } catch (error) {
            console.error("‚ùå Error fetching devices:", error);
        }
    }
    
    
    


    function updateDeviceList(devices) {
        if (!deviceList) {
            console.error("‚ùå Missing device list element.");
            return;
        }
    
        if (!Array.isArray(devices)) {
            console.error("‚ùå Expected 'devices' to be an array, but got:", devices);
            return;
        }
    
        let filteredDevices = filterDevices(devices);
    
        // Clear the existing list
        deviceList.innerHTML = "";
    
        if (filteredDevices.length === 0) {
            deviceList.innerHTML = "<tr><td colspan='6'>No devices match the filter criteria.</td></tr>";
            return;
        }
    
        filteredDevices.forEach((device, index) => {
            const tr = document.createElement("tr");
    
            // Determine device category based on conditions
            let category = "Low";
            const offlineCount = device.history ? device.history.filter(entry => entry.status === "Offline").length : 0;
            const downtime = device.history ? calculateDowntime(device.history) : 0;
            if (offlineCount > 3 || downtime > 120) {
                category = "Medium";
            }
            if (offlineCount >= 5 || downtime > 240) {
                category = "High";
            }
    
            // Create table row for each device
            tr.innerHTML = `
                <td>${index + 1}</td>
                <td>${device.ip_address}</td>
                <td>${device.name}</td>
                <td style="color:${device.status === 'Online' ? 'green' : 'red'}">${device.status}</td>
                <td><button onclick="viewDeviceHistory(${device.id})">View History</button></td>
                <td>${category}</td>
            `;
            deviceList.appendChild(tr);
        });
    }
    
    
    function filterDevices(devices) {
    const region = regionFilter.value;
    const category = categoryFilter.value;
    const deviceType = deviceTypeFilter.value;

    return devices.filter(device => {
        // Filter by region
        if (region !== "global" && device.region !== region) {
            return false;
        }

        // Determine device category
        let calculatedCategory = "Low";
        const offlineCount = device.history ? device.history.filter(entry => entry.status === "Offline").length : 0;
        const downtime = device.history ? calculateDowntime(device.history) : 0;
        if (offlineCount > 3 || downtime > 120) {
            calculatedCategory = "Medium";
        }
        if (offlineCount >= 5 || downtime > 240) {
            calculatedCategory = "High";
        }

        // Filter by category
        if (category !== "All" && calculatedCategory !== category) {
            return false;
        }

        // Filter by device type
        if (deviceType !== "All" && device.type !== deviceType) {
            return false;
        }

        return true;
    });
}
    function calculateDowntime(history) {
        let totalDowntime = 0;
        for (let i = 0; i < history.length - 1; i++) {
            if (history[i].status === "Offline" && history[i + 1].status === "Online") {
                let offlineTime = new Date(history[i].timestamp);
                let onlineTime = new Date(history[i + 1].timestamp);
                totalDowntime += (onlineTime - offlineTime) / (1000 * 60); // Convert to minutes
            }
        }
        return totalDowntime;
    }

    function viewDeviceHistory(deviceId) {
        // Display device history (daily, weekly, monthly)
        const historyData = getDeviceHistory(deviceId);
        const historyContainer = document.createElement("div");

        historyContainer.innerHTML = `
            <h3>Device History</h3>
            <button onclick="showDeviceHistory('daily')">Daily</button>
            <button onclick="showDeviceHistory('weekly')">Weekly</button>
            <button onclick="showDeviceHistory('monthly')">Monthly</button>
            <div id="deviceHistoryContent"></div>
        `;

        document.body.appendChild(historyContainer);
        showDeviceHistory('daily', historyData);
    }

    function showDeviceHistory(timeFrame) {
        const historyContent = document.getElementById("deviceHistoryContent");

        // Logic to display history based on timeframe
        historyContent.innerHTML = `Showing ${timeFrame} data for the device.`;

        // Fetch or filter data according to daily, weekly, or monthly
    }

    fetchDevices();
});


