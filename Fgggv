const fs = require("fs");
const xlsx = require("xlsx");
const path = require("path");
const ping = require("ping");
const pLimit = require("p-limit");
const { DateTime } = require('luxon'); // Import Luxon for timezone handling

// Paths for Excel files
const archiverPath = path.join(__dirname, "../data/ArchiverData.xlsx");
const controllerPath = path.join(__dirname, "../data/ControllerData.xlsx");
const cameraPath = path.join(__dirname, "../data/CameraData.xlsx");
const serverPath = path.join(__dirname, "../data/ServerData.xlsx");

// Cache to store preloaded data
let allData = {};

// Function to normalize column headers
const normalizeHeaders = (data) => {
    return data.map((row) => {
        const normalizedRow = {};
        for (const key in row) {
            const normalizedKey = key.trim().toLowerCase().replace(/\s+/g, '_');
            normalizedRow[normalizedKey] = row[key];
        }
        return normalizedRow;
    });
};

// Function to load Excel data into cache
const loadExcelData = () => {
    if (Object.keys(allData).length === 0) { // Load only if not already loaded
        const loadSheet = (filePath) => {
            const workbook = xlsx.readFile(filePath);
            return normalizeHeaders(xlsx.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[0]]));
        };

        allData = {
            archivers: loadSheet(archiverPath),
            controllers: loadSheet(controllerPath),
            cameras: loadSheet(cameraPath),
            servers: loadSheet(serverPath),
        };

        // Initialize history for all devices
        for (const deviceList of Object.values(allData)) {
            deviceList.forEach(device => {
                if (!device.history) {
                    device.history = [];  // Initialize empty history array if not already present
                }
            });
        }

        console.log("Excel Data Loaded:", Object.keys(allData));
    }
};

// Fetch all IP addresses from loaded devices
const fetchAllIpAddress = () => {
    if (!allData || Object.keys(allData).length === 0) {
        console.error("Error: Device data is not loaded.");
        return [];
    }

    return Object.values(allData).flatMap(devices => devices.map(device => device.ip_address).filter(Boolean));
};

// Fetch Global Data with device summary
const fetchGlobalData = async () => {
    if (!allData || Object.keys(allData).length === 0) {
        console.error("Error: Device data is not loaded.");
        return null;
    }

    const allDevices = [...allData.cameras, ...allData.archivers, ...allData.controllers, ...allData.servers];

    await pingDevices(allDevices);
    const summary = calculateSummary(allData);

    return { summary, details: allData };
};

// Fetch Region Data with summary
const fetchRegionData = async (regionName) => {
    if (!allData || Object.keys(allData).length === 0) {
        console.error("Error: Device data is not loaded.");
        return null;
    }

    const filterByRegion = (devices) => 
        devices.filter(device => device.location?.toLowerCase() === regionName.toLowerCase());

    const regionDevices = {
        cameras: filterByRegion(allData.cameras),
        archivers: filterByRegion(allData.archivers),
        controllers: filterByRegion(allData.controllers),
        servers: filterByRegion(allData.servers),
    };

    await pingDevices([...regionDevices.cameras, ...regionDevices.archivers, ...regionDevices.controllers, ...regionDevices.servers]);

    const summary = calculateSummary(regionDevices);
    return { summary, details: regionDevices };
};

// Calculate Summary of Devices
const calculateSummary = (devices) => {
    const summary = {};

    for (const [key, deviceList] of Object.entries(devices)) {
        const total = deviceList.length;
        const online = deviceList.filter(device => device.status === "Online").length;
        const offline = total - online;

        summary[key] = { total, online, offline };
    }

    return {
        totalDevices: Object.values(summary).reduce((sum, { total }) => sum + total, 0),
        totalOnlineDevices: Object.values(summary).reduce((sum, { online }) => sum + online, 0),
        totalOfflineDevices: Object.values(summary).reduce((sum, { offline }) => sum + offline, 0),
        ...summary,
    };
};

// Function to Ping Devices and Cache Results
const cache = new Map();
const pingDevices = async (devices) => {
    const limit = pLimit(10); // Ping max 10 devices concurrently

    const pingPromises = devices.map((device) =>
        limit(async () => {
            if (!device.ip_address) {
                device.status = "IP Address Missing";
                return;
            }

            if (cache.has(device.ip_address)) {
                device.status = cache.get(device.ip_address);
            } else {
                device.status = await pingDevice(device.ip_address);
                cache.set(device.ip_address, device.status);
            }
        })
    );

    await Promise.all(pingPromises);
};

// Function to Ping a Single Device
const pingDevice = (ip) => {
    return new Promise((resolve) => {
        ping.sys.probe(ip, (isAlive) => {
            resolve(isAlive ? "Online" : "Offline");
        });
    });
};

// Function to fetch device history
const fetchDeviceHistory = async (device) => {
    const logFile = "./deviceLogs.json";
    let devicesLogs = fs.existsSync(logFile) ? JSON.parse(fs.readFileSync(logFile, "utf8")) : {};
  
    const deviceLogs = devicesLogs[device.ip];

    deviceLogs.forEach(log => {
        const convertedTimestamp = DateTime.fromISO(log.timestamp, { zone: 'utc' }).setZone('Asia/Kolkata').toISO();
        device.history.push({
            status: log.status,
            timestamp: convertedTimestamp
        });
    });

    console.log(`Device ${device.device_name || device.ip_address} history:`, device.history);
};

// Function to add device history
const addDeviceHistory = (device, status) => {
    const istTime = DateTime.now().setZone('Asia/Kolkata').toISO();

    device.history.push({ status: status, timestamp: istTime });

    device.history = device.history.filter(entry => {
        const entryTime = DateTime.fromISO(entry.timestamp);
        return entryTime > DateTime.now().minus({ months: 1 });
    });

    console.log(`Updated history for device ${device.device_name || device.ip_address}:`, device.history);
};

// Function to compute uptime & downtime from device history
const computeDeviceStats = (history) => {
    let uptime = 0, downtime = 0, downtimeDuration = 0;
    let lastStatus = history[0].status;
    let lastTimestamp = DateTime.fromISO(history[0].timestamp, { zone: 'Asia/Kolkata' }).toMillis();

    for (let i = 1; i < history.length; i++) {
        let currentStatus = history[i].status;
        let currentTime = DateTime.fromISO(history[i].timestamp, { zone: 'Asia/Kolkata' }).toMillis();
        let timeDiff = (currentTime - lastTimestamp) / 60000;

        if (timeDiff > 0) {
            if (lastStatus === "Online" && currentStatus === "Online") uptime += timeDiff;
            if (lastStatus === "Offline" && currentStatus === "Offline") downtime += timeDiff;
            if (lastStatus === "Offline" && currentStatus === "Online") downtimeDuration += timeDiff;
        }

        lastStatus = currentStatus;
        lastTimestamp = currentTime;
    }

    return { uptime: Math.round(uptime), downtime: Math.round(downtime), downtimeDuration: Math.round(downtimeDuration) };
};

// Preload Data
loadExcelData();

module.exports = { fetchGlobalData, fetchRegionData, fetchAllIpAddress, fetchRegionTrendData };
