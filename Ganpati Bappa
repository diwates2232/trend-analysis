Check API respoce Why this type of responce recieved for many information i have attached my excelService.js & App.js file 
do changes amd give me correct code 


API- http://localhost/api/regions/trend/details/apac
Responce -1
"region": "apac",
    "trends": [
      {
        "device_type": "Unknown",
        "device_name": "Unknown",
        "ip_address": "10.199.10.20",
        "uptime": "11d 6h 41m",
        "downtime": "0d 0h 0m",
        "downtimeDuration": "0d 2h 0m"
      },

respoce after refreshing API respoce

"region": "apac",
    "trends": [
      {
        "device_type": "Unknown",
        "device_name": "Unknown",
        "ip_address": "10.199.10.20",
        "uptime": "22d 13h 22m",
        "downtime": "0d 0h 0m",
        "downtimeDuration": "0d 4h 0m"
      },
      {
        "device_type": "Unknown",
        "device_name": "Unknown",
        "ip_address": "10.199.10.139",
        "uptime": "22d 17h 22m",
        "downtime": "0d 0h 0m",
        "downtimeDuration": "0d 0h 0m"
      },

excelservice.js


const fs = require("fs");
const xlsx = require("xlsx");
const path = require("path");
const ping = require("ping");
const pLimit = require("p-limit");
const { DateTime } = require("luxon"); // Import Luxon for timezone handling

// Paths for Excel files
const archiverPath = path.join(__dirname, "../data/ArchiverData.xlsx");
const controllerPath = path.join(__dirname, "../data/ControllerData.xlsx");
const cameraPath = path.join(__dirname, "../data/CameraData.xlsx");
const serverPath = path.join(__dirname, "../data/ServerData.xlsx");


// Log file for device status history
const logFile = "./deviceLogs.json";

// Cache to store preloaded data
let allData = {};
const activeDevices = {}; // Store active monitoring sessions

// Function to load logs
const loadLogs = () => fs.existsSync(logFile) ? JSON.parse(fs.readFileSync(logFile, "utf8")) : {};

// Function to save logs
const saveLogs = (logs) => fs.writeFileSync(logFile, JSON.stringify(logs, null, 2), "utf8");


// Function to normalize column headers
const normalizeHeaders = (data) => {
    return data.map((row) => {
        const normalizedRow = {};
        for (const key in row) {
            const normalizedKey = key.trim().toLowerCase().replace(/\s+/g, '_');
            normalizedRow[normalizedKey] = row[key];
        }
        return normalizedRow;
    });
};


// Function to load Excel data into cache
const loadExcelData = () => {
    if (Object.keys(allData).length === 0) {
        const loadSheet = (filePath) => {
            const workbook = xlsx.readFile(filePath);
            return normalizeHeaders(xlsx.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[0]]));
        };

        allData = {
            archivers: loadSheet(archiverPath),
            controllers: loadSheet(controllerPath),
            cameras: loadSheet(cameraPath),
            servers: loadSheet(serverPath),
        };

        for (const deviceList of Object.values(allData)) {
            deviceList.forEach(device => {
                if (!device.history) {
                    device.history = [];
                }
            });
        }

        console.log("Excel Data Loaded:", Object.keys(allData));
    }
};

// Fetch all IP addresses from loaded devices
const fetchAllIpAddress = () => {
    if (!allData || Object.keys(allData).length === 0) {
        console.error("Error: Device data is not loaded.");
        return [];
    }

    return Object.values(allData).flatMap(devices => devices.map(device => device.ip_address).filter(Boolean));
};



// Monitor device status and update logs
const monitorDevice = (device) => {
    const logs = loadLogs();
    const currentTime = DateTime.now().setZone("Asia/Kolkata").toISO();

    if (!logs[device.ip_address]) {
        logs[device.ip_address] = [];
    }

    let lastEntry = logs[device.ip_address].slice(-1)[0];
    let lastStatus = lastEntry ? lastEntry.status : "Unknown";

    if (lastStatus !== device.status) {
        console.log(`Status changed: ${device.device_name || device.ip_address} is now ${device.status}`);

        logs[device.ip_address].push({ status: device.status, timestamp: currentTime });
        saveLogs(logs);
    }

    if (device.status === "Online") {
        startUptime(device);
    } else {
        startDowntime(device);
    }
};

// Track uptime
const startUptime = (device) => {
    stopTracking(device);

    activeDevices[device.ip_address] = setInterval(() => {
        updateLogs(device, "Online");
    }, 60000);
};

// Track downtime
const startDowntime = (device) => {
    stopTracking(device);

    activeDevices[device.ip_address] = setInterval(() => {
        updateLogs(device, "Offline");
    }, 60000);
};

// Update logs for uptime and downtime
const updateLogs = (device, status) => {
    const logs = loadLogs();
    const currentTime = DateTime.now().setZone("Asia/Kolkata").toISO();

    logs[device.ip_address] = logs[device.ip_address] || [];
    logs[device.ip_address].push({ status, timestamp: currentTime });

    saveLogs(logs);
};

// Stop tracking when device status changes
const stopTracking = (device) => {
    if (activeDevices[device.ip_address]) {
        clearInterval(activeDevices[device.ip_address]);
        delete activeDevices[device.ip_address];
    }
};



// Function to Ping a Single Device
const pingDevice = (ip) => {
    return new Promise((resolve) => {
        ping.sys.probe(ip, (isAlive) => {
            resolve(isAlive ? "Online" : "Offline");
        });
    });
};

// Function to ping devices and cache results
const cache = new Map();
const pingDevices = async (devices) => {
    const limit = pLimit(10);

    const pingPromises = devices.map((device) =>
        limit(async () => {
            if (!device.ip_address) {
                device.status = "IP Address Missing";
                return;
            }

            if (cache.has(device.ip_address)) {
                device.status = cache.get(device.ip_address);
            } else {
                device.status = await pingDevice(device.ip_address);
                cache.set(device.ip_address, device.status);
            }

            monitorDevice(device);  // Ensure monitorDevice handles uptime/downtime properly
        })
    );

    await Promise.all(pingPromises);
};
// Fetch Global Data
const fetchGlobalData = async () => {
    if (!allData || Object.keys(allData).length === 0) {
        console.error("Error: Device data is not loaded.");
        return null;
    }

    const allDevices = [...allData.cameras, ...allData.archivers, ...allData.controllers, ...allData.servers];

    await pingDevices(allDevices);
    const summary = calculateSummary(allData);

    return { summary, details: allData };
};

// Fetch Region Data
const fetchRegionData = async (regionName) => {
    if (!allData || Object.keys(allData).length === 0) {
        console.error("Error: Device data is not loaded.");
        return null;
    }

    const filterByRegion = (devices) =>
        devices.filter(device => device.location?.toLowerCase() === regionName.toLowerCase());

    const regionDevices = {
        cameras: filterByRegion(allData.cameras),
        archivers: filterByRegion(allData.archivers),
        controllers: filterByRegion(allData.controllers),
        servers: filterByRegion(allData.servers),
    };

    await pingDevices([...regionDevices.cameras, ...regionDevices.archivers, ...regionDevices.controllers, ...regionDevices.servers]);

    const summary = calculateSummary(regionDevices);
    return { summary, details: regionDevices };
};

// Calculate summary of devices
const calculateSummary = (devices) => {
    const summary = {};

    for (const [key, deviceList] of Object.entries(devices)) {
        const total = deviceList.length;
        const online = deviceList.filter(device => device.status === "Online").length;
        const offline = total - online;

        summary[key] = { total, online, offline };
    }

    return {
        totalDevices: Object.values(summary).reduce((sum, { total }) => sum + total, 0),
        totalOnlineDevices: Object.values(summary).reduce((sum, { online }) => sum + online, 0),
        totalOfflineDevices: Object.values(summary).reduce((sum, { offline }) => sum + offline, 0),
        ...summary,
    };
};


// Helper function to compute uptime and downtime for a device
const computeDeviceStats = (history) => {
    let uptime = 0, downtime = 0, downtimeDuration = 0;
    let lastStatus = history[0]?.status || "Offline";
    let lastTimestamp = history[0] ? DateTime.fromISO(history[0].timestamp, { zone: 'Asia/Kolkata' }).toMillis() : DateTime.now().toMillis();

    for (let i = 1; i < history.length; i++) {
        let currentStatus = history[i].status;
        let currentTime = DateTime.fromISO(history[i].timestamp, { zone: 'Asia/Kolkata' }).toMillis();
        let timeDiff = (currentTime - lastTimestamp) / 60000; // Convert to minutes

        if (timeDiff > 0) {
            if (lastStatus === "Online") {
                uptime += timeDiff;
            } else if (lastStatus === "Offline") {
                downtime += timeDiff;
            }

            if (lastStatus === "Offline" && currentStatus === "Online") {
                downtimeDuration += downtime;
                downtime = 0;
            }
        }

        lastStatus = currentStatus;
        lastTimestamp = currentTime;
    }

    // Format the uptime and downtime in days, hours, minutes
    const formatTime = (minutes) => {
        const days = Math.floor(minutes / 1440); // 1440 minutes in a day
        const hours = Math.floor((minutes % 1440) / 60);
        const mins = Math.floor(minutes % 60);
        return `${days}d ${hours}h ${mins}m`;
    };

    return {
        uptime: formatTime(uptime),
        downtime: formatTime(downtime),
        downtimeDuration: formatTime(downtimeDuration)
    };
};

// Function to calculate trends for devices
const calculateTrend = (devices, timePeriod = "daily") => {
    let trends = [];

    for (const deviceType in devices) {
        const deviceList = devices[deviceType];
        
        for (const device of deviceList) {
            if (device.history && device.history.length > 0) {
                const stats = computeDeviceStats(device.history);

                trends.push({
                    device_type: device.device_type || "Unknown",
                    device_name: device.device_name || "Unknown",
                    ip_address: device.ip_address,
                    uptime: stats.uptime,
                    downtime: stats.downtime,
                    downtimeDuration: stats.downtimeDuration
                });
            }
        }
    }

    return trends;
};

// Updated function to fetch region trend data
const fetchRegionTrendData = async (region) => {
    if (!allData || Object.keys(allData).length === 0) {
        console.error("Error: Device data is not loaded.");
        return null;
    }

    const filterByRegion = (devices) => 
        devices.filter(device => device.location?.toLowerCase() === region.toLowerCase());

    const regionDevices = {
        cameras: filterByRegion(allData.cameras),
        archivers: filterByRegion(allData.archivers),
        controllers: filterByRegion(allData.controllers),
        servers: filterByRegion(allData.servers)
    };

    if (!regionDevices.cameras.length && !regionDevices.archivers.length && !regionDevices.controllers.length && !regionDevices.servers.length) {
        console.log(`No devices found for region: ${region}`);
        return null;
    }

    // Fetch history for each device
    await Promise.all([
        ...regionDevices.cameras.map(device => fetchDeviceHistory(device)),
        ...regionDevices.archivers.map(device => fetchDeviceHistory(device)),
        ...regionDevices.controllers.map(device => fetchDeviceHistory(device)),
        ...regionDevices.servers.map(device => fetchDeviceHistory(device))
    ]);

    // Calculate trends
    const trends = calculateTrend(regionDevices);

    return { 
        region,
        trends 
    };
};

// Fetch Device History
const fetchDeviceHistory = async (device) => {
    const devicesLogs = fs.existsSync(logFile) ? JSON.parse(fs.readFileSync(logFile, "utf8")) : {};
    
    if (!devicesLogs[device.ip_address]) {
        console.log(`No history found for device: ${device.device_name || "Unknown"} (${device.ip_address})`);
        return;
    }

    // Convert timestamps from UTC to IST
    devicesLogs[device.ip_address].forEach(log => {
        const convertedTimestamp = DateTime.fromISO(log.timestamp, { zone: 'utc' })
            .setZone('Asia/Kolkata')
            .toISO();

        if (!device.history) device.history = [];
        device.history.push({
            status: log.status,
            timestamp: convertedTimestamp
        });
    });

    // Ensure device name is correctly assigned
    if (!device.device_name) {
        device.device_name = device.name || "Unknown";
    }

    console.log(`Device history for ${device.device_name} (${device.ip_address}):`, device.history);
};


// Preload Data
loadExcelData();

module.exports = { fetchGlobalData, fetchRegionData, fetchAllIpAddress , fetchRegionTrendData };


File -2 

app.js



require("dotenv").config();
const express = require("express");
const cors = require("cors");
const bodyParser = require("body-parser");
const fs = require("fs");
const ping = require("ping");
const regionRoutes = require("./routes/regionRoutes");
const { fetchAllIpAddress, fetchRegionTrendData } = require("./services/excelService");


const app = express();
const PORT = process.env.PORT || 80;

// Middleware
app.use(
  cors({
    origin: "http://127.0.0.1:5500",
    methods: "GET,POST,PUT,DELETE",
    allowedHeaders: "Content-Type,Authorization",
  })
);
app.use(bodyParser.json());


// Routes
app.use("/api/regions", regionRoutes);


// Device Status Tracking
const devices = fetchAllIpAddress();
let deviceStatus = {};
const logFile = "./deviceLogs.json";

// Load previous logs if exists
let deviceLogs = fs.existsSync(logFile) ? JSON.parse(fs.readFileSync(logFile, "utf8")) : {};

// Function to log device status changes
function logDeviceChange(ip, status) {
  const timestamp = new Date().toISOString();

  if (!deviceLogs[ip]) {
    deviceLogs[ip] = [];
  }

  const lastLog = deviceLogs[ip].length ? deviceLogs[ip][deviceLogs[ip].length - 1] : null;

  // Log only if status changes
  if (!lastLog || lastLog.status !== status) {
    deviceLogs[ip].push({ status, timestamp });
    fs.writeFileSync(logFile, JSON.stringify(deviceLogs, null, 2));
  }
}

// Ping all devices and log changes
async function pingDevices() {
  for (const ip of devices) {
    try {
      const result = await ping.promise.probe(ip);
      const newStatus = result.alive ? "Online" : "Offline";

      if (deviceStatus[ip] !== newStatus) {
        logDeviceChange(ip, newStatus);
      }
      deviceStatus[ip] = newStatus;
    } catch (error) {
      console.error(`Error pinging ${ip}:`, error);
      deviceStatus[ip] = "Offline";
    }
  }
  console.log("Updated device status:", deviceStatus);
}
// Interval to update uptime/downtime and ping devices
setInterval(pingDevices, 60000);




// API to get real-time device status
app.get("/api/region/devices/status", (req, res) => {
  res.json(deviceStatus);
});




// API to fetch device history for all devices
app.get("/api/devices/history", (req, res) => {
  res.json(deviceLogs);
});


// API to fetch history of a specific device by IP address
app.get("/api/devices/history/:ip", (req, res) => {
  const deviceIp = req.params.ip;

  if (!deviceLogs[deviceIp]) {
    return res.status(404).json({ error: "Device history not found" });
  }

  res.json({ ip_address: deviceIp, history: deviceLogs[deviceIp] });
});

// API to fetch region device trends
app.get("/api/regions/devices/trend/details/:region", async (req, res) => {
  try {
    const region = req.params.region.toLowerCase();
    console.log("Requested Region:", region);

    const trends = await fetchRegionTrendData(region);
    return res.json({ region, trends });
  } catch (error) {
    console.error("Error fetching trend data:", error);
    return res.status(500).json({ error: "Internal server error", details: error.message });
  }
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).send("Something went wrong!");
});




// Start Server
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
  pingDevices(); // Initial ping on startup
});

