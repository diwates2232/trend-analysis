// pingAgent.js (run on each region’s host)
const express = require('express');
const ping = require('ping');
const xlsx = require('xlsx');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3001;
const regionName = process.env.REGION; // e.g. “APAC”, “EMEA” 

// Load only this region’s sheet or filter by region column
const workbook = xlsx.readFile(path.join(__dirname, '../data/AllDevices.xlsx'));
const rows = xlsx.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[0]]);
const devices = rows
  .filter(r => r.Region.toLowerCase() === regionName.toLowerCase())
  .map(r => ({ name: r.DeviceName, ip: r.IP_Address }));

app.get('/ping', async (req, res) => {
  const results = await Promise.all(devices.map(async d => {
    const alive = await ping.promise.probe(d.ip);
    return { region: regionName, name: d.name, ip: d.ip, status: alive.alive ? 'Online' : 'Offline' };
  }));
  res.json(results);
});

app.listen(PORT, () => console.log(`${regionName} Ping Agent listening on ${PORT}`));




// services/excelService.js (excerpt)
const axios = require('axios');

// Map region → agent URL
const AGENT_URLS = {
  apac: 'http://apac-agent.local:3001/ping',
  emea: 'http://vilnius-agent.local:3001/ping',
  namer: 'http://cr-agent.local:3001/ping'
};

async function pingRegionAgent(region) {
  const url = AGENT_URLS[region.toLowerCase()];
  if (!url) throw new Error(`No agent configured for region ${region}`);
  const resp = await axios.get(url);
  return resp.data;  // array of { ip, status, … }
}

// Replace pingDevices() with:
const pingDevices = async (devices) => {
  // Group devices by region
  const byRegion = devices.reduce((acc, dev) => {
    const r = (dev.location || '').toLowerCase();
    acc[r] = acc[r] || [];
    acc[r].push(dev);
    return acc;
  }, {});

  // For each region, call its agent once
  for (const [region, devList] of Object.entries(byRegion)) {
    try {
      const agentResults = await pingRegionAgent(region);
      // Map agentResults back into your `devList`
      const statusMap = new Map(agentResults.map(r => [r.ip, r.status]));
      devList.forEach(dev => {
        dev.status = statusMap.get(dev.ip) || 'Unknown';
        monitorDevice(dev);
      });
    } catch (err) {
      console.error(`Error pinging region ${region}:`, err);
      devList.forEach(dev => {
        dev.status = 'Error';
        monitorDevice(dev);
      });
    }
  }
};












I have made Dashboard for Devices Health Monitoring 

In this Dashboard Thare are multilpe Devices , Multile Location.
issue is there APAC region Devices have access to ping on our Server .
There is no problem regarding APAC Region .

But There are some Devices are network Restricted.
EMEA region - LT.Vilinus devices have diffrent network policy.
this device are not ping on our APAC server.
but they are ping on their Vilinus Server.

same issue for Moscow , Costa Rica Devices.

so can i do this 

We run 3 Script on Diffrent Server.

Like We ping APAC Devices on our APAC Server.

Ping Emea Devices on Vilinus Server.

First Store Both Server data on database- Which is combine for both

Both Server data Store ( Devices Status data ) are store in database.
Then Render data On UI froom dtabase.

is it posible.
