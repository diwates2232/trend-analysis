#sidebar-content {
  padding: 1rem;
}

.summary-container {
  display: flex;
  flex-wrap: wrap;
  gap: 1rem;
  margin-bottom: 1rem;
}

.summary-card {
  flex: 1 1 150px;       /* grow/shrink, min width */
  min-width: 150px;
  padding: 1rem;
  border-radius: 8px;
  background: #fff;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  text-align: center;
}

.summary-card h4 {
  margin: 0 0 0.5rem;
  font-size: 1rem;
  color: #333;
}

.summary-card p {
  margin: 0;
  font-size: 1.5rem;
  font-weight: bold;
  color: #007bff;
}

/* Optional: tweak the “Total …” cards to match the style of the h4/p cards */
#sidebar-content .summary-card[id^="total-"] {
  display: flex;
  flex-direction: column;
  justify-content: center;
  color: #333;
  font-size: 1rem;
  font-weight: 500;
}

#sidebar-content .summary-card[id^="total-"]::before {
  content: attr(id);
  display: none; /* hide the attribute name; we only keep the inner text */
}







<div id="sidebar-content">
  <div class="summary-container">
    <!-- First row: overall totals -->
    <div class="summary-card" id="total-devices">Total Devices: 0</div>
    <div class="summary-card" id="total-online">Total Online Devices: 0</div>
    <div class="summary-card" id="total-cameras">Total Cameras: 0</div>
    <div class="summary-card" id="total-controllers">Total Controllers: 0</div>
    <div class="summary-card" id="total-archivers">Total Archivers: 0</div>
    <div class="summary-card" id="total-servers">Total Servers: 0</div>
  </div>

  <div class="summary-container">
    <!-- Second row: downtime/offline counts -->
    <div class="summary-card">
      <h4>High Downtime</h4>
      <p id="count-downtime-over-15">0</p>
    </div>
    <div class="summary-card">
      <h4>Currently Offline</h4>
      <p id="count-currently-offline">0</p>
    </div>
  </div>
</div>




        <div id="sidebar-content">
        
            <div class="summary-container">
           
                <div class="summary-card" id="total-devices">Total Devices: 0</div>
                <div class="summary-card" id="total-online">Total Online Devices: 0</div>
                <div class="summary-card" id="total-cameras">Total Cameras: 0</div>
                <div class="summary-card" id="total-controllers">Total Controllers: 0</div>
                <div class="summary-card" id="total-archivers">Total Archivers: 0</div>
                <div class="summary-card" id="total-servers">Total Servers: 0</div>    
            </div>
            
            
            <div class="summary-cards">
                <div id="count-downtime-over-15-card" class="summary-card">
                  <h4>High Downtime</h4>
                  <p id="count-downtime-over-15">0</p>
                </div>
                <div id="count-currently-offline-card" class="summary-card">
                  <h4>Currently Offline</h4>
                  <p id="count-currently-offline">0</p>
                </div>
              </div>
              












<div class="summary-cards">
  <div id="count-downtime-over-15-card" class="summary-card">
    <h4>High Downtime</h4>
    <p id="count-downtime-over-15">0</p>
  </div>
  <div id="count-currently-offline-card" class="summary-card">
    <h4>Currently Offline</h4>
    <p id="count-currently-offline">0</p>
  </div>
</div>







let deviceUptimeTimers = {};
let deviceDowntimeTimers = {};

// Utility to turn an IP (or any string) into a safe DOM‑ID fragment
function sanitizeId(str) {
    return (str || '').replace(/[^a-zA-Z0-9]/g, '_');
}

function fetchDeviceData() {
    const selectedRegion = document.getElementById('region').value;

    if (selectedRegion === 'All') {
        fetch(`http://localhost/api/regions/all-details`)
            .then(res => res.json())
            .then(allRegionsData => {
                let combinedDetails = { cameras: [], archivers: [], controllers: [], servers: [] };
                Object.values(allRegionsData).forEach(regionData => {
                    if (regionData.details) {
                        ['cameras','archivers','controllers','servers'].forEach(type => {
                            combinedDetails[type].push(...(regionData.details[type]||[]));
                        });
                    }
                });
                fetchDeviceHistory(combinedDetails);
            })
            .catch(err => console.error('Error fetching all regions data:', err));
    } else {
        fetch(`http://localhost/api/regions/details/${selectedRegion}`)
            .then(res => res.json())
            .then(regionData => {
                const d = regionData.details;
                const total = (d.cameras?.length||0)+(d.archivers?.length||0)+(d.controllers?.length||0)+(d.servers?.length||0);
                const online = ([...(d.cameras||[]),...(d.archivers||[]),...(d.controllers||[]),...(d.servers||[])]
                    .filter(dev => dev.status==="Online").length);
                const setIf = (id,txt)=>{const el=document.getElementById(id); if(el) el.innerText=txt;};
                setIf("total-devices", `Total Devices: ${total}`);
                setIf("total-online", `Total Online Devices: ${online}`);
                setIf("total-cameras", `Total Cameras: ${d.cameras?.length||0}`);
                setIf("total-controllers", `Total Controllers: ${d.controllers?.length||0}`);
                setIf("total-archivers", `Total Archivers: ${d.archivers?.length||0}`);
                setIf("total-servers", `Total Servers: ${d.servers?.length||0}`);
                fetchDeviceHistory(d);
            })
            .catch(err => console.error('Error fetching device data:', err));
    }
}

function fetchDeviceHistory(details) {
    fetch(`http://localhost/api/devices/history`)
        .then(res => res.json())
        .then(historyData => {
            populateDeviceTable(details, historyData);
            window.deviceHistoryData = historyData;
        })
        .catch(err => console.error('Error fetching device history:', err));
}

function populateDeviceTable(details, historyData) {
    const tbody = document.getElementById('device-table').getElementsByTagName('tbody')[0];
    tbody.innerHTML = '';
    let list = [];

    ['cameras','archivers','controllers','servers'].forEach(type => {
        details[type]?.forEach(dev => {
            const ip = dev.ip_address;
            const safe = sanitizeId(ip);
            const name = dev[type.slice(0,-1)+'name']||'Unknown';
            const category = type.slice(0,-1).toUpperCase();
            const region = dev.location||'Unknown';
            const hist = historyData[ip]||[];
            const current = dev.status || (hist.length? hist[hist.length-1].status : 'Unknown');
            const downCount = hist.filter(e=>e.status==='Offline').length;

            // Only show offline or >15 downtimes
            if (current==='Offline' || downCount>15) {
                list.push({ ip, safe, name, category, region, current, hist, downCount });
            }
        });
    });

    list.sort((a,b)=>b.downCount - a.downCount);

    // compute our two new summary counts:
    const downtimeOver15Count = list.filter(d=>d.downCount>15).length;
    const currentlyOfflineCount = list.filter(d=>d.current==='Offline').length;
    const setIf = (id, txt) => { const el = document.getElementById(id); if (el) el.innerText = txt; };
    setIf('count-downtime-over-15', `Devices with >15 downtimes: ${downtimeOver15Count}`);
    setIf('count-currently-offline', `Devices currently Offline: ${currentlyOfflineCount}`);

    if (!list.length) {
        const row = tbody.insertRow();
        const cell = row.insertCell();
        cell.colSpan = 10;
        cell.textContent = "No devices found";
        cell.style.textAlign = "center";
        cell.style.fontWeight = "bold";
        updateDisplayedDeviceCount(0);
        return;
    }

    list.forEach((dev, idx) => {
        const row = tbody.insertRow();
        row.style.border = "1px solid black";
        row.innerHTML = `
            <td>${idx+1}</td>
            <td>${dev.ip}</td>
            <td>${dev.name}</td>
            <td>${dev.category}</td>
            <td>${dev.region}</td>
            <td id="uptime-${dev.safe}">0h/0m/0s</td>
            <td id="downtime-count-${dev.safe}">${dev.downCount}</td>
            <td id="downtime-${dev.safe}">0h/0m/0s</td>
            <td><button onclick="openDeviceHistory('${dev.ip}','${dev.name}')">View History</button></td>
            <td id="remark-${dev.safe}">Device working properly</td>
        `;
        row.style.color = dev.current==="Online" ? "green" : "red";

        if (dev.current==="Online") {
            startUptime(dev.ip, dev.hist);
        } else {
            startDowntime(dev.ip, dev.hist, dev.category);
        }
        updateRemarks(dev.ip, dev.hist, dev.category);
    });

    filterData();
}

function startUptime(ip, hist) {
    const safe = sanitizeId(ip);
    clearInterval(deviceDowntimeTimers[safe]);
    const lastOn = hist.filter(e=>e.status==='Online').pop();
    if (!lastOn) return;
    const start = new Date(lastOn.timestamp).getTime();
    deviceUptimeTimers[safe] = setInterval(()=>{
        const secs = Math.floor((Date.now()-start)/1000);
        const el = document.getElementById(`uptime-${safe}`);
        if (el) el.innerText = formatDuration(secs);
    },1000);
}

function startDowntime(ip, hist, category) {
    const safe = sanitizeId(ip);
    clearInterval(deviceUptimeTimers[safe]);
    const lastOff = hist.filter(e=>e.status==='Offline').pop();
    if (!lastOff) return;
    const start = new Date(lastOff.timestamp).getTime();
    deviceDowntimeTimers[safe] = setInterval(()=>{
        const secs = Math.floor((Date.now()-start)/1000);
        const el = document.getElementById(`downtime-${safe}`);
        if (el) el.innerText = formatDuration(secs);
        updateDowntimeCount(ip, hist, category);
    },1000);
}

// **Fix Downtime Count and Remarks Update**
function updateDowntimeCount(ip, hist, category) {
    const safe = sanitizeId(ip);
    const offs = hist.filter(e=>e.status==='Offline');
    const filtered = offs.filter((e,i,arr)=>{
        if (category==='SERVER') return true;
        if (i===0) return true;
        return (new Date(e.timestamp)-new Date(arr[i-1].timestamp))/1000 >=300;
    });
    const count = filtered.length;
    const el = document.getElementById(`downtime-count-${safe}`);
    if (el) el.innerText = count;
    updateRemarks(ip, hist, category);
}

// **Update Remarks**
function updateRemarks(ip, hist, category) {
    const safe = sanitizeId(ip);
    const offs = hist.filter(e=>e.status==='Offline');
    const filtered = offs.filter((e,i,arr)=>{
        if (category==='SERVER') return true;
        if (i===0) return true;
        return (new Date(e.timestamp)-new Date(arr[i-1].timestamp))/1000 >=300;
    });
    const count = filtered.length;
    const lastStatus = hist.length? hist[hist.length-1].status : 'Unknown';
    const el = document.getElementById(`remark-${safe}`);
    if (!el) return;

    if (lastStatus==='Offline') {
        el.innerText = count>=10 ? "Device is Offline, needs repair." : "Device is Offline.";
    }
    else if (lastStatus==='Online') {
        if (count>=10) el.innerText = "Device is Online, needs repair.";
        else if (count>0) el.innerText = `Device is Online, it had ${count} downtime occurrences.`;
        else el.innerText = "Device is Online.";
    }
    else {
        el.innerText = "Device status unknown.";
    }
    const dc = document.getElementById(`downtime-count-${safe}`);
    if (dc) dc.innerText = count;
}

function formatDuration(seconds) {
    const d = Math.floor(seconds/86400);
    const h = Math.floor((seconds%86400)/3600);
    const m = Math.floor((seconds%3600)/60);
    const s = Math.round(seconds%60);
    const parts = [];
    if (d) parts.push(`${d}d`);
    if (h) parts.push(`${h}h`);
    if (m) parts.push(`${m}m`);
    if (s||!parts.length) parts.push(`${s}s`);
    return parts.join('/');
}

function openDeviceHistory(ip,name) {
    if (!window.deviceHistoryData) return console.error("No history loaded");
    const hist = window.deviceHistoryData[ip]||[];
    displayDeviceHistory(ip,name,hist);
    const modal = document.getElementById('device-history-modal');
    if (modal) modal.style.display='block';
}

function calculateDowntimeDuration(ts, hist) {
    const start = new Date(ts).getTime();
    const nextUp = hist.find(e=> e.status==='Online' && new Date(e.timestamp).getTime()>start);
    if (nextUp) return formatDuration((new Date(nextUp.timestamp).getTime()-start)/1000);
    return formatDuration((Date.now()-start)/1000);
}

function displayDeviceHistory(ip,name,hist) {
    const header = document.getElementById('device-history-header');
    const container = document.getElementById('device-history');
    if (header) {
        header.innerHTML=`
            <h3>Device History</h3>
            <p><strong>Device Name:</strong> ${name}</p>
            <p><strong>Device IP:</strong> ${ip}</p>
            <hr>`;
    }
    if (!container) return;
    container.innerHTML='';
    if (!hist.length) {
        container.innerHTML='<p>No history available for this device.</p>';
        return;
    }
    let html = `
        <table border="1" style="width:100%; text-align:center; border-collapse:collapse;">
            <thead><tr>
                <th>Sr. No</th><th>Date</th><th>Day</th><th>Time</th><th>Status</th><th>Downtime Duration</th>
            </tr></thead><tbody>`;
    let lastOff = null;
    hist.forEach((e,i)=>{
        const d = new Date(e.timestamp);
        const date = d.toLocaleDateString();
        const day = d.toLocaleString('en-US',{weekday:'long'});
        const time = d.toLocaleTimeString();
        let dur = '-';
        if (e.status==='Offline') lastOff = e.timestamp;
        else if (e.status==='Online' && lastOff) {
            dur = calculateDowntimeDuration(lastOff,hist);
            lastOff = null;
        }
        html+=`
            <tr>
                <td>${i+1}</td><td>${date}</td><td>${day}</td><td>${time}</td>
                <td style="color:${e.status==='Online'?'green':'red'}">${e.status}</td>
                <td>${dur}</td>
            </tr>`;
    });
    html+=`</tbody></table>`;
    container.innerHTML=html;
}

function closeHistoryModal() {
    const modal = document.getElementById('device-history-modal');
    if (modal) modal.style.display='none';
}

function filterData() {
    const typeSel = document.getElementById('device-type').value.toUpperCase();
    const remarkSel = document.getElementById('remark-filter').value.toUpperCase();
    const rows = document.getElementById('device-table').getElementsByTagName('tbody')[0].rows;
    let count = 0;
    for (let row of rows) {
        const type = row.cells[3].textContent.toUpperCase();
        const remark = row.cells[9].textContent.trim().toUpperCase();
        const show = (typeSel==='ALL'||type===typeSel) && (remarkSel==='ALL'||remark.includes(remarkSel));
        row.style.display = show? '':'none';
        if (show) count++;
    }
    updateDisplayedDeviceCount(count);
}

function updateDisplayedDeviceCount(count) {
    const el = document.getElementById('device-count');
    if (el) el.innerText = `Displayed Devices: ${count}`;
}

document.addEventListener("DOMContentLoaded", ()=>{
    const r = document.getElementById('region');
    if (r) r.addEventListener('change', fetchDeviceData);
    const t = document.getElementById('device-type');
    if (t) t.addEventListener('change', filterData);
    const f = document.getElementById('remark-filter');
    if (f) f.addEventListener('change', filterData);
    fetchDeviceData();
});

function exportDeviceTableToExcel() {
    const tbl = document.getElementById("device-table");
    if (!tbl) return;
    const wb = XLSX.utils.table_to_book(tbl, { sheet: "Device Table" });
    XLSX.writeFile(wb, "Device_Table.xlsx");
}

function exportDeviceHistoryToExcel() {
    const histTbl = document.querySelector("#device-history-modal table");
    if (!histTbl) return alert("Please open a device's history first.");
    const wb = XLSX.utils.table_to_book(histTbl, { sheet: "Device History" });
    XLSX.writeFile(wb, "Device_History.xlsx");
}






<div id="count-downtime-over-15"></div>
<div id="count-currently-offline"></div>










let deviceUptimeTimers = {};
let deviceDowntimeTimers = {};

// Utility to turn an IP (or any string) into a safe DOM‑ID fragment
function sanitizeId(str) {
    return (str || '').replace(/[^a-zA-Z0-9]/g, '_');
}

function fetchDeviceData() {
    const selectedRegion = document.getElementById('region').value;

    if (selectedRegion === 'All') {
        fetch(`http://localhost/api/regions/all-details`)
            .then(res => res.json())
            .then(allRegionsData => {
                let combinedDetails = { cameras: [], archivers: [], controllers: [], servers: [] };
                Object.values(allRegionsData).forEach(regionData => {
                    if (regionData.details) {
                        ['cameras','archivers','controllers','servers'].forEach(type => {
                            combinedDetails[type].push(...(regionData.details[type]||[]));
                        });
                    }
                });
                fetchDeviceHistory(combinedDetails);
            })
            .catch(err => console.error('Error fetching all regions data:', err));
    } else {
        fetch(`http://localhost/api/regions/details/${selectedRegion}`)
            .then(res => res.json())
            .then(regionData => {
                const d = regionData.details;
                const total = (d.cameras?.length||0)+(d.archivers?.length||0)+(d.controllers?.length||0)+(d.servers?.length||0);
                const online = ([...(d.cameras||[]),...(d.archivers||[]),...(d.controllers||[]),...(d.servers||[])]
                    .filter(dev => dev.status==="Online").length);
                const setIf = (id,txt)=>{const el=document.getElementById(id); if(el) el.innerText=txt;};
                setIf("total-devices", `Total Devices: ${total}`);
                setIf("total-online", `Total Online Devices: ${online}`);
                setIf("total-cameras", `Total Cameras: ${d.cameras?.length||0}`);
                setIf("total-controllers", `Total Controllers: ${d.controllers?.length||0}`);
                setIf("total-archivers", `Total Archivers: ${d.archivers?.length||0}`);
                setIf("total-servers", `Total Servers: ${d.servers?.length||0}`);
                fetchDeviceHistory(d);
            })
            .catch(err => console.error('Error fetching device data:', err));
    }
}

function fetchDeviceHistory(details) {
    fetch(`http://localhost/api/devices/history`)
        .then(res => res.json())
        .then(historyData => {
            populateDeviceTable(details, historyData);
            window.deviceHistoryData = historyData;
        })
        .catch(err => console.error('Error fetching device history:', err));
}

function populateDeviceTable(details, historyData) {
    const tbody = document.getElementById('device-table').getElementsByTagName('tbody')[0];
    tbody.innerHTML = '';
    let list = [];

    ['cameras','archivers','controllers','servers'].forEach(type => {
        details[type]?.forEach(dev => {
            const ip = dev.ip_address;
            const safe = sanitizeId(ip);
            const name = dev[type.slice(0,-1)+'name']||'Unknown';
            const category = type.slice(0,-1).toUpperCase();
            const region = dev.location||'Unknown';
            const hist = historyData[ip]||[];
            const current = dev.status || (hist.length? hist[hist.length-1].status : 'Unknown');
            const downCount = hist.filter(e=>e.status==='Offline').length;

            if (current==='Offline' || downCount>15) {
                list.push({ ip, safe, name, category, region, current, hist, downCount });
            }
        });
    });

    list.sort((a,b)=>b.downCount - a.downCount);

    if (!list.length) {
        const row = tbody.insertRow();
        const cell = row.insertCell();
        cell.colSpan = 10;
        cell.textContent = "No devices found";
        cell.style.textAlign = "center";
        cell.style.fontWeight = "bold";
        updateDisplayedDeviceCount(0);
        return;
    }

    list.forEach((dev, idx) => {
        const row = tbody.insertRow();
        row.style.border = "1px solid black";
        row.innerHTML = `
            <td>${idx+1}</td>
            <td>${dev.ip}</td>
            <td>${dev.name}</td>
            <td>${dev.category}</td>
            <td>${dev.region}</td>
            <td id="uptime-${dev.safe}">0h/0m/0s</td>
            <td id="downtime-count-${dev.safe}">${dev.downCount}</td>
            <td id="downtime-${dev.safe}">0h/0m/0s</td>
            <td><button onclick="openDeviceHistory('${dev.ip}','${dev.name}')">View History</button></td>
            <td id="remark-${dev.safe}">Device working properly</td>
        `;
        row.style.color = dev.current==="Online" ? "green" : "red";

        if (dev.current==="Online") {
            startUptime(dev.ip, dev.hist);
        } else {
            startDowntime(dev.ip, dev.hist, dev.category);
        }
        updateRemarks(dev.ip, dev.hist, dev.category);
    });

    filterData();
}

function startUptime(ip, hist) {
    const safe = sanitizeId(ip);
    clearInterval(deviceDowntimeTimers[safe]);
    const lastOn = hist.filter(e=>e.status==='Online').pop();
    if (!lastOn) return;
    const start = new Date(lastOn.timestamp).getTime();
    deviceUptimeTimers[safe] = setInterval(()=>{
        const secs = Math.floor((Date.now()-start)/1000);
        const el = document.getElementById(`uptime-${safe}`);
        if (el) el.innerText = formatDuration(secs);
    },1000);
}

function startDowntime(ip, hist, category) {
    const safe = sanitizeId(ip);
    clearInterval(deviceUptimeTimers[safe]);
    const lastOff = hist.filter(e=>e.status==='Offline').pop();
    if (!lastOff) return;
    const start = new Date(lastOff.timestamp).getTime();
    deviceDowntimeTimers[safe] = setInterval(()=>{
        const secs = Math.floor((Date.now()-start)/1000);
        const el = document.getElementById(`downtime-${safe}`);
        if (el) el.innerText = formatDuration(secs);
        updateDowntimeCount(ip, hist, category);
    },1000);
}

// **Fix Downtime Count and Remarks Update**
function updateDowntimeCount(ip, hist, category) {
    const safe = sanitizeId(ip);
    const offs = hist.filter(e=>e.status==='Offline');
    const filtered = offs.filter((e,i,arr)=>{
        if (category==='SERVER') return true;
        if (i===0) return true;
        return (new Date(e.timestamp)-new Date(arr[i-1].timestamp))/1000 >=300;
    });
    const count = filtered.length;
    const el = document.getElementById(`downtime-count-${safe}`);
    if (el) el.innerText = count;
    updateRemarks(ip, hist, category);
}

// **Update Remarks**
function updateRemarks(ip, hist, category) {
    const safe = sanitizeId(ip);
    const offs = hist.filter(e=>e.status==='Offline');
    const filtered = offs.filter((e,i,arr)=>{
        if (category==='SERVER') return true;
        if (i===0) return true;
        return (new Date(e.timestamp)-new Date(arr[i-1].timestamp))/1000 >=300;
    });
    const count = filtered.length;
    const lastStatus = hist.length? hist[hist.length-1].status : 'Unknown';
    const el = document.getElementById(`remark-${safe}`);
    if (!el) return;

    if (lastStatus==='Offline') {
        el.innerText = count>=10 ? "Device is Offline, needs repair." : "Device is Offline.";
    }
    else if (lastStatus==='Online') {
        if (count>=10) el.innerText = "Device is Online, needs repair.";
        else if (count>0) el.innerText = `Device is Online, it had ${count} downtime occurrences.`;
        else el.innerText = "Device is Online.";
    }
    else {
        el.innerText = "Device status unknown.";
    }
    const dc = document.getElementById(`downtime-count-${safe}`);
    if (dc) dc.innerText = count;
}

function formatDuration(seconds) {
    const d = Math.floor(seconds/86400);
    const h = Math.floor((seconds%86400)/3600);
    const m = Math.floor((seconds%3600)/60);
    const s = Math.round(seconds%60);
    const parts = [];
    if (d) parts.push(`${d}d`);
    if (h) parts.push(`${h}h`);
    if (m) parts.push(`${m}m`);
    if (s||!parts.length) parts.push(`${s}s`);
    return parts.join('/');
}

function openDeviceHistory(ip, name) {
    if (!window.deviceHistoryData) return console.error("No history loaded");
    const hist = window.deviceHistoryData[ip]||[];
    displayDeviceHistory(ip,name,hist);
    const modal = document.getElementById('device-history-modal');
    if (modal) modal.style.display='block';
}

function calculateDowntimeDuration(ts, hist) {
    const start = new Date(ts).getTime();
    const nextUp = hist.find(e=> e.status==='Online' && new Date(e.timestamp).getTime()>start);
    if (nextUp) return formatDuration((new Date(nextUp.timestamp).getTime()-start)/1000);
    return formatDuration((Date.now()-start)/1000);
}

function displayDeviceHistory(ip,name,hist) {
    const header = document.getElementById('device-history-header');
    const container = document.getElementById('device-history');
    if (header) {
        header.innerHTML=`
            <h3>Device History</h3>
            <p><strong>Device Name:</strong> ${name}</p>
            <p><strong>Device IP:</strong> ${ip}</p>
            <hr>`;
    }
    if (!container) return;
    container.innerHTML='';
    if (!hist.length) {
        container.innerHTML='<p>No history available for this device.</p>';
        return;
    }
    let html = `
        <table border="1" style="width:100%; text-align:center; border-collapse:collapse;">
            <thead><tr>
                <th>Sr. No</th><th>Date</th><th>Day</th><th>Time</th><th>Status</th><th>Downtime Duration</th>
            </tr></thead><tbody>`;
    let lastOff = null;
    hist.forEach((e,i)=>{
        const d = new Date(e.timestamp);
        const date = d.toLocaleDateString();
        const day = d.toLocaleString('en-US',{weekday:'long'});
        const time = d.toLocaleTimeString();
        let dur = '-';
        if (e.status==='Offline') lastOff = e.timestamp;
        else if (e.status==='Online' && lastOff) {
            dur = calculateDowntimeDuration(lastOff,hist);
            lastOff = null;
        }
        html+=`
            <tr>
                <td>${i+1}</td><td>${date}</td><td>${day}</td><td>${time}</td>
                <td style="color:${e.status==='Online'?'green':'red'}">${e.status}</td>
                <td>${dur}</td>
            </tr>`;
    });
    html+=`</tbody></table>`;
    container.innerHTML=html;
}

function closeHistoryModal() {
    const modal = document.getElementById('device-history-modal');
    if (modal) modal.style.display='none';
}

function filterData() {
    const typeSel = document.getElementById('device-type').value.toUpperCase();
    const remarkSel = document.getElementById('remark-filter').value.toUpperCase();
    const rows = document.getElementById('device-table').getElementsByTagName('tbody')[0].rows;
    let count = 0;
    for (let row of rows) {
        const type = row.cells[3].textContent.toUpperCase();
        const remark = row.cells[9].textContent.trim().toUpperCase();
        const show = (typeSel==='ALL'||type===typeSel) && (remarkSel==='ALL'||remark.includes(remarkSel));
        row.style.display = show? '':'none';
        if (show) count++;
    }
    updateDisplayedDeviceCount(count);
}

function updateDisplayedDeviceCount(count) {
    const el = document.getElementById('device-count');
    if (el) el.innerText = `Displayed Devices: ${count}`;
}

document.addEventListener("DOMContentLoaded", ()=>{
    const r = document.getElementById('region');
    if (r) r.addEventListener('change', fetchDeviceData);
    const t = document.getElementById('device-type');
    if (t) t.addEventListener('change', filterData);
    const f = document.getElementById('remark-filter');
    if (f) f.addEventListener('change', filterData);
    fetchDeviceData();
});

function exportDeviceTableToExcel() {
    const tbl = document.getElementById("device-table");
    if (!tbl) return;
    const wb = XLSX.utils.table_to_book(tbl, { sheet: "Device Table" });
    XLSX.writeFile(wb, "Device_Table.xlsx");
}

function exportDeviceHistoryToExcel() {
    const histTbl = document.querySelector("#device-history-modal table");
    if (!histTbl) return alert("Please open a device's history first.");
    const wb = XLSX.utils.table_to_book(histTbl, { sheet: "Device History" });
    XLSX.writeFile(wb, "Device_History.xlsx");
}







read below Summary.js file also and sovle same error as early solve error.


Error is -

ncaught ReferenceError: deviceType is not defined
    at summary.js:744:9
    at Array.filter (<anonymous>)
    at updateDowntimeCount (summary.js:743:51)
    at summary.js:732:9Understand this error
218summary.js:744 Uncaught ReferenceError: deviceType is not defined
    at summary.js:744:9
    at Array.filter (<anonymous>)
    at updateDowntimeCount (summary.js:743:51)
    at summary.js:732:9



also same error about Remark section.
check carefully js file and give me updated js file.


let deviceUptimeTimers = {};
let deviceDowntimeTimers = {};

function fetchDeviceData() {
    const selectedRegion = document.getElementById('region').value;

    if (selectedRegion === 'All') {
        fetch(`http://localhost/api/regions/all-details`)  // Adjust API endpoint if needed
            .then(response => response.json())
            .then(allRegionsData => {
                let combinedDetails = {
                    cameras: [],
                    archivers: [],
                    controllers: [],
                    servers: []
                };

                // Merge all devices from different regions into a single list
                Object.values(allRegionsData).forEach(regionData => {
                    if (regionData.details) {
                        ['cameras', 'archivers', 'controllers', 'servers'].forEach(deviceType => {
                            if (regionData.details[deviceType]) {
                                combinedDetails[deviceType].push(...regionData.details[deviceType]);
                            }
                        });
                    }
                });

                fetchDeviceHistory(combinedDetails);
            })
            .catch(error => console.error('Error fetching all regions data:', error));
    } else {
        fetch(`http://localhost/api/regions/details/${selectedRegion}`)
            .then(response => response.json())
            .then(regionData => {
                const details = regionData.details;
                const totalDevices = 
                    (details.cameras?.length || 0) + 
                    (details.archivers?.length || 0) + 
                    (details.controllers?.length || 0) + 
                    (details.servers?.length || 0);
                
                const totalOnlineDevices = [
                    ...details.cameras || [],
                    ...details.archivers || [],
                    ...details.controllers || [],
                    ...details.servers || []
                ].filter(device => device.status === "Online").length;
                
                document.getElementById("total-devices").innerText = `Total Devices: ${totalDevices}`;
                document.getElementById("total-online").innerText = `Total Online Devices: ${totalOnlineDevices}`;
                document.getElementById("total-cameras").innerText = `Total Cameras: ${details.cameras?.length || 0}`;
                document.getElementById("total-controllers").innerText = `Total Controllers: ${details.controllers?.length || 0}`;
                document.getElementById("total-archivers").innerText = `Total Archivers: ${details.archivers?.length || 0}`;
                document.getElementById("total-servers").innerText = `Total Servers: ${details.servers?.length || 0}`;
                
                fetchDeviceHistory(regionData.details);
            })
            .catch(error => console.error('Error fetching device data:', error));
    }
}

function fetchDeviceHistory(regionDetails) {
    fetch(`http://localhost/api/devices/history`)
        .then(response => response.json())
        .then(historyData => {
            populateDeviceTable(regionDetails, historyData);
            window.deviceHistoryData = historyData; // Store history for reuse
        })
        .catch(error => console.error('Error fetching device history:', error));
}

function populateDeviceTable(details, historyData, selectedRegion = 'Global') {
    const tableBody = document.getElementById('device-table').getElementsByTagName('tbody')[0];
    tableBody.innerHTML = ''; // Clear existing rows

    let deviceList = [];

    if (details) {
        ['cameras', 'archivers', 'controllers', 'servers'].forEach(deviceType => {
            details[deviceType]?.forEach(device => {
                const deviceIp = device.ip_address;
                const deviceName = device[deviceType.slice(0, -1) + 'name'] || 'Unknown';
                const deviceCategory = deviceType.slice(0, -1).toUpperCase();
                const deviceRegion = device.location || "Unknown"; // Use location instead of region

                const deviceHistory = historyData[deviceIp] || [];
                // Use device.status directly if available
                const currentStatus = device.status || (deviceHistory.length > 0 ? deviceHistory[deviceHistory.length - 1].status : "Unknown");

                let downtimeCount = deviceHistory.filter(entry => entry.status === "Offline").length;

                // Display only devices which are offline or have downtimeCount greater than 15
                if ((currentStatus === "Offline" || downtimeCount > 15)) {
                    deviceList.push({
                        deviceIp,
                        deviceName,
                        deviceCategory,
                        deviceRegion,
                        currentStatus,
                        deviceHistory,
                        downtimeCount,
                        deviceType
                    });
                }
            });
        });

        // Sort devices by downtime count (descending order)
        deviceList.sort((a, b) => b.downtimeCount - a.downtimeCount);

        if (deviceList.length === 0) {
            const row = tableBody.insertRow();
            const cell = row.insertCell(0);
            cell.colSpan = 10;
            cell.textContent = "No devices found";
            cell.style.textAlign = "center";
            cell.style.fontWeight = "bold";
            updateDisplayedDeviceCount(0);
            return;
        }

        deviceList.forEach(({ deviceIp, deviceName, deviceCategory, currentStatus, deviceRegion, deviceHistory, downtimeCount, deviceType }, index) => {
            const row = tableBody.insertRow();
            row.style.border = "1px solid black";

            row.innerHTML = `
                <td>${index + 1}</td>
                <td>${deviceIp || 'Unknown'}</td>
                <td>${deviceName || 'Unknown'}</td>
                <td>${deviceCategory || 'Unknown'}</td>
                <td>${deviceRegion || 'Unknown'}</td>
                <td id="uptime-${deviceIp}">0h/0m/0s</td>
                <td id="downtime-count-${deviceIp}">${downtimeCount}</td>
                <td id="downtime-${deviceIp}">0h/0m/0s</td>
                <td><button onclick="openDeviceHistory('${deviceIp}', '${deviceName}')">View History</button></td>
                <td id="remark-${deviceIp}">Device working properly</td>
            `;

            const color = currentStatus === "Online" ? "green" : "red";
            row.style.color = color;

            if (currentStatus === "Online") {
                startUptime(deviceIp, deviceHistory);
            } else {
                startDowntime(deviceIp, deviceHistory);
            }

            updateRemarks(deviceIp, deviceHistory, deviceType);
        });
    } else {
        console.error('No details found in the response');
    }
    // After rendering, apply filters and update count
    filterData();
}

function startUptime(deviceIp, history) {
    clearInterval(deviceDowntimeTimers[deviceIp]);
    let lastOnlineEntry = history.filter(entry => entry.status === "Online").pop();
    
    if (!lastOnlineEntry) return;
    
    let startTime = new Date(lastOnlineEntry.timestamp).getTime();
    deviceUptimeTimers[deviceIp] = setInterval(() => {
        let elapsedTime = Math.floor((Date.now() - startTime) / 1000);
        const uptimeElement = document.getElementById(`uptime-${deviceIp}`);
        if (uptimeElement) {
            uptimeElement.innerText = formatDuration(elapsedTime);
        }
    }, 1000);
}

function startDowntime(deviceIp, history) {
    clearInterval(deviceUptimeTimers[deviceIp]);
    let lastOfflineEntry = history.filter(entry => entry.status === "Offline").pop();

    if (!lastOfflineEntry) return;
    
    let startTime = new Date(lastOfflineEntry.timestamp).getTime();
    deviceDowntimeTimers[deviceIp] = setInterval(() => {
        let elapsedTime = Math.floor((Date.now() - startTime) / 1000);
        const downtimeElement = document.getElementById(`downtime-${deviceIp}`);
        if (downtimeElement) {
            downtimeElement.innerText = formatDuration(elapsedTime);
        }
        updateDowntimeCount(deviceIp, history);
    }, 1000);
}



// **Fix Downtime Count and Remarks Update (with proper filtering)**
function updateDowntimeCount(deviceIp, history) {
    let downtimeEntries = history.filter(entry => entry.status === "Offline");

    // Only count downtimes that last more than 5 minutes, except for servers
    let filteredDowntimeEntries = downtimeEntries.filter((entry, index, arr) => {
        if (deviceType === "SERVER") return true; // Always count downtime for servers
        if (index === 0) return true; // Always keep the first entry

        let previousEntry = arr[index - 1];
        let duration = (new Date(entry.timestamp) - new Date(previousEntry.timestamp)) / 1000;
        return duration >= 300; // 300 seconds = 5 minutes
    });

    let downtimeCount = filteredDowntimeEntries.length;
    
    let downtimeElement = document.getElementById(`downtime-count-${deviceIp}`);
    if (downtimeElement) {
        downtimeElement.innerText = downtimeCount;
    }

    // Update remarks based on downtime count and total downtime
    let remarkElement = document.getElementById(`remark-${deviceIp}`);
    if (remarkElement) {
        if (downtimeCount === 0) {
            remarkElement.innerText = "Device is Online.";
        } else if (downtimeCount >= 15) {
            remarkElement.innerText = `Device is Online, but it had ${downtimeCount} offline occurrences. Needs repair!`;
        } else {
            remarkElement.innerText = `Device is Online, but it had ${downtimeCount} offline occurrences.`;
        }
    }
}





// Fix for updateRemarks function to prioritize current status and handle downtime properly
function updateRemarks(deviceIp, history,deviceType) {
    let downtimeEntries = history.filter(entry => entry.status === "Offline");

    // Filter downtimes that lasted more than 5 minutes (except for servers)
    let filteredDowntimeEntries = downtimeEntries.filter((entry, index, arr) => {
        if (deviceType === "SERVER") return true; // Always count downtime for servers
        if (index === 0) return true; // Always keep the first entry

        let previousEntry = arr[index - 1];
        let duration = (new Date(entry.timestamp) - new Date(previousEntry.timestamp)) / 1000;
        return duration >= 300; // 300 seconds = 5 minutes
    });

    let downtimeCount = filteredDowntimeEntries.length;
    let lastStatus = history.length > 0 ? history[history.length - 1].status : "Unknown";
    let remarkElement = document.getElementById(`remark-${deviceIp}`);
    
    // Calculate total offline duration
    let totalOfflineTime = 0;
    let lastOfflineTime = null;

    history.forEach(entry => {
        if (entry.status === "Offline") {
            if (!lastOfflineTime) lastOfflineTime = new Date(entry.timestamp);
        } else if (entry.status === "Online" && lastOfflineTime) {
            totalOfflineTime += (new Date(entry.timestamp) - lastOfflineTime) / 1000;
            lastOfflineTime = null;
        }
    });

    if (lastOfflineTime) {
        totalOfflineTime += (new Date() - lastOfflineTime) / 1000;
    }

    let totalOfflineDays = Math.floor(totalOfflineTime / 86400); // Convert seconds to days

    // **Condition: Device needs repair if any of the following is true**
    let needsRepair = downtimeCount >= 10 || totalOfflineDays >= 1;

    // **Setting the Correct Remark**
    if (lastStatus === "Offline") {
        if (needsRepair) {
            remarkElement.innerText = "Device is Offline, needs repair.";
        } else {
            remarkElement.innerText = "Device is Offline.";
        }
    } else if (lastStatus === "Online") {
        if (needsRepair) {
            remarkElement.innerText = "Device is Online, needs repair.";
        } else if (downtimeCount > 0) {
            remarkElement.innerText = `Device is Online, it had ${downtimeCount} downtime occurrences.`;
        } else {
            remarkElement.innerText = "Device is Online.";
        }
    } else {
        remarkElement.innerText = "Device status unknown.";
    }

    // **Update Downtime Count in UI**
    let downtimeElement = document.getElementById(`downtime-count-${deviceIp}`);
    if (downtimeElement) {
        downtimeElement.innerText = downtimeCount;
    }
}


    // **Updated function to format duration properly**
    function formatDuration(seconds) {
        let days = Math.floor(seconds / 86400); // 1 day = 86400 seconds
        let hours = Math.floor((seconds % 86400) / 3600);
        let minutes = Math.floor((seconds % 3600) / 60);
        let secs = Math.round(seconds % 60); // Round seconds properly
    
        let result = [];
        if (days > 0) result.push(`${days}d`);
        if (hours > 0) result.push(`${hours}h`);
        if (minutes > 0) result.push(`${minutes}m`);
        if (secs > 0 || result.length === 0) result.push(`${secs}s`); // Always show at least seconds
    
        return result.join('/');
    }

function openDeviceHistory(deviceIp, deviceName) {
    if (!window.deviceHistoryData) {
        console.error("Device history data not loaded.");
        return;
    }
    const history = window.deviceHistoryData[deviceIp] || [];
    displayDeviceHistory(deviceIp, deviceName, history);
    document.getElementById('device-history-modal').style.display = 'block';
}

function calculateDowntimeDuration(timestamp, history) {
    let downtimeStart = new Date(timestamp).getTime();
    let nextOnlineEntry = history.find(entry => 
        entry.status === "Online" && new Date(entry.timestamp).getTime() > downtimeStart
    );
    if (nextOnlineEntry) {
        let downtimeEnd = new Date(nextOnlineEntry.timestamp).getTime();
        let durationInSeconds = (downtimeEnd - downtimeStart) / 1000;
        return formatDuration(durationInSeconds);
    }
    let durationInSeconds = (Date.now() - downtimeStart) / 1000;
    return formatDuration(durationInSeconds);
}

function displayDeviceHistory(deviceIp, deviceName, history) {
    const modalHeader = document.getElementById('device-history-header');
    const historyContainer = document.getElementById('device-history');
    modalHeader.innerHTML = `
        <h3>Device History</h3>
        <p><strong>Device Name:</strong> ${deviceName}</p>
        <p><strong>Device IP:</strong> ${deviceIp}</p>
        <hr>
    `;
    historyContainer.innerHTML = '';
    if (history.length === 0) {
        historyContainer.innerHTML = `<p>No history available for this device.</p>`;
        return;
    }
    let tableHTML = `
        <table border="1" style="width:100%; text-align:center; border-collapse: collapse;">
            <thead>
                <tr>
                    <th>Sr. No</th>
                    <th>Date</th>
                    <th>Day</th>
                    <th>Time</th>
                    <th>Status</th>
                    <th>Downtime Duration</th>
                </tr>
            </thead>
            <tbody>
    `;
    let lastOfflineTimestamp = null;
    history.forEach((entry, index) => {
        let entryDate = new Date(entry.timestamp);
        let formattedDate = entryDate.toLocaleDateString();
        let formattedTime = entryDate.toLocaleTimeString();
        let formattedDay = entryDate.toLocaleString('en-US', { weekday: 'long' });
        let downtimeDuration = "-";
        if (entry.status === "Offline") {
            lastOfflineTimestamp = entry.timestamp;
        } else if (entry.status === "Online" && lastOfflineTimestamp) {
            downtimeDuration = calculateDowntimeDuration(lastOfflineTimestamp, history);
            lastOfflineTimestamp = null;
        }
        tableHTML += `
            <tr>
                <td>${index + 1}</td>
                <td>${formattedDate}</td>
                <td>${formattedDay}</td>
                <td>${formattedTime}</td>
                <td style="color: ${entry.status === "Online" ? 'green' : 'red'};">${entry.status}</td>
                <td>${downtimeDuration}</td>
            </tr>
        `;
    });
    tableHTML += `</tbody></table>`;
    historyContainer.innerHTML = tableHTML;
}


function closeHistoryModal() {
    document.getElementById('device-history-modal').style.display = 'none';
}


function filterData() {
    const selectedType = document.getElementById('device-type').value.toUpperCase();
    const selectedRemark = document.getElementById('remark-filter').value.toUpperCase();
    const table = document.getElementById('device-table');
    const rows = table.getElementsByTagName('tbody')[0].getElementsByTagName('tr');
    let count = 0;
    
    // Device type is in cell index 3 and remark is in cell index 9
    for (let row of rows) {
        const type = row.cells[3].textContent.toUpperCase();
        const remark = row.cells[9].textContent.trim().toUpperCase();
        const matchesType = selectedType === "ALL" || type === selectedType;
        const matchesRemark = selectedRemark === "ALL" || remark.includes(selectedRemark);
        if (matchesType && matchesRemark) {
            row.style.display = "";
            count++;
        } else {
            row.style.display = "none";
        }
    }
    updateDisplayedDeviceCount(count);
}

function updateDisplayedDeviceCount(count) {
    const countElement = document.getElementById('device-count');
    if (countElement) {
        countElement.innerText = `Displayed Devices: ${count}`;
    }
}

document.addEventListener("DOMContentLoaded", function () {
    document.getElementById('region').addEventListener('change', fetchDeviceData);
    // Add event listeners for filter dropdowns
    document.getElementById('device-type').addEventListener('change', filterData);
    document.getElementById('remark-filter').addEventListener('change', filterData);
    fetchDeviceData(); // Initial load
});

function exportDeviceTableToExcel() {
    const table = document.getElementById("device-table");
    const workbook = XLSX.utils.table_to_book(table, { sheet: "Device Table" });
    XLSX.writeFile(workbook, "Device_Table.xlsx");
}

function exportDeviceHistoryToExcel() {
    const historyTable = document.querySelector("#device-history-modal table");
    if (!historyTable) {
        alert("Please open a device's history first.");
        return;
    }
    const workbook = XLSX.utils.table_to_book(historyTable, { sheet: "Device History" });
    XLSX.writeFile(workbook, "Device_History.xlsx");
}
