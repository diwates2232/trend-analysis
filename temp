const axios = require('axios');
const sql = require('mssql');

// API endpoint URL
const apiUrl = 'http://localhost/api/regions/details/apac'; // Replace with the appropriate region

// SQL Server configuration
const config = {
  user: 'your_sql_user', // Replace with your SQL Server username
  password: 'your_sql_password', // Replace with your SQL Server password
  server: 'localhost', // Replace with your server name if different
  database: 'tempdb', // Use the correct database
  options: {
    encrypt: true, // Use this if you're using encryption (e.g., Azure SQL)
    trustServerCertificate: true, // For self-signed certificates
  },
};

// Function to fetch data from the API and insert into SQL Server
async function fetchAndInsertData() {
  try {
    // Fetch data from the API
    const response = await axios.get(apiUrl);
    const devices = response.data.details; // Assuming the response structure

    // Connect to SQL Server
    const pool = await sql.connect(config);

    // Insert camera data into the temporary table
    const cameras = devices.cameras;
    for (const camera of cameras) {
      await pool.request()
        .input('region', sql.VarChar, 'APAC') // Replace with dynamic region if necessary
        .input('device_type', sql.VarChar, 'camera')
        .input('name', sql.NVarChar, camera.cameraname)
        .input('ip_address', sql.VarChar, camera.ip_address)
        .input('location', sql.VarChar, camera.location)
        .input('city', sql.VarChar, camera.city)
        .input('status', sql.VarChar, camera.status)
        .input('history', sql.NVarChar, JSON.stringify(camera.history)) // Assuming it's an array
        .query(`
          INSERT INTO #DeviceDetails (region, device_type, name, ip_address, location, city, status, history)
          VALUES (@region, @device_type, @name, @ip_address, @location, @city, @status, @history)
        `);
    }

    // Repeat similar steps for other device types (controllers, archivers, servers)
    const controllers = devices.controllers;
    for (const controller of controllers) {
      await pool.request()
        .input('region', sql.VarChar, 'APAC') // Replace with dynamic region if necessary
        .input('device_type', sql.VarChar, 'controller')
        .input('name', sql.NVarChar, controller.controllername)
        .input('ip_address', sql.VarChar, controller.ip_address)
        .input('location', sql.VarChar, controller.location)
        .input('city', sql.VarChar, controller.city)
        .input('status', sql.VarChar, controller.status)
        .input('history', sql.NVarChar, JSON.stringify(controller.history)) // Assuming it's an array
        .query(`
          INSERT INTO #DeviceDetails (region, device_type, name, ip_address, location, city, status, history)
          VALUES (@region, @device_type, @name, @ip_address, @location, @city, @status, @history)
        `);
    }

    // Insert other device types (archivers, servers) similarly...

    console.log('Data inserted successfully!');
    pool.close();
  } catch (error) {
    console.error('Error fetching or inserting data:', error);
  }
}

// Run the function
fetchAndInsertData();










CREATE TABLE #DeviceDetails (
    id INT IDENTITY(1,1) PRIMARY KEY,
    region VARCHAR(10),
    device_type VARCHAR(20),
    name NVARCHAR(100),
    ip_address VARCHAR(50),
    location VARCHAR(50),
    city VARCHAR(50),
    status VARCHAR(10),
    history NVARCHAR(MAX)
);



INSERT INTO #DeviceDetails (region, device_type, name, ip_address, location, city, status, history)
VALUES ('APAC', 'camera', 'Green Zone Passage', '10.199.10.20', 'APAC', 'Pune', 'Online', '[]');



SELECT * FROM #DeviceDetails;






psql -U postgres


CREATE DATABASE temp_device_db;


\c temp_device_db



CREATE TABLE IF NOT EXISTS device_details (
  id SERIAL PRIMARY KEY,
  region VARCHAR(10),
  device_type VARCHAR(20),
  name TEXT,
  ip_address VARCHAR(50) UNIQUE,
  location VARCHAR(50),
  city VARCHAR(50),
  status VARCHAR(10),
  history TEXT
);





INSERT INTO device_details (region, device_type, name, ip_address, location, city, status, history)
VALUES 
('APAC', 'camera', 'Green Zone to Yellow Zone Passage', '10.199.10.20', 'APAC', 'Pune', 'Online', '[]');




DROP DATABASE temp_device_db;


const { Pool } = require('pg');

// PostgreSQL connection setup for superuser or admin
const pool = new Pool({
  user: 'postgres',
  host: 'localhost',
  database: 'postgres',  // Default database to connect before creating temp database
  password: 'your_password',
  port: 5432,
});

async function createTempDatabase() {
  try {
    // Create temporary database
    await pool.query('CREATE DATABASE temp_device_db');

    // Connect to the temp database
    const tempPool = new Pool({
      user: 'postgres',
      host: 'localhost',
      database: 'temp_device_db',
      password: 'your_password',
      port: 5432,
    });

    // Create device details table in the temp database
    await tempPool.query(`
      CREATE TABLE IF NOT EXISTS device_details (
        id SERIAL PRIMARY KEY,
        region VARCHAR(10),
        device_type VARCHAR(20),
        name TEXT,
        ip_address VARCHAR(50) UNIQUE,
        location VARCHAR(50),
        city VARCHAR(50),
        status VARCHAR(10),
        history TEXT
      );
    `);

    console.log('Temporary database and table created successfully!');
    await tempPool.end();
  } catch (error) {
    console.error('Error creating temporary database:', error.message);
  } finally {
    await pool.end();
  }
}

createTempDatabase();










Read below API-
http://localhost/api/regions/details/apac ( We can replace Region name as apac, emea, laca, namer)

API Responce-

{
  "details": {
    "cameras": [
      {
        "cameraname": "Green Zone to yellow zone passage - 10.199.10.20 (FLIR CM-3102-11-I T71552107) - 350",
        "ip_address": "10.199.10.20",
        "location": "APAC",
        "city": "Pune",
        "history": [],
        "status": "Online"
      },
      {
        "cameraname": "IN-PNQ-PF - Green Zone Exit Passage 10.199.10.139",
        "ip_address": "10.199.10.139",
        "location": "APAC",
        "city": "Pune",
        "history": [],
        "status": "Online"
      },
 ],
    "controllers": [
      {
        "controllername": "IN-PUN-2NDFLR-ISTAR PRO",
        "ip_address": "10.199.13.10",
        "location": "APAC",
        "city": "Pune",
        "history": [],
        "status": "Online"
      },
      {
        "controllername": "IN-PUN-PODIUM-ISTAR PRO-01",
        "ip_address": "10.199.8.20",
        "location": "APAC",
        "city": "Pune",
        "history": [],
        "status": "Online"
      },
 ],
    "archivers": [
      {
        "archivername": "Archiver Manila",
        "ip_address": "10.193.132.8",
        "location": "APAC",
        "city": "Quezon",
        "history": [],
        "status": "Online"
      },
      {
        "archivername": "Archiver Taguig City Philippines",
        "ip_address": "10.194.2.190",
        "location": "APAC",
        "city": "Taguig",
        "history": [],
        "status": "Online"
      },
 ],
    "servers": [
      {
        "servername": "New APACServer  ",
        "ip_address": "10.199.22.61",
        "location": "APAC",
        "city": "Pune",
        "history": [],
        "status": "Online"
      }
    ]
  }
}



Read above API and responce.

and create Temp database and Store API responce
Region - APAC , EMEA, LACA, NAMER
Devivice Type- cameras, controller, archiver, servers
ip_address
Location
City 
Status,
history


so write sql query to store data.

