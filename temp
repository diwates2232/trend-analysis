const fs = require("fs");
const xlsx = require("xlsx");
const path = require("path");
const axios = require("axios");
const pLimit = require("p-limit");
const { DateTime } = require("luxon");

// Excel paths…
const archiverPath = path.join(__dirname, "../data/ArchiverData.xlsx");
const controllerPath = path.join(__dirname, "../data/ControllerData.xlsx");
const cameraPath = path.join(__dirname, "../data/CameraData.xlsx");
const serverPath = path.join(__dirname, "../data/ServerData.xlsx");
const logFile = "./deviceLogs.json";

let allData = {};
const cache = new Map();

// Map region → ping‑agent endpoint
const AGENT_URLS = {
  apac: "http://apac-agent.local:3001/ping",
  emea: "http://vilnius-agent.local:3001/ping",
  namer: "http://cr-agent.local:3001/ping",
};

// Load & normalize Excel sheets (unchanged)
function normalizeHeaders(rows) { /* … */ }
function loadExcelData() { /* … */ }
loadExcelData();

// Utility: read logs
const loadLogs = () => /* … */;
const saveLogs = (logs) => /* … */;
function monitorDevice(device) { /* … */ }

// **NEW**: call a region’s agent once
async function pingRegionAgent(region) {
  const url = AGENT_URLS[region];
  if (!url) throw new Error(`No ping‑agent configured for region "${region}"`);
  const resp = await axios.get(url);
  return resp.data;  // [{ ip, status, … }, …]
}

// **REPLACED** pingDevices:
const pingDevices = async (devices) => {
  // 1) Group by region
  const byRegion = devices.reduce((map, dev) => {
    const r = (dev.location || "").toLowerCase();
    if (!map[r]) map[r] = [];
    map[r].push(dev);
    return map;
  }, {});

  // 2) For each region, fetch statuses once
  await Promise.all(Object.entries(byRegion).map(async ([region, list]) => {
    try {
      const results = await pingRegionAgent(region);
      const statusMap = new Map(results.map(r => [r.ip, r.status]));
      list.forEach(dev => {
        dev.status = statusMap.get(dev.ip_address) || "Unknown";
        monitorDevice(dev);
      });
    } catch (err) {
      console.error(`Error pinging region ${region}:`, err.message);
      list.forEach(dev => {
        dev.status = "Error";
        monitorDevice(dev);
      });
    }
  }));
};

// The rest of your service methods stay the same, except they call the new pingDevices()
// fetchGlobalData(), fetchRegionData(), fetchRegionTrendData(), calculateSummary(), etc.

module.exports = {
  fetchGlobalData,
  fetchRegionData,
  fetchAllIpAddress,
  fetchRegionTrendData,
};
