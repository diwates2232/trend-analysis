
document.getElementById("city-filter").addEventListener("change", () => {
    const selectedCity = document.getElementById("city-filter").value;
    updateSummaryWithCity(currentRegion, selectedCity);
});





button.addEventListener("click", () => {
    const region = button.getAttribute("data-region");
    currentRegion = region;
    const selectedCity = document.getElementById("city-filter").value;

    // If city is selected (not "all"), show both region and city
    if (selectedCity !== "all") {
        document.getElementById("region-title").textContent = `${region.toUpperCase()}, ${selectedCity} Summary`;
    } else {
        document.getElementById("region-title").textContent = `${region.toUpperCase()} Summary`;
    }

    switchRegion(region);
});


function updateSummaryWithCity(regionName, selectedCity) {
    fetch(`${baseUrl}/details/${regionName}`)
        .then(res => res.json())
        .then(data => {
            const devices = [];

            Object.values(data.details).forEach(deviceList => {
                devices.push(...deviceList);
            });

            let filteredDevices = devices;
            if (selectedCity !== "all") {
                filteredDevices = devices.filter(d => d.city === selectedCity);
            }

            const summary = calculateFilteredSummary(filteredDevices);

            // Update city+region title
            const regionTitle = selectedCity !== "all" 
                ? `${regionName.toUpperCase()}, ${selectedCity} Summary` 
                : `${regionName.toUpperCase()} Summary`;

            document.getElementById("region-title").textContent = regionTitle;

            // Update UI with new summary
            updateSummary({ summary });
        });
}





function calculateFilteredSummary(devices) {
    const types = ['camera', 'archiver', 'controller', 'server'];

    const result = {
        totalDevices: devices.length,
        totalOnlineDevices: 0,
        totalOfflineDevices: 0,
        cameras: { total: 0, online: 0, offline: 0 },
        archivers: { total: 0, online: 0, offline: 0 },
        controllers: { total: 0, online: 0, offline: 0 },
        servers: { total: 0, online: 0, offline: 0 }
    };

    devices.forEach(device => {
        const type = device.type.toLowerCase();
        const status = device.status.toLowerCase();

        if (status === 'online') result.totalOnlineDevices++;
        else result.totalOfflineDevices++;

        if (types.includes(type)) {
            result[`${type}s`].total++;
            result[`${type}s`][status]++;
        }
    });

    return result;
}


Pleaase check both file and sole this issue.
UI only reflects total count its not update Devices count city wise.also its not reflects City name . like APAC , Pune Summary
..... like this 

check carefully files and solve above issue.



Index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Device Dashboard</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>


    <div class="container">
        <div id="sidebar">
            <h2 style="color:rgb(223, 205, 38);">Regions</h2>
            <button class="region-button" data-region="global">Global</button>
            <button class="region-button" data-region="apac">APAC</button>

            <button class="region-button" data-region="emea">EMEA</button>
            <button class="region-button" data-region="laca">LACA</button>   
            <button class="region-button" data-region="namer">NAMER</button>

            <button  style="display: block;
            width: 100%;
            padding: 15px;
            margin-bottom: 10px;
            border: none;
            background-color:rgb(223, 205, 38);
           color: rgb(26, 23, 23);
           font-size: 16px;
           cursor: pointer;
          text-align: center;
           border-radius: 5px;
           transition: background-color 0.3s ease;""
             onclick="window.location.href='trend.html'">View Trend Analysis</button>




            <button   style="display: block;
            width: 100%;
            padding: 15px;
            margin-bottom: 10px;
            border: none;
            background-color:rgb(223, 205, 38);
           color: rgb(26, 23, 23);
           font-size: 16px;
           cursor: pointer;
          text-align: center;
           border-radius: 5px;
           transition: background-color 0.3s ease;""
            
            onclick="window.location.href='summary.html'">View Devices Summary</button>


            <div id="countdown" 
            style="font-size: 16px; font-weight: bold; color:rgb(223, 205, 38);
            padding: 10px;
            display: block; "></div>


            <div class="filter-buttons">
                <button id="filter-all" class="status-filter active" data-status="all"
                style="display: block;
                 width: 100%;
                 padding: 15px;
                 margin-bottom: 10px;
                 border: none;
                 background-color: #e8f0f1;
                color: rgb(26, 23, 23);
                font-size: 16px;
                cursor: pointer;
               text-align: center;
                border-radius: 5px;
                transition: background-color 0.3s ease; ">All Devices</button>


                <button id="filter-online" class="status-filter" data-status="online" 
                style="
                display: block;
                 width: 100%;
                 padding: 15px;
                 margin-bottom: 10px;
                 border: none;
                 background-color: #1c9c47;
                color: rgb(26, 23, 23);
                font-size: 16px;
                cursor: pointer;
               text-align: center;
                border-radius: 5px;
                transition: background-color 0.3s ease;">Online Devices</button>

                <button id="filter-offline"  class="status-filter" data-status="offline"
                style="
                display: block;
                 width: 100%;
                 padding: 15px;
                 margin-bottom: 10px;
                 border: none;
                 background-color: #db2410;
                color: rgb(26, 23, 23);
                font-size: 16px;
                cursor: pointer;
               text-align: center;
                border-radius: 5px;
                transition: background-color 0.3s ease;                
                 ">Offline Devices</button>
            </div>


       <div><
            <label for="device-filter" style="color:rgb(223, 205, 38);
            font-size: 16px;
            margin: 10;
            border: none;
            font-weight: bold;
            text-align: start;
            border-radius: 5px;
            width: 100%;
             ">Filter by Device Type:</label>
            <select id="device-filter">
                <option value="all">All</option>
                <option value="cameras">Cameras</option>
                <option value="archivers">Archivers</option>
                <option value="controllers">Controllers</option>
                <option value="servers">Servers</option>
            </select>

              </div>


            <div><
                <label for="device-filter" style="color:rgb(223, 205, 38);
                font-size: 16px;
                padding-top: 10px;
                margin-top: 5px;
                border: none;
                font-weight: bold;
                text-align: start;
                border-radius: 5px;
                width: 100%;
                 ">Filter by Location:</label>
                <select id="city-filter">
                    <option value="all">All Cities</option>
                </select>
              </div>

    </div>





        <div id="content">
            <h1 id="region-title" style="color:rgb(255, 0, 0);
            font-weight: bold;
            border: black;
            border-radius: 5px;
            text-align: start;
            
            ">Global Summary</h1>

            <div class="summary">
                <div id="city-summary"></div>


                <div class="card">
                    <h3>Total Devices</h3>
                    <p>Total: <span id="total-devices">Loading...</span></p>
                    <p>Online: <span id="online-devices">Loading...</span></p>
                    <p>Offline: <span id="offline-devices">Loading...</span></p>
                   </div>

             <div class="card">
                <h3>Cameras</h3>
                <p>Total: <span id="camera-total">Loading...</span></p>
                <p>Online: <span id="camera-online">Loading...</span></p>
                <p>Offline: <span id="camera-offline">Loading...</span></p>
               </div>
            
               <div class="card">
                <h3>Archivers</h3>
                <p>Total: <span id="archiver-total">Loading...</span></p>
                <p>Online: <span id="archiver-online">Loading...</span></p>
                <p>Offline: <span id="archiver-offline">Loading...</span></p>
               </div>
            
               <div class="card">
                <h3>Controllers</h3>
                <p>Total: <span id="controller-total">Loading...</span></p>
                <p>Online: <span id="controller-online">Loading...</span></p>
                <p>Offline: <span id="controller-offline">Loading...</span></p>
               </div>

               <div class="card">
                <h3>Servers</h3>
                <p>Total: <span id="server-total">Loading...</span></p>
                <p>Online: <span id="server-online">Loading...</span></p>
                <p>Offline: <span id="server-offline">Loading...</span></p>
               </div>
            </div>

           
            <div id="details-section">
                <h2 style="color:rgb(255, 0, 0)">Device Details</h2>
             <!-- Dropdown for Filtering -->
    <div id="device-details">Loading...</div>
                <div id ="details-container"></div>
    
            </div>
        </div>
    </div>
    </body>

    
    <div id="modal">
        <div class="modal-content">
            <span id="close-modal">&times;</span>
            <h3 id="modal-title">Device Details</h3>
            <ul id="modal-body"></ul>
           
<button id="refresh-button">Refresh Data</button>
<div id="device-details"></div>
        </div>
    </div>



    <script src="script.js"></script> 
    
     <!-- Include Footer -->
              <footer class="footer">
                <img src="images/FooterLogo.png" alt="Company Logo" class="footer-logo">
                <p>&copy;2025 VisionWatch | Powered by <strong>Western Union Services India Pvt Ltd.</strong></p>
                <p>Contact :
                <a href="mailto:gsoc-globalsecurityoperationcenter.sharedmailbox@westernunion.com">gsoc-globalsecurityoperationcenter.sharedmailbox@westernunion.com</a> |
                <a href="tel:+91 20 67632394">+91 2067632394 </a>
                </p>
            </footer>  
        </body>
        </html>









Script.js

const baseUrl = "http://localhost:80/api/regions";
let refreshInterval = 300000; // 5 minutes
let pingInterval = 30000; // 30 seconds
let countdownTime = refreshInterval / 1000; // Convert to seconds
let currentRegion = "global"; 
let deviceDetailsCache = {}; // Store previous details to prevent redundant updates

document.addEventListener("DOMContentLoaded", () => {
    fetchData("global"); // Load initial data
    startAutoRefresh("global");

    document.querySelectorAll(".region-button").forEach((button) => {
        button.addEventListener("click", () => {
            const region = button.getAttribute("data-region");
            document.getElementById("region-title").textContent = `${region.toUpperCase()} Summary`;
            switchRegion(region);
        });
    });

    document.getElementById("close-modal").addEventListener("click", () => {
        document.getElementById("modal").style.display = "none";
    });
});

function switchRegion(region) {
    clearExistingIntervals(); // Avoid interval duplication
    fetchData(region);
    startAutoRefresh(region);
}

// **Auto-refresh mechanism**
function startAutoRefresh(regionName) {
    fetchData(regionName); // Fetch initial data

    clearExistingIntervals();

    // Start countdown timer
    window.countdownTimer = setInterval(() => {
        document.getElementById("countdown").innerText = `Refreshing in ${countdownTime} seconds`;
        countdownTime--;
        if (countdownTime < 0) countdownTime = refreshInterval / 1000;
    }, 1000);

    // Refresh summary & details every 5 minutes
    window.refreshTimer = setInterval(() => {
        fetchData(regionName);
        countdownTime = refreshInterval / 1000;
    }, refreshInterval);

    // Ping devices every 30 seconds
    window.pingTimer = setInterval(() => {
        pingAllDevices(regionName);
    }, pingInterval);
}

function clearExistingIntervals() {
    clearInterval(window.countdownTimer);
    clearInterval(window.refreshTimer);
    clearInterval(window.pingTimer);
}

// **Fetch summary and details together**
function fetchData(regionName) {
    Promise.all([
        fetch(`${baseUrl}/summary/${regionName}`).then(res => res.json()),
        fetch(`${baseUrl}/details/${regionName}`).then(res => res.json())
    ])
    .then(([summary, details]) => {
        console.log("Summary Data:", summary);
        console.log("Details Data:", details);

        updateSummary(summary);
        
        if (JSON.stringify(details) !== JSON.stringify(deviceDetailsCache)) {
            updateDetails(details);
            deviceDetailsCache = details; // Update cache
        }
    })
    .catch((error) => console.error("Error fetching data:", error));
}
function pingAllDevices(details, regionName) {
    let statusChanged = false; // Track if any status changed

    for (const [key, devices] of Object.entries(details.details)) {
        if (!Array.isArray(devices) || devices.length === 0) continue;

        devices.forEach((device) => {
            const ip = device.ip_address || "N/A";
            const card = document.querySelector(`[data-ip="${ip}"]`);

            if (!card) return; // If device is not found in UI, skip

            // Ping the device API
            fetch(`${baseUrl}/ping/${ip}`)
                .then(response => response.json())
                .then(statusData => {
                    const newStatus = statusData.status.toLowerCase(); // Get live status
                    const currentStatus = card.dataset.status; // Current status in UI

                    // Update the UI instantly
                    const statusDot = card.querySelector(".status-dot");
                    const statusText = card.querySelector(".device-status");

                    if (newStatus === "online") {
                        statusDot.style.backgroundColor = "green";
                        statusText.textContent = "Online";
                    } else {
                        statusDot.style.backgroundColor = "red";
                        statusText.textContent = "Offline";
                    }

                    if (newStatus !== currentStatus) {
                        statusChanged = true; // A change in status was detected
                        card.dataset.status = newStatus; // Update dataset
                    }
                })
                .catch(error => console.error(`Ping failed for ${ip}:`, error));
        });
    }

    // After processing all devices, if any status changed, refresh summary
    setTimeout(() => {
        if (statusChanged) {
            fetchSummary(regionName);
        }
    }, 5000); // Small delay to ensure all pings are processed
}

setInterval(() => {
    pingAllDevices(details, regionName);
}, 300000); // Every 5 minutes




function updateSummary(data) {
    document.getElementById("total-devices").textContent = data.summary?.totalDevices || "N/A";
    document.getElementById("online-devices").textContent = data.summary?.totalOnlineDevices || "N/A";
    document.getElementById("offline-devices").textContent = data.summary?.totalOfflineDevices || "N/A";

    document.getElementById("camera-total").textContent = data.summary?.cameras?.total || "N/A";
    document.getElementById("camera-online").textContent = data.summary?.cameras?.online || "N/A";
    document.getElementById("camera-offline").textContent = data.summary?.cameras?.offline || "N/A";

    document.getElementById("archiver-total").textContent = data.summary?.archivers?.total || "N/A";
    document.getElementById("archiver-online").textContent = data.summary?.archivers?.online || "N/A";
    document.getElementById("archiver-offline").textContent = data.summary?.archivers?.offline || "N/A";

    document.getElementById("controller-total").textContent = data.summary?.controllers?.total || "N/A";
    document.getElementById("controller-online").textContent = data.summary?.controllers?.online || "N/A";
    document.getElementById("controller-offline").textContent = data.summary?.controllers?.offline || "N/A";

    document.getElementById("server-total").textContent = data.summary?.servers?.total || "N/A";
    document.getElementById("server-online").textContent = data.summary?.servers?.online || "N/A";
    document.getElementById("server-offline").textContent = data.summary?.servers?.offline || "N/A";


}


function updateDetails(data) {
    const detailsContainer = document.getElementById("device-details");
    const deviceFilter = document.getElementById("device-filter");
    const cityFilter = document.getElementById("city-filter");
    const onlineFilterButton = document.getElementById("filter-online");
    const offlineFilterButton = document.getElementById("filter-offline");
    const allFilterButton = document.getElementById("filter-all");

    detailsContainer.innerHTML = "";
    cityFilter.innerHTML = '<option value="all">All Cities</option>';

    let allDevices = [];
    let deviceObjects = []; // [UPDATED] for city-wise summary
    let citySet = new Set();

    fetch("http://localhost:80/api/region/devices/status")
        .then((response) => response.json())
        .then((realTimeStatus) => {
            for (const [key, devices] of Object.entries(data.details)) {
                if (!Array.isArray(devices) || devices.length === 0) continue;

                const deviceType = key.toLowerCase();

                devices.forEach((device) => {
                    const deviceIP = device.ip_address || "N/A";
                    const currentStatus = realTimeStatus[deviceIP] || device.status;
                    const city = device.city || "Unknown";

                    citySet.add(city);

                    const card = document.createElement("div");
                    card.className = "device-card";
                    card.dataset.type = deviceType;
                    card.dataset.status = currentStatus.toLowerCase();
                    card.dataset.city = city;

                    const statusDot = document.createElement("span");
                    statusDot.className = "status-dot";
                    statusDot.style.backgroundColor = currentStatus === "Online" ? "green" : "red";

                    card.innerHTML = `
                        <h3>${device.cameraname || device.controllername || device.archivername || device.servername || "Unknown Device"}</h3>
                        <p>DEVICE TYPE: ${deviceType.toUpperCase()}</p>
                        <p>IP: ${deviceIP}</p>
                        <p>LOCATION: ${device.location || "N/A"}</p>
                        <p>CITY: ${city}</p>
                        <p>Status: ${currentStatus} ${statusDot.outerHTML}</p>
                        <button class="details-button" onclick="showModal('${device.cameraname || device.controllername || device.archivername || device.servername || "Unknown Device"}', '${deviceIP}', '${device.location || "N/A"}', '${currentStatus}', '${city}')">Details</button>
                    `;

                    allDevices.push(card);

                    // [UPDATED]: Push raw device data for summary
                    deviceObjects.push({
                        type: deviceType,
                        status: currentStatus.toLowerCase(),
                    });
                });
            }

            citySet.forEach((city) => {
                const option = document.createElement("option");
                option.value = city;
                option.textContent = city;
                cityFilter.appendChild(option);
            });

            function filterDevices() {
                const selectedType = deviceFilter.value;
                const selectedStatus = document.querySelector(".status-filter.active")?.dataset.status || "all";
                const selectedCity = cityFilter.value;

                detailsContainer.innerHTML = "";

                const filteredDevices = allDevices.filter((device) =>
                    (selectedType === "all" || device.dataset.type === selectedType) &&
                    (selectedStatus === "all" || device.dataset.status === selectedStatus) &&
                    (selectedCity === "all" || device.dataset.city === selectedCity)
                );

                filteredDevices.forEach((deviceCard) => {
                    detailsContainer.appendChild(deviceCard);
                });

                // [UPDATED]: Recalculate city-wise summary
                const filteredSummaryDevices = deviceObjects.filter((deviceCard, index) => {
                    const element = allDevices[index];
                    return (
                        (selectedType === "all" || element.dataset.type === selectedType) &&
                        (selectedStatus === "all" || element.dataset.status === selectedStatus) &&
                        (selectedCity === "all" || element.dataset.city === selectedCity)
                    );
                });

                const summary = calculateCitySummary(filteredSummaryDevices);
                updateSummary(summary);
            }

            // [UPDATED]: Calculate summary from filtered list
            function calculateCitySummary(devices) {
                const summary = {
                    summary: {
                        totalDevices: devices.length,
                        totalOnlineDevices: devices.filter(d => d.status === "online").length,
                        totalOfflineDevices: devices.filter(d => d.status === "offline").length,
                        cameras: { total: 0, online: 0, offline: 0 },
                        archivers: { total: 0, online: 0, offline: 0 },
                        controllers: { total: 0, online: 0, offline: 0 },
                        servers: { total: 0, online: 0, offline: 0 },
                    }
                };

                devices.forEach((device) => {
                    if (!summary.summary[device.type + "s"]) return;
                    summary.summary[device.type + "s"].total += 1;
                    if (device.status === "online") summary.summary[device.type + "s"].online += 1;
                    else summary.summary[device.type + "s"].offline += 1;
                });

                return summary;
            }

            // Initial Display
            filterDevices();

            deviceFilter.addEventListener("change", filterDevices);
            cityFilter.addEventListener("change", filterDevices);
            allFilterButton.addEventListener("click", () => {
                document.querySelectorAll(".status-filter").forEach(btn => btn.classList.remove("active"));
                allFilterButton.classList.add("active");
                filterDevices();
            });
            onlineFilterButton.addEventListener("click", () => {
                document.querySelectorAll(".status-filter").forEach(btn => btn.classList.remove("active"));
                onlineFilterButton.classList.add("active");
                filterDevices();
            });
            offlineFilterButton.addEventListener("click", () => {
                document.querySelectorAll(".status-filter").forEach(btn => btn.classList.remove("active"));
                offlineFilterButton.classList.add("active");
                filterDevices();
            });

        })
        .catch((error) => {
            console.error("Error fetching real-time device status:", error);
            detailsContainer.innerHTML = "<p>Failed to load device details.</p>";
        });
}




    function showModal(name, ip, location, status) {
        document.getElementById("modal-title").textContent = `Details for ${name}`;
        document.getElementById("modal-body").innerHTML = `
            <li><strong>Name:</strong> ${name}</li>
            <li><strong>IP:</strong> ${ip}</li>
            <li><strong>Location:</strong> ${location}</li>

            <li><strong>Status:</strong> ${status}</li>
        `;
        document.getElementById("modal").style.display = "block";
    }


