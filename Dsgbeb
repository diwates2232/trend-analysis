const fs = require("fs");
const xlsx = require("xlsx");
const path = require("path");
const ping = require("ping");
const pLimit = require("p-limit");
const { DateTime } = require("luxon"); // Import Luxon for timezone handling

// Paths for Excel files
const archiverPath = path.join(__dirname, "../data/ArchiverData.xlsx");
const controllerPath = path.join(__dirname, "../data/ControllerData.xlsx");
const cameraPath = path.join(__dirname, "../data/CameraData.xlsx");
const serverPath = path.join(__dirname, "../data/ServerData.xlsx");

// Log file for device status history
const logFile = "./deviceLogs.json";

// Cache to store preloaded data
let allData = {};
const activeDevices = {}; // Store active monitoring sessions

// Function to load logs
const loadLogs = () => fs.existsSync(logFile) ? JSON.parse(fs.readFileSync(logFile, "utf8")) : {};

// Function to save logs
const saveLogs = (logs) => fs.writeFileSync(logFile, JSON.stringify(logs, null, 2), "utf8");

// Function to normalize column headers
const normalizeHeaders = (data) => {
    return data.map((row) => {
        const normalizedRow = {};
        for (const key in row) {
            const normalizedKey = key.trim().toLowerCase().replace(/\s+/g, '_');
            normalizedRow[normalizedKey] = row[key];
        }
        return normalizedRow;
    });
};

// Function to load Excel data into cache
const loadExcelData = () => {
    if (Object.keys(allData).length === 0) {
        const loadSheet = (filePath) => {
            const workbook = xlsx.readFile(filePath);
            return normalizeHeaders(xlsx.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[0]]));
        };

        allData = {
            archivers: loadSheet(archiverPath),
            controllers: loadSheet(controllerPath),
            cameras: loadSheet(cameraPath),
            servers: loadSheet(serverPath),
        };

        for (const deviceList of Object.values(allData)) {
            deviceList.forEach(device => {
                if (!device.history) {
                    device.history = [];
                }
            });
        }

        console.log("Excel Data Loaded:", Object.keys(allData));
    }
};

// Fetch all IP addresses from loaded devices
const fetchAllIpAddress = () => {
    if (!allData || Object.keys(allData).length === 0) {
        console.error("Error: Device data is not loaded.");
        return [];
    }

    return Object.values(allData).flatMap(devices => devices.map(device => device.ip_address).filter(Boolean));
};

// Function to monitor device status in real-time
const monitorDevice = (device) => {
    const logs = loadLogs();
    const currentTime = DateTime.now().setZone("Asia/Kolkata").toISO();

    let lastEntry = logs[device.ip]?.slice(-1)[0];
    let lastStatus = lastEntry ? lastEntry.status : null;

    if (lastStatus !== device.status) {
        console.log(`Status changed: ${device.device_name || device.ip} is now ${device.status}`);

        logs[device.ip] = logs[device.ip] || [];
        logs[device.ip].push({ status: device.status, timestamp: currentTime });
        saveLogs(logs);

        if (device.status === "Online") {
            startUptime(device);
        } else {
            startDowntime(device);
        }
    }
};

// Start uptime tracking
const startUptime = (device) => {
    if (activeDevices[device.ip]) {
        clearInterval(activeDevices[device.ip]);
    }

    activeDevices[device.ip] = setInterval(() => {
        console.log(`Device ${device.device_name || device.ip} is Online. Increasing Uptime...`);
        updateUptime(device);
    }, 60000);
};

// Start downtime tracking
const startDowntime = (device) => {
    if (activeDevices[device.ip]) {
        clearInterval(activeDevices[device.ip]);
    }

    activeDevices[device.ip] = setInterval(() => {
        console.log(`Device ${device.device_name || device.ip} is Offline. Increasing Downtime...`);
        updateDowntime(device);
    }, 60000);
};

// Update uptime in real-time
const updateUptime = (device) => {
    const logs = loadLogs();
    const currentTime = DateTime.now().setZone("Asia/Kolkata").toISO();

    logs[device.ip] = logs[device.ip] || [];
    logs[device.ip].push({ status: "Online", timestamp: currentTime });

    saveLogs(logs);
};

// Update downtime in real-time
const updateDowntime = (device) => {
    const logs = loadLogs();
    const currentTime = DateTime.now().setZone("Asia/Kolkata").toISO();

    logs[device.ip] = logs[device.ip] || [];
    logs[device.ip].push({ status: "Offline", timestamp: currentTime });

    saveLogs(logs);
};

// Stop tracking when device status changes
const stopTracking = (device) => {
    if (activeDevices[device.ip]) {
        clearInterval(activeDevices[device.ip]);
        delete activeDevices[device.ip];
    }
};

// Function to Ping a Single Device
const pingDevice = (ip) => {
    return new Promise((resolve) => {
        ping.sys.probe(ip, (isAlive) => {
            resolve(isAlive ? "Online" : "Offline");
        });
    });
};

// Function to ping devices and cache results
const cache = new Map();
const pingDevices = async (devices) => {
    const limit = pLimit(10);

    const pingPromises = devices.map((device) =>
        limit(async () => {
            if (!device.ip_address) {
                device.status = "IP Address Missing";
                return;
            }

            if (cache.has(device.ip_address)) {
                device.status = cache.get(device.ip_address);
            } else {
                device.status = await pingDevice(device.ip_address);
                cache.set(device.ip_address, device.status);
            }

            monitorDevice(device);
        })
    );

    await Promise.all(pingPromises);
};

// Fetch Global Data
const fetchGlobalData = async () => {
    if (!allData || Object.keys(allData).length === 0) {
        console.error("Error: Device data is not loaded.");
        return null;
    }

    const allDevices = [...allData.cameras, ...allData.archivers, ...allData.controllers, ...allData.servers];

    await pingDevices(allDevices);
    const summary = calculateSummary(allData);

    return { summary, details: allData };
};

// Fetch Region Data
const fetchRegionData = async (regionName) => {
    if (!allData || Object.keys(allData).length === 0) {
        console.error("Error: Device data is not loaded.");
        return null;
    }

    const filterByRegion = (devices) =>
        devices.filter(device => device.location?.toLowerCase() === regionName.toLowerCase());

    const regionDevices = {
        cameras: filterByRegion(allData.cameras),
        archivers: filterByRegion(allData.archivers),
        controllers: filterByRegion(allData.controllers),
        servers: filterByRegion(allData.servers),
    };

    await pingDevices([...regionDevices.cameras, ...regionDevices.archivers, ...regionDevices.controllers, ...regionDevices.servers]);

    const summary = calculateSummary(regionDevices);
    return { summary, details: regionDevices };
};

// Calculate summary of devices
const calculateSummary = (devices) => {
    const summary = {};

    for (const [key, deviceList] of Object.entries(devices)) {
        const total = deviceList.length;
        const online = deviceList.filter(device => device.status === "Online").length;
        const offline = total - online;

        summary[key] = { total, online, offline };
    }

    return {
        totalDevices: Object.values(summary).reduce((sum, { total }) => sum + total, 0),
        totalOnlineDevices: Object.values(summary).reduce((sum, { online }) => sum + online, 0),
        totalOfflineDevices: Object.values(summary).reduce((sum, { offline }) => sum + offline, 0),
        ...summary,
    };
};

// Preload Data
loadExcelData();

module.exports = { fetchGlobalData, fetchRegionData, fetchAllIpAddress };
