const fs = require("fs");
const ping = require("ping");

// Routes
app.use("/api/regions", regionRoutes);

// Device Status Tracking
const devices = fetchAllIpAddress();
let deviceStatus = {};
const logFile = "./deviceLogs.json";

// Load previous logs if they exist
let deviceLogs = fs.existsSync(logFile) ? JSON.parse(fs.readFileSync(logFile, "utf8")) : {};

// Function to log device status changes
function logDeviceChange(ip, newStatus) {
    const timestamp = new Date().toISOString();

    if (!deviceLogs[ip]) {
        deviceLogs[ip] = [];
    }

    const lastLog = deviceLogs[ip].length ? deviceLogs[ip][deviceLogs[ip].length - 1] : null;

    // Log only if status changes
    if (!lastLog || lastLog.status !== newStatus) {
        deviceLogs[ip].push({ status: newStatus, timestamp });

        // Save to file
        fs.writeFileSync(logFile, JSON.stringify(deviceLogs, null, 2));
        console.log(`Device ${ip} changed status to ${newStatus} at ${timestamp}`);
    }
}

// Ping all devices and log changes
async function pingDevices() {
    for (const ip of devices) {
        try {
            const result = await ping.promise.probe(ip);
            const newStatus = result.alive ? "Online" : "Offline";

            // Log only if status has changed
            if (!deviceStatus[ip] || deviceStatus[ip] !== newStatus) {
                logDeviceChange(ip, newStatus);
            }

            // Update current device status
            deviceStatus[ip] = newStatus;
        } catch (error) {
            console.error(`Error pinging ${ip}:`, error);
            deviceStatus[ip] = "Offline";
        }
    }
    console.log("Updated device statuses:", deviceStatus);
}

// Call `pingDevices` function at regular intervals (every 1 minute)
setInterval(pingDevices, 60000);
