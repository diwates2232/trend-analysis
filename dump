const storeStatusInHistory = (ip, status) => {
  const currentDate = moment().tz("Asia/Kolkata").format("YYYY-MM-DD");
  const currentWeek = moment().tz("Asia/Kolkata").week();
  const currentMonth = moment().tz("Asia/Kolkata").month() + 1;

  console.log(`Storing status for device: ${ip}, Status: ${status}`);

  let currentDeviceStatus = deviceStatus.get(ip);

  // If currentDeviceStatus is undefined, initialize it
  if (!currentDeviceStatus) {
    console.log(`Initializing new device status for: ${ip}`);
    currentDeviceStatus = {
      status: "Unknown",
      failCount: 0,
      lastOnline: null,
      lastOffline: null, // Timestamp for when the device went offline
      statusHistory: {
        day: {},
        week: {},
        month: {}
      }
    };
  }

  // Ensure that statusHistory is properly initialized
  let statusHistory = currentDeviceStatus.statusHistory;

  // Double-check initialization of statusHistory
  if (!statusHistory) {
    console.log(`Re-initializing statusHistory for device: ${ip}`);
    currentDeviceStatus.statusHistory = { day: {}, week: {}, month: {} };
    statusHistory = currentDeviceStatus.statusHistory;
  }

  // Store status by day
  if (!statusHistory.day[currentDate]) {
    console.log(`Initializing day history for: ${ip} on ${currentDate}`);
    statusHistory.day[currentDate] = { uptime: 0, downtime: 0, downtimeDuration: 0 }; // Add downtimeDuration
  }

  if (status === "Online") {
    if (currentDeviceStatus.lastOffline) {
      const downtimeDuration = moment().diff(moment(currentDeviceStatus.lastOffline), 'seconds');
      statusHistory.day[currentDate].downtimeDuration += downtimeDuration;
      statusHistory.day[currentDate].downtime++;
      console.log(`Device ${ip} came online after being offline for ${downtimeDuration} seconds`);
    }
    statusHistory.day[currentDate].uptime++;
    currentDeviceStatus.lastOffline = null;  // Reset lastOffline when online
    console.log(`Device ${ip} is now online`);
  } else {
    statusHistory.day[currentDate].downtime++;
    currentDeviceStatus.lastOffline = new Date();
    console.log(`Device ${ip} is now offline`);
  }

  // Store status by week
  if (!statusHistory.week[currentWeek]) {
    console.log(`Initializing week history for: ${ip} on week ${currentWeek}`);
    statusHistory.week[currentWeek] = { uptime: 0, downtime: 0, downtimeDuration: 0 };
  }

  if (status === "Online") {
    if (currentDeviceStatus.lastOffline) {
      const downtimeDuration = moment().diff(moment(currentDeviceStatus.lastOffline), 'seconds');
      statusHistory.week[currentWeek].downtimeDuration += downtimeDuration;
      statusHistory.week[currentWeek].downtime++;
      console.log(`Device ${ip} came online after being offline for ${downtimeDuration} seconds in week ${currentWeek}`);
    }
    statusHistory.week[currentWeek].uptime++;
    currentDeviceStatus.lastOffline = null;  // Reset lastOffline when online
  } else {
    statusHistory.week[currentWeek].downtime++;
    currentDeviceStatus.lastOffline = new Date();
  }

  // Store status by month
  if (!statusHistory.month[currentMonth]) {
    console.log(`Initializing month history for: ${ip} on month ${currentMonth}`);
    statusHistory.month[currentMonth] = { uptime: 0, downtime: 0, downtimeDuration: 0 };
  }

  if (status === "Online") {
    if (currentDeviceStatus.lastOffline) {
      const downtimeDuration = moment().diff(moment(currentDeviceStatus.lastOffline), 'seconds');
      statusHistory.month[currentMonth].downtimeDuration += downtimeDuration;
      statusHistory.month[currentMonth].downtime++;
      console.log(`Device ${ip} came online after being offline for ${downtimeDuration} seconds in month ${currentMonth}`);
    }
    statusHistory.month[currentMonth].uptime++;
    currentDeviceStatus.lastOffline = null;  // Reset lastOffline when online
  } else {
    statusHistory.month[currentMonth].downtime++;
    currentDeviceStatus.lastOffline = new Date();
  }

  // Ensure device status is updated in the deviceStatus map
  deviceStatus.set(ip, currentDeviceStatus);

  console.log(`Device status updated for: ${ip}`, currentDeviceStatus);
};

















const storeStatusInHistory = (ip, status) => {
  const currentDate = moment().tz("Asia/Kolkata").format("YYYY-MM-DD");
  const currentWeek = moment().tz("Asia/Kolkata").week();
  const currentMonth = moment().tz("Asia/Kolkata").month() + 1;

  console.log(`Storing status for device: ${ip}, Status: ${status}`);

  let currentDeviceStatus = deviceStatus.get(ip);

  // If currentDeviceStatus is undefined, initialize it
  if (!currentDeviceStatus) {
    console.log(`Initializing new device status for: ${ip}`);
    currentDeviceStatus = {
      status: "Unknown",
      failCount: 0,
      lastOnline: null,
      lastOffline: null, // Timestamp for when the device went offline
      statusHistory: {
        day: {},
        week: {},
        month: {}
      }
    };
  }

  // Ensure that statusHistory is properly initialized
  let statusHistory = currentDeviceStatus.statusHistory;

  // Double-check initialization of statusHistory
  if (!statusHistory) {
    console.log(`Re-initializing statusHistory for device: ${ip}`);
    currentDeviceStatus.statusHistory = { day: {}, week: {}, month: {} };
    statusHistory = currentDeviceStatus.statusHistory;
  }

  // Store status by day
  if (!statusHistory.day[currentDate]) {
    console.log(`Initializing day history for: ${ip} on ${currentDate}`);
    statusHistory.day[currentDate] = { uptime: 0, downtime: 0, downtimeDuration: 0 }; // Add downtimeDuration
  }

  if (status === "Online") {
    if (currentDeviceStatus.lastOffline) {
      const downtimeDuration = moment().diff(moment(currentDeviceStatus.lastOffline), 'seconds');
      statusHistory.day[currentDate].downtimeDuration += downtimeDuration;
      statusHistory.day[currentDate].downtime++;
      console.log(`Device ${ip} came online after being offline for ${downtimeDuration} seconds`);
    }
    statusHistory.day[currentDate].uptime++;
    currentDeviceStatus.lastOffline = null;  // Reset lastOffline when online
    console.log(`Device ${ip} is now online`);
  } else {
    statusHistory.day[currentDate].downtime++;
    currentDeviceStatus.lastOffline = new Date();
    console.log(`Device ${ip} is now offline`);
  }

  // Store status by week
  if (!statusHistory.week[currentWeek]) {
    console.log(`Initializing week history for: ${ip} on week ${currentWeek}`);
    statusHistory.week[currentWeek] = { uptime: 0, downtime: 0, downtimeDuration: 0 };
  }

  if (status === "Online") {
    if (currentDeviceStatus.lastOffline) {
      const downtimeDuration = moment().diff(moment(currentDeviceStatus.lastOffline), 'seconds');
      statusHistory.week[currentWeek].downtimeDuration += downtimeDuration;
      statusHistory.week[currentWeek].downtime++;
      console.log(`Device ${ip} came online after being offline for ${downtimeDuration} seconds in week ${currentWeek}`);
    }
    statusHistory.week[currentWeek].uptime++;
    currentDeviceStatus.lastOffline = null;  // Reset lastOffline when online
  } else {
    statusHistory.week[currentWeek].downtime++;
    currentDeviceStatus.lastOffline = new Date();
  }

  // Store status by month
  if (!statusHistory.month[currentMonth]) {
    console.log(`Initializing month history for: ${ip} on month ${currentMonth}`);
    statusHistory.month[currentMonth] = { uptime: 0, downtime: 0, downtimeDuration: 0 };
  }

  if (status === "Online") {
    if (currentDeviceStatus.lastOffline) {
      const downtimeDuration = moment().diff(moment(currentDeviceStatus.lastOffline), 'seconds');
      statusHistory.month[currentMonth].downtimeDuration += downtimeDuration;
      statusHistory.month[currentMonth].downtime++;
      console.log(`Device ${ip} came online after being offline for ${downtimeDuration} seconds in month ${currentMonth}`);
    }
    statusHistory.month[currentMonth].uptime++;
    currentDeviceStatus.lastOffline = null;  // Reset lastOffline when online
  } else {
    statusHistory.month[currentMonth].downtime++;
    currentDeviceStatus.lastOffline = new Date();
  }

  // Ensure device status is updated in the deviceStatus map
  deviceStatus.set(ip, currentDeviceStatus);

  console.log(`Device status updated for: ${ip}`, currentDeviceStatus);
};
